{
  "transaction_info": {
    "hash": "0xde903046b5cdf27a5391b771f41e645e9cc670b649f7b87b1524fc4076f45983",
    "block_number": 29437439,
    "block_hash": "0xa275a417eda37e1b1125c7dc30fba61b25f5bef340c18a96a3eb170e9fa950d0",
    "position": 2
  },
  "call_tree": [
    {
      "trace_index": 0,
      "trace_address": [],
      "call_type": "call",
      "from": "0xe3223f7e3343c2c8079f261d59ee1e513086c7c3",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 21
    },
    {
      "trace_index": 1,
      "trace_address": [
        0
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 1
    },
    {
      "trace_index": 2,
      "trace_address": [
        0,
        0
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)"
    },
    {
      "trace_index": 3,
      "trace_address": [
        1
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000002cd6b0c1da0b529d1e68bfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcee0800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "slot0()"
    },
    {
      "trace_index": 4,
      "trace_address": [
        2
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000d0b53d9277642d899df5c87a3966a349a798f224",
      "subtraces": 1
    },
    {
      "trace_index": 5,
      "trace_address": [
        2,
        0
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000d0b53d9277642d899df5c87a3966a349a798f224",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=500)"
    },
    {
      "trace_index": 6,
      "trace_address": [
        3
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xd0b53d9277642d899df5c87a3966a349a798f224",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000002c9d4b7e67a7b9ec470e3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffceda40000000000000000000000000000000000000000000000000000000000000af10000000000000000000000000000000000000000000000000000000000001388000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "slot0()"
    },
    {
      "trace_index": 7,
      "trace_address": [
        4
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xd0b53d9277642d899df5c87a3966a349a798f224",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000002c9d4b7e67a7b9ec470e3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffceda40000000000000000000000000000000000000000000000000000000000000af10000000000000000000000000000000000000000000000000000000000001388000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "slot0()"
    },
    {
      "trace_index": 8,
      "trace_address": [
        5
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 1
    },
    {
      "trace_index": 9,
      "trace_address": [
        5,
        0
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)"
    },
    {
      "trace_index": 10,
      "trace_address": [
        6
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000023ba2afad288cf6f890",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb)"
    },
    {
      "trace_index": 11,
      "trace_address": [
        7
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000147ff07adfac",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb)"
    },
    {
      "trace_index": 12,
      "trace_address": [
        7,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000147ff07adfac",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb)"
    },
    {
      "trace_index": 13,
      "trace_address": [
        8
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000023ba2afad288cf6f890",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb)"
    },
    {
      "trace_index": 14,
      "trace_address": [
        9
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000147ff07adfac",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb)"
    },
    {
      "trace_index": 15,
      "trace_address": [
        9,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000147ff07adfac",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb)"
    },
    {
      "trace_index": 16,
      "trace_address": [
        10
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "approve(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb,uint256=10544813644832897955984)"
    },
    {
      "trace_index": 17,
      "trace_address": [
        11
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 3,
      "decoded_input": "flashLoan(address=0x4200000000000000000000000000000000000006,uint256=10544813644832897955984,bytes=0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000005d93f216f17c225a8b5ffa34e74b7133436281ee000000000000000000000000bc303acda8b2a0dcd3d17f05adddf854edd6da59000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000c1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d000000000000000000000000a68f6075ae62ebd514d1600cb5035fa0e2210ef80000000000000000000000006799246165c8ce1ed2e5cf8c494fa8e7a5de447200000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017b7883c06916600000000000000000000000000000000000000000000000000000000012309ce540000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d0b53d9277642d899df5c87a3966a349a798f2240000000000000000000000000000000000000000000000000000000000000000)"
    },
    {
      "trace_index": 18,
      "trace_address": [
        11,
        0
      ],
      "call_type": "call",
      "from": "0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=10544813644832897955984)"
    },
    {
      "trace_index": 19,
      "trace_address": [
        11,
        1
      ],
      "call_type": "call",
      "from": "0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 4,
      "decoded_input": "onMorphoFlashLoan(uint256=10544813644832897955984,bytes=0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000005d93f216f17c225a8b5ffa34e74b7133436281ee000000000000000000000000bc303acda8b2a0dcd3d17f05adddf854edd6da59000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000c1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d000000000000000000000000a68f6075ae62ebd514d1600cb5035fa0e2210ef80000000000000000000000006799246165c8ce1ed2e5cf8c494fa8e7a5de447200000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017b7883c06916600000000000000000000000000000000000000000000000000000000012309ce540000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d0b53d9277642d899df5c87a3966a349a798f2240000000000000000000000000000000000000000000000000000000000000000)"
    },
    {
      "trace_index": 20,
      "trace_address": [
        11,
        1,
        0
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 21,
      "trace_address": [
        11,
        1,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 22,
      "trace_address": [
        11,
        1,
        1
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000147ff07adfac",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb)"
    },
    {
      "trace_index": 23,
      "trace_address": [
        11,
        1,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000147ff07adfac",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb)"
    },
    {
      "trace_index": 24,
      "trace_address": [
        11,
        1,
        2
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "approve(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb,uint256=22539727986604)"
    },
    {
      "trace_index": 25,
      "trace_address": [
        11,
        1,
        2,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "approve(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb,uint256=22539727986604)"
    },
    {
      "trace_index": 26,
      "trace_address": [
        11,
        1,
        3
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 3,
      "decoded_input": "flashLoan(address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint256=22539727986604,bytes=0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000005d93f216f17c225a8b5ffa34e74b7133436281ee000000000000000000000000bc303acda8b2a0dcd3d17f05adddf854edd6da59000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000c1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d000000000000000000000000a68f6075ae62ebd514d1600cb5035fa0e2210ef80000000000000000000000006799246165c8ce1ed2e5cf8c494fa8e7a5de447200000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017b7883c06916600000000000000000000000000000000000000000000000000000000012309ce540000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d0b53d9277642d899df5c87a3966a349a798f2240000000000000000000000000000000000000000000000000000000000000000)"
    },
    {
      "trace_index": 27,
      "trace_address": [
        11,
        1,
        3,
        0
      ],
      "call_type": "call",
      "from": "0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=22539727986604)"
    },
    {
      "trace_index": 28,
      "trace_address": [
        11,
        1,
        3,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=22539727986604)"
    },
    {
      "trace_index": 29,
      "trace_address": [
        11,
        1,
        3,
        1
      ],
      "call_type": "call",
      "from": "0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 247,
      "decoded_input": "onMorphoFlashLoan(uint256=22539727986604,bytes=0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000005d93f216f17c225a8b5ffa34e74b7133436281ee000000000000000000000000bc303acda8b2a0dcd3d17f05adddf854edd6da59000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000c1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d000000000000000000000000a68f6075ae62ebd514d1600cb5035fa0e2210ef80000000000000000000000006799246165c8ce1ed2e5cf8c494fa8e7a5de447200000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017b7883c06916600000000000000000000000000000000000000000000000000000000012309ce540000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d0b53d9277642d899df5c87a3966a349a798f2240000000000000000000000000000000000000000000000000000000000000000)"
    },
    {
      "trace_index": 30,
      "trace_address": [
        11,
        1,
        3,
        1,
        0
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000147ff07adfac",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 31,
      "trace_address": [
        11,
        1,
        3,
        1,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000147ff07adfac",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 32,
      "trace_address": [
        11,
        1,
        3,
        1,
        1
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000041ed3833954752089",
      "subtraces": 0,
      "decoded_input": "totalBorrows()"
    },
    {
      "trace_index": 33,
      "trace_address": [
        11,
        1,
        3,
        1,
        2
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
      "subtraces": 0,
      "decoded_input": "debtCeiling()"
    },
    {
      "trace_index": 34,
      "trace_address": [
        11,
        1,
        3,
        1,
        3
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000001e0462a7738c0f471",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)"
    },
    {
      "trace_index": 35,
      "trace_address": [
        11,
        1,
        3,
        1,
        4
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 1
    },
    {
      "trace_index": 36,
      "trace_address": [
        11,
        1,
        3,
        1,
        4,
        0
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)"
    },
    {
      "trace_index": 37,
      "trace_address": [
        11,
        1,
        3,
        1,
        5
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000004",
      "subtraces": 0,
      "decoded_input": "tickSpacing()"
    },
    {
      "trace_index": 38,
      "trace_address": [
        11,
        1,
        3,
        1,
        6
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000002cd6b0c1da0b529d1e68bfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcee0800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "slot0()"
    },
    {
      "trace_index": 39,
      "trace_address": [
        11,
        1,
        3,
        1,
        7
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffffffcd5904720f5a35000000000000000000000000000000000000000000000000000000003b9aca00",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=1000000000,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 40,
      "trace_address": [
        11,
        1,
        3,
        1,
        7,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=14257348183893451)"
    },
    {
      "trace_index": 41,
      "trace_address": [
        11,
        1,
        3,
        1,
        7,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000000006fc763",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 42,
      "trace_address": [
        11,
        1,
        3,
        1,
        7,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000000006fc763",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 43,
      "trace_address": [
        11,
        1,
        3,
        1,
        7,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-14257348183893451,int256=1000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 44,
      "trace_address": [
        11,
        1,
        3,
        1,
        7,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=1000000000)"
    },
    {
      "trace_index": 45,
      "trace_address": [
        11,
        1,
        3,
        1,
        7,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=1000000000)"
    },
    {
      "trace_index": 46,
      "trace_address": [
        11,
        1,
        3,
        1,
        7,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000003c0a9163",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 47,
      "trace_address": [
        11,
        1,
        3,
        1,
        7,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000003c0a9163",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 48,
      "trace_address": [
        11,
        1,
        3,
        1,
        8
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000018ef6dd4692796e9706651afffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe716d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "slot0()"
    },
    {
      "trace_index": 49,
      "trace_address": [
        11,
        1,
        3,
        1,
        9
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000106ba0a58c5f7000",
      "subtraces": 0,
      "decoded_input": "safetyMarginSqrt()"
    },
    {
      "trace_index": 50,
      "trace_address": [
        11,
        1,
        3,
        1,
        10
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000a75cb1d9d23d000000000000000000000000000000000000000000000000000012309ce54000",
      "subtraces": 5,
      "decoded_input": "mint(address=0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8,int24=-196216,int24=-102028,uint128=3315194000212825,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 51,
      "trace_address": [
        11,
        1,
        3,
        1,
        10,
        0
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000ce4338209188",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 52,
      "trace_address": [
        11,
        1,
        3,
        1,
        10,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000003c0a9163",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 53,
      "trace_address": [
        11,
        1,
        3,
        1,
        10,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000003c0a9163",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 54,
      "trace_address": [
        11,
        1,
        3,
        1,
        10,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 2,
      "decoded_input": "uniswapV3MintCallback(uint256=184016562672189,uint256=20000000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 55,
      "trace_address": [
        11,
        1,
        3,
        1,
        10,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=184016562672189)"
    },
    {
      "trace_index": 56,
      "trace_address": [
        11,
        1,
        3,
        1,
        10,
        2,
        1
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=20000000000000)"
    },
    {
      "trace_index": 57,
      "trace_address": [
        11,
        1,
        3,
        1,
        10,
        2,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=20000000000000)"
    },
    {
      "trace_index": 58,
      "trace_address": [
        11,
        1,
        3,
        1,
        10,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000001759fe9fa63c5",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 59,
      "trace_address": [
        11,
        1,
        3,
        1,
        10,
        4
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001230d8efd163",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 60,
      "trace_address": [
        11,
        1,
        3,
        1,
        10,
        4,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001230d8efd163",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 61,
      "trace_address": [
        11,
        1,
        3,
        1,
        11
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000000000000ff",
      "subtraces": 4
    },
    {
      "trace_index": 62,
      "trace_address": [
        11,
        1,
        3,
        1,
        11,
        0
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)"
    },
    {
      "trace_index": 63,
      "trace_address": [
        11,
        1,
        3,
        1,
        11,
        1
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000bc726c0be83590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0,
      "decoded_input": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)"
    },
    {
      "trace_index": 64,
      "trace_address": [
        11,
        1,
        3,
        1,
        11,
        2
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)"
    },
    {
      "trace_index": 65,
      "trace_address": [
        11,
        1,
        3,
        1,
        11,
        3
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000bc726c0be83590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0,
      "decoded_input": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)"
    },
    {
      "trace_index": 66,
      "trace_address": [
        11,
        1,
        3,
        1,
        12
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 0,
      "decoded_input": "transferFrom(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,address=0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d,uint256=255)"
    },
    {
      "trace_index": 67,
      "trace_address": [
        11,
        1,
        3,
        1,
        13
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "mint(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=255)"
    },
    {
      "trace_index": 68,
      "trace_address": [
        11,
        1,
        3,
        1,
        13,
        0
      ],
      "call_type": "staticcall",
      "from": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000c1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "subtraces": 0,
      "decoded_input": "ownerOf(uint256=255)"
    },
    {
      "trace_index": 69,
      "trace_address": [
        11,
        1,
        3,
        1,
        14
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000002720e0d395c630ffffffffffffffffffffffffffffffffffffffffffffffffffffffa2de246000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 70,
      "trace_address": [
        11,
        1,
        3,
        1,
        14,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=400000000000)"
    },
    {
      "trace_index": 71,
      "trace_address": [
        11,
        1,
        3,
        1,
        14,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=400000000000)"
    },
    {
      "trace_index": 72,
      "trace_address": [
        11,
        1,
        3,
        1,
        14,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000001759fe9fa63c5",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 73,
      "trace_address": [
        11,
        1,
        3,
        1,
        14,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=11013674086286896,int256=-400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 74,
      "trace_address": [
        11,
        1,
        3,
        1,
        14,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=11013674086286896)"
    },
    {
      "trace_index": 75,
      "trace_address": [
        11,
        1,
        3,
        1,
        14,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000289680bd9029f5",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 76,
      "trace_address": [
        11,
        1,
        3,
        1,
        15
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffffffd8e11ff990a8760000000000000000000000000000000000000000000000000000005d26a0b993",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=400080026003,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 77,
      "trace_address": [
        11,
        1,
        3,
        1,
        15,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=11011471621183370)"
    },
    {
      "trace_index": 78,
      "trace_address": [
        11,
        1,
        3,
        1,
        15,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000011d3b7143163",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 79,
      "trace_address": [
        11,
        1,
        3,
        1,
        15,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000011d3b7143163",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 80,
      "trace_address": [
        11,
        1,
        3,
        1,
        15,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-11011471621183370,int256=400080026003,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 81,
      "trace_address": [
        11,
        1,
        3,
        1,
        15,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=400080026003)"
    },
    {
      "trace_index": 82,
      "trace_address": [
        11,
        1,
        3,
        1,
        15,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=400080026003)"
    },
    {
      "trace_index": 83,
      "trace_address": [
        11,
        1,
        3,
        1,
        15,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001230ddb4eaf6",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 84,
      "trace_address": [
        11,
        1,
        3,
        1,
        15,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001230ddb4eaf6",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 85,
      "trace_address": [
        11,
        1,
        3,
        1,
        16
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000000007054e800000000000000000000000000000000000000000000000000000000000c3579",
      "subtraces": 9,
      "decoded_input": "reinvest(uint256=255,address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 86,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        0
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0xe5d6cf969c01bf8d6c46840ed784d7f209038d7a",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000077eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "subtraces": 0
    },
    {
      "trace_index": 87,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        1
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)"
    },
    {
      "trace_index": 88,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        2
      ],
      "call_type": "call",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0,
      "decoded_input": "burn(int24=-196216,int24=-102028,uint128=0)"
    },
    {
      "trace_index": 89,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        3
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000bc726c0be835900000000000000000000000000000000002b8ad9c29158cbab2d3f8140206edf0000000000000000000000000000000000000067a8b0dcb084f5141b7b7a9b4900000000000000000000000000000000000000000000000000000200d6e2075b0000000000000000000000000000000000000000000000000000000004c4e36c",
      "subtraces": 0,
      "decoded_input": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)"
    },
    {
      "trace_index": 90,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        4
      ],
      "call_type": "call",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000002be12ae50000000000000000000000000000000000000000000000000000000004c4e36c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f60800000000000000000000000000000000000000000000000000000000000000c8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd0188fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe7174000000000000000000000000000000000000000000000000000bc726c0be8359000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff000000000000000000000000000000000000000000000000000000002be12ae50000000000000000000000000000000000000000000000000000000004c4e36c0000000000000000000000000000000000000000000000000000000306b69b7e",
      "subtraces": 5
    },
    {
      "trace_index": 91,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        4,
        0
      ],
      "call_type": "staticcall",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000004200000000000000000000000000000000000006",
      "subtraces": 0,
      "decoded_input": "amarettoIdealist()"
    },
    {
      "trace_index": 92,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        4,
        1
      ],
      "call_type": "staticcall",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "subtraces": 0,
      "decoded_input": "detectabilityAntiauthoritarianism()"
    },
    {
      "trace_index": 93,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        4,
        2
      ],
      "call_type": "staticcall",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xe5d6cf969c01bf8d6c46840ed784d7f209038d7a",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000a68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "subtraces": 0
    },
    {
      "trace_index": 94,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        4,
        3
      ],
      "call_type": "staticcall",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 1
    },
    {
      "trace_index": 95,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        4,
        3,
        0
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)"
    },
    {
      "trace_index": 96,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        4,
        4
      ],
      "call_type": "staticcall",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000018ef6dd49e31c1aba5f06cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe716d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "slot0()"
    },
    {
      "trace_index": 97,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        5
      ],
      "call_type": "call",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000002be12ae50000000000000000000000000000000000000000000000000000000004c4e36c",
      "subtraces": 2,
      "decoded_input": "collect(address=0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1,int24=-196216,int24=-102028,uint128=736176869,uint128=80012140)"
    },
    {
      "trace_index": 98,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        5,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1,uint256=736176869)"
    },
    {
      "trace_index": 99,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        5,
        1
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1,uint256=80012140)"
    },
    {
      "trace_index": 100,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        5,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1,uint256=80012140)"
    },
    {
      "trace_index": 101,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        6
      ],
      "call_type": "call",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000000007054e800000000000000000000000000000000000000000000000000000000000c3579",
      "subtraces": 6
    },
    {
      "trace_index": 102,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        6,
        0
      ],
      "call_type": "staticcall",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000004200000000000000000000000000000000000006",
      "subtraces": 0,
      "decoded_input": "amarettoIdealist()"
    },
    {
      "trace_index": 103,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        6,
        1
      ],
      "call_type": "staticcall",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "subtraces": 0,
      "decoded_input": "detectabilityAntiauthoritarianism()"
    },
    {
      "trace_index": 104,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        6,
        2
      ],
      "call_type": "staticcall",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xe5d6cf969c01bf8d6c46840ed784d7f209038d7a",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000a68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "subtraces": 0
    },
    {
      "trace_index": 105,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        6,
        3
      ],
      "call_type": "call",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000002b0081140000000000000000000000000000000000000000000000000000000004ac787a",
      "subtraces": 5,
      "decoded_input": "mint(address=0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8,int24=-196216,int24=-102028,uint128=12997532542,bytes=0x00000000000000000000000000000000000000000000000000000000000000c80000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 106,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        6,
        3,
        0
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000177a08b3fa786",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 107,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        6,
        3,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001230d8f0078a",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 108,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        6,
        3,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001230d8f0078a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 109,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        6,
        3,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 3,
      "decoded_input": "uniswapV3MintCallback(uint256=721453332,uint256=78411898,bytes=0x00000000000000000000000000000000000000000000000000000000000000c80000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 110,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        6,
        3,
        2,
        0
      ],
      "call_type": "staticcall",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)"
    },
    {
      "trace_index": 111,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        6,
        3,
        2,
        1
      ],
      "call_type": "call",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=721453332)"
    },
    {
      "trace_index": 112,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        6,
        3,
        2,
        2
      ],
      "call_type": "call",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=78411898)"
    },
    {
      "trace_index": 113,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        6,
        3,
        2,
        2,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=78411898)"
    },
    {
      "trace_index": 114,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        6,
        3,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000177a0b640289a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 115,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        6,
        3,
        4
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001230dd9c8004",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 116,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        6,
        3,
        4,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001230dd9c8004",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 117,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        6,
        4
      ],
      "call_type": "call",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=7361768)"
    },
    {
      "trace_index": 118,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        6,
        5
      ],
      "call_type": "call",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=800121)"
    },
    {
      "trace_index": 119,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        6,
        5,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=800121)"
    },
    {
      "trace_index": 120,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        7
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)"
    },
    {
      "trace_index": 121,
      "trace_address": [
        11,
        1,
        3,
        1,
        16,
        8
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000bc729c7751ed700000000000000000000000000000000002b8ad9c29158cbab2d3f8140206edf0000000000000000000000000000000000000067a8b0dcb084f5141b7b7a9b4900000000000000000000000000000000000000000000000000000200ab00dc760000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0,
      "decoded_input": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)"
    },
    {
      "trace_index": 122,
      "trace_address": [
        11,
        1,
        3,
        1,
        17
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f315d1e4de1ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 123,
      "trace_address": [
        11,
        1,
        3,
        1,
        17,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 124,
      "trace_address": [
        11,
        1,
        3,
        1,
        17,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 125,
      "trace_address": [
        11,
        1,
        3,
        1,
        17,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000177a0b640289a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 126,
      "trace_address": [
        11,
        1,
        3,
        1,
        17,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950189594037729,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 127,
      "trace_address": [
        11,
        1,
        3,
        1,
        17,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950189594037729)"
    },
    {
      "trace_index": 128,
      "trace_address": [
        11,
        1,
        3,
        1,
        17,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4cb6d2135e767b",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 129,
      "trace_address": [
        11,
        1,
        3,
        1,
        18
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57b4ca6ee303000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 130,
      "trace_address": [
        11,
        1,
        3,
        1,
        18,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493250999553432829)"
    },
    {
      "trace_index": 131,
      "trace_address": [
        11,
        1,
        3,
        1,
        18,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000008bf380b004",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 132,
      "trace_address": [
        11,
        1,
        3,
        1,
        18,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000008bf380b004",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 133,
      "trace_address": [
        11,
        1,
        3,
        1,
        18,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493250999553432829,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 134,
      "trace_address": [
        11,
        1,
        3,
        1,
        18,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 135,
      "trace_address": [
        11,
        1,
        3,
        1,
        18,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 136,
      "trace_address": [
        11,
        1,
        3,
        1,
        18,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001231c4ec71df",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 137,
      "trace_address": [
        11,
        1,
        3,
        1,
        18,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001231c4ec71df",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 138,
      "trace_address": [
        11,
        1,
        3,
        1,
        19
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f31c7d7207fffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 139,
      "trace_address": [
        11,
        1,
        3,
        1,
        19,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 140,
      "trace_address": [
        11,
        1,
        3,
        1,
        19,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 141,
      "trace_address": [
        11,
        1,
        3,
        1,
        19,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000b0e86ddcd597e",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 142,
      "trace_address": [
        11,
        1,
        3,
        1,
        19,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950191384535167,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 143,
      "trace_address": [
        11,
        1,
        3,
        1,
        19,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950191384535167)"
    },
    {
      "trace_index": 144,
      "trace_address": [
        11,
        1,
        3,
        1,
        19,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb564db8a5a479fd",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 145,
      "trace_address": [
        11,
        1,
        3,
        1,
        20
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57b45fbbb754000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 146,
      "trace_address": [
        11,
        1,
        3,
        1,
        20,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251001343559852)"
    },
    {
      "trace_index": 147,
      "trace_address": [
        11,
        1,
        3,
        1,
        20,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000008cdad0a1df",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 148,
      "trace_address": [
        11,
        1,
        3,
        1,
        20,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000008cdad0a1df",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 149,
      "trace_address": [
        11,
        1,
        3,
        1,
        20,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251001343559852,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 150,
      "trace_address": [
        11,
        1,
        3,
        1,
        20,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 151,
      "trace_address": [
        11,
        1,
        3,
        1,
        20,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 152,
      "trace_address": [
        11,
        1,
        3,
        1,
        20,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001232ac3c63ba",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 153,
      "trace_address": [
        11,
        1,
        3,
        1,
        20,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001232ac3c63ba",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 154,
      "trace_address": [
        11,
        1,
        3,
        1,
        21
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f32328fc2ffffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 155,
      "trace_address": [
        11,
        1,
        3,
        1,
        21,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 156,
      "trace_address": [
        11,
        1,
        3,
        1,
        21,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 157,
      "trace_address": [
        11,
        1,
        3,
        1,
        21,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000014a56d05603151",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 158,
      "trace_address": [
        11,
        1,
        3,
        1,
        21,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950193175020287,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 159,
      "trace_address": [
        11,
        1,
        3,
        1,
        21,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950193175020287)"
    },
    {
      "trace_index": 160,
      "trace_address": [
        11,
        1,
        3,
        1,
        21,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb5fe49f37eff450",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 161,
      "trace_address": [
        11,
        1,
        3,
        1,
        22
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57b3f5088ba5000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 162,
      "trace_address": [
        11,
        1,
        3,
        1,
        22,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251003133686875)"
    },
    {
      "trace_index": 163,
      "trace_address": [
        11,
        1,
        3,
        1,
        22,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000008dc22093ba",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 164,
      "trace_address": [
        11,
        1,
        3,
        1,
        22,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000008dc22093ba",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 165,
      "trace_address": [
        11,
        1,
        3,
        1,
        22,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251003133686875,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 166,
      "trace_address": [
        11,
        1,
        3,
        1,
        22,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 167,
      "trace_address": [
        11,
        1,
        3,
        1,
        22,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 168,
      "trace_address": [
        11,
        1,
        3,
        1,
        22,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001233938c5595",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 169,
      "trace_address": [
        11,
        1,
        3,
        1,
        22,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001233938c5595",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 170,
      "trace_address": [
        11,
        1,
        3,
        1,
        23
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f329d48657fffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 171,
      "trace_address": [
        11,
        1,
        3,
        1,
        23,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 172,
      "trace_address": [
        11,
        1,
        3,
        1,
        23,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 173,
      "trace_address": [
        11,
        1,
        3,
        1,
        23,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000001e3c532cf87ff5",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 174,
      "trace_address": [
        11,
        1,
        3,
        1,
        23,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950194965505407,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 175,
      "trace_address": [
        11,
        1,
        3,
        1,
        23,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950194965505407)"
    },
    {
      "trace_index": 176,
      "trace_address": [
        11,
        1,
        3,
        1,
        23,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb697b85ca40e574",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 177,
      "trace_address": [
        11,
        1,
        3,
        1,
        24
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57b38a555ff6000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 178,
      "trace_address": [
        11,
        1,
        3,
        1,
        24,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251004923813898)"
    },
    {
      "trace_index": 179,
      "trace_address": [
        11,
        1,
        3,
        1,
        24,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000008ea9708595",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 180,
      "trace_address": [
        11,
        1,
        3,
        1,
        24,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000008ea9708595",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 181,
      "trace_address": [
        11,
        1,
        3,
        1,
        24,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251004923813898,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 182,
      "trace_address": [
        11,
        1,
        3,
        1,
        24,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 183,
      "trace_address": [
        11,
        1,
        3,
        1,
        24,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 184,
      "trace_address": [
        11,
        1,
        3,
        1,
        24,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012347adc4770",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 185,
      "trace_address": [
        11,
        1,
        3,
        1,
        24,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012347adc4770",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 186,
      "trace_address": [
        11,
        1,
        3,
        1,
        25
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f33080107ffffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 187,
      "trace_address": [
        11,
        1,
        3,
        1,
        25,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 188,
      "trace_address": [
        11,
        1,
        3,
        1,
        25,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 189,
      "trace_address": [
        11,
        1,
        3,
        1,
        25,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000027d3395496456a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 190,
      "trace_address": [
        11,
        1,
        3,
        1,
        25,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950196755990527,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 191,
      "trace_address": [
        11,
        1,
        3,
        1,
        25,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950196755990527)"
    },
    {
      "trace_index": 192,
      "trace_address": [
        11,
        1,
        3,
        1,
        25,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb73126c5c974d69",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 193,
      "trace_address": [
        11,
        1,
        3,
        1,
        26
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57b31fa23446000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 194,
      "trace_address": [
        11,
        1,
        3,
        1,
        26,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251006713940922)"
    },
    {
      "trace_index": 195,
      "trace_address": [
        11,
        1,
        3,
        1,
        26,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000008f90c07770",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 196,
      "trace_address": [
        11,
        1,
        3,
        1,
        26,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000008f90c07770",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 197,
      "trace_address": [
        11,
        1,
        3,
        1,
        26,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251006713940922,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 198,
      "trace_address": [
        11,
        1,
        3,
        1,
        26,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 199,
      "trace_address": [
        11,
        1,
        3,
        1,
        26,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 200,
      "trace_address": [
        11,
        1,
        3,
        1,
        26,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001235622c394b",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 201,
      "trace_address": [
        11,
        1,
        3,
        1,
        26,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001235622c394b",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 202,
      "trace_address": [
        11,
        1,
        3,
        1,
        27
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f3372b9aa80ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 203,
      "trace_address": [
        11,
        1,
        3,
        1,
        27,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 204,
      "trace_address": [
        11,
        1,
        3,
        1,
        27,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 205,
      "trace_address": [
        11,
        1,
        3,
        1,
        27,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000316a1f7c3981af",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 206,
      "trace_address": [
        11,
        1,
        3,
        1,
        27,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950198546475648,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 207,
      "trace_address": [
        11,
        1,
        3,
        1,
        27,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950198546475648)"
    },
    {
      "trace_index": 208,
      "trace_address": [
        11,
        1,
        3,
        1,
        27,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb7ca952eef32c2f",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 209,
      "trace_address": [
        11,
        1,
        3,
        1,
        28
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57b2b4ef0897000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 210,
      "trace_address": [
        11,
        1,
        3,
        1,
        28,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251008504067945)"
    },
    {
      "trace_index": 211,
      "trace_address": [
        11,
        1,
        3,
        1,
        28,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000907810694b",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 212,
      "trace_address": [
        11,
        1,
        3,
        1,
        28,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000907810694b",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 213,
      "trace_address": [
        11,
        1,
        3,
        1,
        28,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251008504067945,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 214,
      "trace_address": [
        11,
        1,
        3,
        1,
        28,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 215,
      "trace_address": [
        11,
        1,
        3,
        1,
        28,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 216,
      "trace_address": [
        11,
        1,
        3,
        1,
        28,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001236497c2b26",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 217,
      "trace_address": [
        11,
        1,
        3,
        1,
        28,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001236497c2b26",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 218,
      "trace_address": [
        11,
        1,
        3,
        1,
        29
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f33dd724d01ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 219,
      "trace_address": [
        11,
        1,
        3,
        1,
        29,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 220,
      "trace_address": [
        11,
        1,
        3,
        1,
        29,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 221,
      "trace_address": [
        11,
        1,
        3,
        1,
        29,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000003b0105a3e234c6",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 222,
      "trace_address": [
        11,
        1,
        3,
        1,
        29,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950200336960769,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 223,
      "trace_address": [
        11,
        1,
        3,
        1,
        29,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950200336960769)"
    },
    {
      "trace_index": 224,
      "trace_address": [
        11,
        1,
        3,
        1,
        29,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb864039815481c7",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 225,
      "trace_address": [
        11,
        1,
        3,
        1,
        30
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57b24a3bdce6000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 226,
      "trace_address": [
        11,
        1,
        3,
        1,
        30,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251010294194970)"
    },
    {
      "trace_index": 227,
      "trace_address": [
        11,
        1,
        3,
        1,
        30,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000915f605b26",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 228,
      "trace_address": [
        11,
        1,
        3,
        1,
        30,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000915f605b26",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 229,
      "trace_address": [
        11,
        1,
        3,
        1,
        30,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251010294194970,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 230,
      "trace_address": [
        11,
        1,
        3,
        1,
        30,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 231,
      "trace_address": [
        11,
        1,
        3,
        1,
        30,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 232,
      "trace_address": [
        11,
        1,
        3,
        1,
        30,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000123730cc1d01",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 233,
      "trace_address": [
        11,
        1,
        3,
        1,
        30,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000123730cc1d01",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 234,
      "trace_address": [
        11,
        1,
        3,
        1,
        31
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f34482aef84ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 235,
      "trace_address": [
        11,
        1,
        3,
        1,
        31,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 236,
      "trace_address": [
        11,
        1,
        3,
        1,
        31,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 237,
      "trace_address": [
        11,
        1,
        3,
        1,
        31,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000004497ebcb905ead",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 238,
      "trace_address": [
        11,
        1,
        3,
        1,
        31,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950202127445892,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 239,
      "trace_address": [
        11,
        1,
        3,
        1,
        31,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950202127445892)"
    },
    {
      "trace_index": 240,
      "trace_address": [
        11,
        1,
        3,
        1,
        31,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb8fd72013bb4e31",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 241,
      "trace_address": [
        11,
        1,
        3,
        1,
        32
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57b1df88b135000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 242,
      "trace_address": [
        11,
        1,
        3,
        1,
        32,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251012084321995)"
    },
    {
      "trace_index": 243,
      "trace_address": [
        11,
        1,
        3,
        1,
        32,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000009246b04d01",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 244,
      "trace_address": [
        11,
        1,
        3,
        1,
        32,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000009246b04d01",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 245,
      "trace_address": [
        11,
        1,
        3,
        1,
        32,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251012084321995,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 246,
      "trace_address": [
        11,
        1,
        3,
        1,
        32,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 247,
      "trace_address": [
        11,
        1,
        3,
        1,
        32,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 248,
      "trace_address": [
        11,
        1,
        3,
        1,
        32,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001238181c0edc",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 249,
      "trace_address": [
        11,
        1,
        3,
        1,
        32,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001238181c0edc",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 250,
      "trace_address": [
        11,
        1,
        3,
        1,
        33
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f34b2e39206ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 251,
      "trace_address": [
        11,
        1,
        3,
        1,
        33,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 252,
      "trace_address": [
        11,
        1,
        3,
        1,
        33,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 253,
      "trace_address": [
        11,
        1,
        3,
        1,
        33,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000004e2ed1f343ff66",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 254,
      "trace_address": [
        11,
        1,
        3,
        1,
        33,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950203917931014,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 255,
      "trace_address": [
        11,
        1,
        3,
        1,
        33,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950203917931014)"
    },
    {
      "trace_index": 256,
      "trace_address": [
        11,
        1,
        3,
        1,
        33,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb996e06a627916c",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 257,
      "trace_address": [
        11,
        1,
        3,
        1,
        34
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57b174d58583000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 258,
      "trace_address": [
        11,
        1,
        3,
        1,
        34,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251013874449021)"
    },
    {
      "trace_index": 259,
      "trace_address": [
        11,
        1,
        3,
        1,
        34,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000932e003edc",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 260,
      "trace_address": [
        11,
        1,
        3,
        1,
        34,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000932e003edc",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 261,
      "trace_address": [
        11,
        1,
        3,
        1,
        34,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251013874449021,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 262,
      "trace_address": [
        11,
        1,
        3,
        1,
        34,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 263,
      "trace_address": [
        11,
        1,
        3,
        1,
        34,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 264,
      "trace_address": [
        11,
        1,
        3,
        1,
        34,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001238ff6c00b7",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 265,
      "trace_address": [
        11,
        1,
        3,
        1,
        34,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001238ff6c00b7",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 266,
      "trace_address": [
        11,
        1,
        3,
        1,
        35
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f351d9c3489ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 267,
      "trace_address": [
        11,
        1,
        3,
        1,
        35,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 268,
      "trace_address": [
        11,
        1,
        3,
        1,
        35,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 269,
      "trace_address": [
        11,
        1,
        3,
        1,
        35,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000057c5b81afd16ef",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 270,
      "trace_address": [
        11,
        1,
        3,
        1,
        35,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950205708416137,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 271,
      "trace_address": [
        11,
        1,
        3,
        1,
        35,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950205708416137)"
    },
    {
      "trace_index": 272,
      "trace_address": [
        11,
        1,
        3,
        1,
        35,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bba304ed38994b78",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 273,
      "trace_address": [
        11,
        1,
        3,
        1,
        36
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57b10a2259d2000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 274,
      "trace_address": [
        11,
        1,
        3,
        1,
        36,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251015664576046)"
    },
    {
      "trace_index": 275,
      "trace_address": [
        11,
        1,
        3,
        1,
        36,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000094155030b7",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 276,
      "trace_address": [
        11,
        1,
        3,
        1,
        36,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000094155030b7",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 277,
      "trace_address": [
        11,
        1,
        3,
        1,
        36,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251015664576046,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 278,
      "trace_address": [
        11,
        1,
        3,
        1,
        36,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 279,
      "trace_address": [
        11,
        1,
        3,
        1,
        36,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 280,
      "trace_address": [
        11,
        1,
        3,
        1,
        36,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001239e6bbf292",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 281,
      "trace_address": [
        11,
        1,
        3,
        1,
        36,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001239e6bbf292",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 282,
      "trace_address": [
        11,
        1,
        3,
        1,
        37
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f358854d70bffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 283,
      "trace_address": [
        11,
        1,
        3,
        1,
        37,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 284,
      "trace_address": [
        11,
        1,
        3,
        1,
        37,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 285,
      "trace_address": [
        11,
        1,
        3,
        1,
        37,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000615c9e42bba54a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 286,
      "trace_address": [
        11,
        1,
        3,
        1,
        37,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950207498901259,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 287,
      "trace_address": [
        11,
        1,
        3,
        1,
        37,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950207498901259)"
    },
    {
      "trace_index": 288,
      "trace_address": [
        11,
        1,
        3,
        1,
        37,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bbac9bd3cb107c55",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 289,
      "trace_address": [
        11,
        1,
        3,
        1,
        38
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57b09f6f2e1f000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 290,
      "trace_address": [
        11,
        1,
        3,
        1,
        38,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251017454703073)"
    },
    {
      "trace_index": 291,
      "trace_address": [
        11,
        1,
        3,
        1,
        38,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000094fca02292",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 292,
      "trace_address": [
        11,
        1,
        3,
        1,
        38,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000094fca02292",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 293,
      "trace_address": [
        11,
        1,
        3,
        1,
        38,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251017454703073,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 294,
      "trace_address": [
        11,
        1,
        3,
        1,
        38,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 295,
      "trace_address": [
        11,
        1,
        3,
        1,
        38,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 296,
      "trace_address": [
        11,
        1,
        3,
        1,
        38,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000123ace0be46d",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 297,
      "trace_address": [
        11,
        1,
        3,
        1,
        38,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000123ace0be46d",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 298,
      "trace_address": [
        11,
        1,
        3,
        1,
        39
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f35f30d7990ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 299,
      "trace_address": [
        11,
        1,
        3,
        1,
        39,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 300,
      "trace_address": [
        11,
        1,
        3,
        1,
        39,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 301,
      "trace_address": [
        11,
        1,
        3,
        1,
        39,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000006af3846a7faa74",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 302,
      "trace_address": [
        11,
        1,
        3,
        1,
        39,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950209289386384,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 303,
      "trace_address": [
        11,
        1,
        3,
        1,
        39,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950209289386384)"
    },
    {
      "trace_index": 304,
      "trace_address": [
        11,
        1,
        3,
        1,
        39,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bbb632ba5d8d2404",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 305,
      "trace_address": [
        11,
        1,
        3,
        1,
        40
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57b034bc026d000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 306,
      "trace_address": [
        11,
        1,
        3,
        1,
        40,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251019244830099)"
    },
    {
      "trace_index": 307,
      "trace_address": [
        11,
        1,
        3,
        1,
        40,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000095e3f0146d",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 308,
      "trace_address": [
        11,
        1,
        3,
        1,
        40,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000095e3f0146d",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 309,
      "trace_address": [
        11,
        1,
        3,
        1,
        40,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251019244830099,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 310,
      "trace_address": [
        11,
        1,
        3,
        1,
        40,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 311,
      "trace_address": [
        11,
        1,
        3,
        1,
        40,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 312,
      "trace_address": [
        11,
        1,
        3,
        1,
        40,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000123bb55bd648",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 313,
      "trace_address": [
        11,
        1,
        3,
        1,
        40,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000123bb55bd648",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 314,
      "trace_address": [
        11,
        1,
        3,
        1,
        41
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f365dc61c15ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 315,
      "trace_address": [
        11,
        1,
        3,
        1,
        41,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 316,
      "trace_address": [
        11,
        1,
        3,
        1,
        41,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 317,
      "trace_address": [
        11,
        1,
        3,
        1,
        41,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000748a6a92492671",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 318,
      "trace_address": [
        11,
        1,
        3,
        1,
        41,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950211079871509,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 319,
      "trace_address": [
        11,
        1,
        3,
        1,
        41,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950211079871509)"
    },
    {
      "trace_index": 320,
      "trace_address": [
        11,
        1,
        3,
        1,
        41,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bbbfc9a0f00f4286",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 321,
      "trace_address": [
        11,
        1,
        3,
        1,
        42
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57afca08d6b9000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 322,
      "trace_address": [
        11,
        1,
        3,
        1,
        42,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251021034957127)"
    },
    {
      "trace_index": 323,
      "trace_address": [
        11,
        1,
        3,
        1,
        42,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000096cb400648",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 324,
      "trace_address": [
        11,
        1,
        3,
        1,
        42,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000096cb400648",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 325,
      "trace_address": [
        11,
        1,
        3,
        1,
        42,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251021034957127,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 326,
      "trace_address": [
        11,
        1,
        3,
        1,
        42,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 327,
      "trace_address": [
        11,
        1,
        3,
        1,
        42,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 328,
      "trace_address": [
        11,
        1,
        3,
        1,
        42,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000123c9cabc823",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 329,
      "trace_address": [
        11,
        1,
        3,
        1,
        42,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000123c9cabc823",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 330,
      "trace_address": [
        11,
        1,
        3,
        1,
        43
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f36c87ebe99ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 331,
      "trace_address": [
        11,
        1,
        3,
        1,
        43,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 332,
      "trace_address": [
        11,
        1,
        3,
        1,
        43,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 333,
      "trace_address": [
        11,
        1,
        3,
        1,
        43,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000007e2150ba18193f",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 334,
      "trace_address": [
        11,
        1,
        3,
        1,
        43,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950212870356633,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 335,
      "trace_address": [
        11,
        1,
        3,
        1,
        43,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950212870356633)"
    },
    {
      "trace_index": 336,
      "trace_address": [
        11,
        1,
        3,
        1,
        43,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bbc960878296d7d8",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 337,
      "trace_address": [
        11,
        1,
        3,
        1,
        44
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57af5f55ab06000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 338,
      "trace_address": [
        11,
        1,
        3,
        1,
        44,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251022825084154)"
    },
    {
      "trace_index": 339,
      "trace_address": [
        11,
        1,
        3,
        1,
        44,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000097b28ff823",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 340,
      "trace_address": [
        11,
        1,
        3,
        1,
        44,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000097b28ff823",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 341,
      "trace_address": [
        11,
        1,
        3,
        1,
        44,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251022825084154,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 342,
      "trace_address": [
        11,
        1,
        3,
        1,
        44,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 343,
      "trace_address": [
        11,
        1,
        3,
        1,
        44,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 344,
      "trace_address": [
        11,
        1,
        3,
        1,
        44,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000123d83fbb9fe",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 345,
      "trace_address": [
        11,
        1,
        3,
        1,
        44,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000123d83fbb9fe",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 346,
      "trace_address": [
        11,
        1,
        3,
        1,
        45
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f373337611fffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 347,
      "trace_address": [
        11,
        1,
        3,
        1,
        45,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 348,
      "trace_address": [
        11,
        1,
        3,
        1,
        45,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 349,
      "trace_address": [
        11,
        1,
        3,
        1,
        45,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000087b836e1ec82de",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 350,
      "trace_address": [
        11,
        1,
        3,
        1,
        45,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950214660841759,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 351,
      "trace_address": [
        11,
        1,
        3,
        1,
        45,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950214660841759)"
    },
    {
      "trace_index": 352,
      "trace_address": [
        11,
        1,
        3,
        1,
        45,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bbd2f76e1523e3fd",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 353,
      "trace_address": [
        11,
        1,
        3,
        1,
        46
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57aef4a215eb000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 354,
      "trace_address": [
        11,
        1,
        3,
        1,
        46,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251024615238165)"
    },
    {
      "trace_index": 355,
      "trace_address": [
        11,
        1,
        3,
        1,
        46,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000009899dfe9fe",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 356,
      "trace_address": [
        11,
        1,
        3,
        1,
        46,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000009899dfe9fe",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 357,
      "trace_address": [
        11,
        1,
        3,
        1,
        46,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251024615238165,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 358,
      "trace_address": [
        11,
        1,
        3,
        1,
        46,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 359,
      "trace_address": [
        11,
        1,
        3,
        1,
        46,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 360,
      "trace_address": [
        11,
        1,
        3,
        1,
        46,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000123e6b4babd9",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 361,
      "trace_address": [
        11,
        1,
        3,
        1,
        46,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000123e6b4babd9",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 362,
      "trace_address": [
        11,
        1,
        3,
        1,
        47
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f379cdeced1ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 363,
      "trace_address": [
        11,
        1,
        3,
        1,
        47,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 364,
      "trace_address": [
        11,
        1,
        3,
        1,
        47,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 365,
      "trace_address": [
        11,
        1,
        3,
        1,
        47,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000914f1d09c5f9e8",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 366,
      "trace_address": [
        11,
        1,
        3,
        1,
        47,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950216433422033,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 367,
      "trace_address": [
        11,
        1,
        3,
        1,
        47,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950216433422033)"
    },
    {
      "trace_index": 368,
      "trace_address": [
        11,
        1,
        3,
        1,
        47,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bbdc8e54a6a4c8b9",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 369,
      "trace_address": [
        11,
        1,
        3,
        1,
        48
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57ae8b00110c000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 370,
      "trace_address": [
        11,
        1,
        3,
        1,
        48,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251026387463924)"
    },
    {
      "trace_index": 371,
      "trace_address": [
        11,
        1,
        3,
        1,
        48,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000099812fdbd9",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 372,
      "trace_address": [
        11,
        1,
        3,
        1,
        48,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000099812fdbd9",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 373,
      "trace_address": [
        11,
        1,
        3,
        1,
        48,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251026387463924,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 374,
      "trace_address": [
        11,
        1,
        3,
        1,
        48,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 375,
      "trace_address": [
        11,
        1,
        3,
        1,
        48,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 376,
      "trace_address": [
        11,
        1,
        3,
        1,
        48,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000123f529b9db4",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 377,
      "trace_address": [
        11,
        1,
        3,
        1,
        48,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000123f529b9db4",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 378,
      "trace_address": [
        11,
        1,
        3,
        1,
        49
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f3806863c84ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 379,
      "trace_address": [
        11,
        1,
        3,
        1,
        49,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 380,
      "trace_address": [
        11,
        1,
        3,
        1,
        49,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 381,
      "trace_address": [
        11,
        1,
        3,
        1,
        49,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000009ae60331a4d9c5",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 382,
      "trace_address": [
        11,
        1,
        3,
        1,
        49,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950218206002308,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 383,
      "trace_address": [
        11,
        1,
        3,
        1,
        49,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950218206002308)"
    },
    {
      "trace_index": 384,
      "trace_address": [
        11,
        1,
        3,
        1,
        49,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bbe6253b382b1649",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 385,
      "trace_address": [
        11,
        1,
        3,
        1,
        50
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57ae215e0c2e000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 386,
      "trace_address": [
        11,
        1,
        3,
        1,
        50,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251028159689682)"
    },
    {
      "trace_index": 387,
      "trace_address": [
        11,
        1,
        3,
        1,
        50,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000009a687fcdb4",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 388,
      "trace_address": [
        11,
        1,
        3,
        1,
        50,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000009a687fcdb4",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 389,
      "trace_address": [
        11,
        1,
        3,
        1,
        50,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251028159689682,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 390,
      "trace_address": [
        11,
        1,
        3,
        1,
        50,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 391,
      "trace_address": [
        11,
        1,
        3,
        1,
        50,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 392,
      "trace_address": [
        11,
        1,
        3,
        1,
        50,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000124039eb8f8f",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 393,
      "trace_address": [
        11,
        1,
        3,
        1,
        50,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000124039eb8f8f",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 394,
      "trace_address": [
        11,
        1,
        3,
        1,
        51
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f38702daa36ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 395,
      "trace_address": [
        11,
        1,
        3,
        1,
        51,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 396,
      "trace_address": [
        11,
        1,
        3,
        1,
        51,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 397,
      "trace_address": [
        11,
        1,
        3,
        1,
        51,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000a47ce959892277",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 398,
      "trace_address": [
        11,
        1,
        3,
        1,
        51,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950219978582582,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 399,
      "trace_address": [
        11,
        1,
        3,
        1,
        51,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950219978582582)"
    },
    {
      "trace_index": 400,
      "trace_address": [
        11,
        1,
        3,
        1,
        51,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bbefbc21c9b6ccad",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 401,
      "trace_address": [
        11,
        1,
        3,
        1,
        52
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57adb7bc074e000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 402,
      "trace_address": [
        11,
        1,
        3,
        1,
        52,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251029931915442)"
    },
    {
      "trace_index": 403,
      "trace_address": [
        11,
        1,
        3,
        1,
        52,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000009b4fcfbf8f",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 404,
      "trace_address": [
        11,
        1,
        3,
        1,
        52,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000009b4fcfbf8f",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 405,
      "trace_address": [
        11,
        1,
        3,
        1,
        52,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251029931915442,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 406,
      "trace_address": [
        11,
        1,
        3,
        1,
        52,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 407,
      "trace_address": [
        11,
        1,
        3,
        1,
        52,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 408,
      "trace_address": [
        11,
        1,
        3,
        1,
        52,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001241213b816a",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 409,
      "trace_address": [
        11,
        1,
        3,
        1,
        52,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001241213b816a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 410,
      "trace_address": [
        11,
        1,
        3,
        1,
        53
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f38d9d517eaffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 411,
      "trace_address": [
        11,
        1,
        3,
        1,
        53,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 412,
      "trace_address": [
        11,
        1,
        3,
        1,
        53,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 413,
      "trace_address": [
        11,
        1,
        3,
        1,
        53,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000ae13cf8172d3fb",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 414,
      "trace_address": [
        11,
        1,
        3,
        1,
        53,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950221751162858,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 415,
      "trace_address": [
        11,
        1,
        3,
        1,
        53,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950221751162858)"
    },
    {
      "trace_index": 416,
      "trace_address": [
        11,
        1,
        3,
        1,
        53,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bbf953085b47ebe5",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 417,
      "trace_address": [
        11,
        1,
        3,
        1,
        54
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57ad4e1a6bd6000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 418,
      "trace_address": [
        11,
        1,
        3,
        1,
        54,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251031704114218)"
    },
    {
      "trace_index": 419,
      "trace_address": [
        11,
        1,
        3,
        1,
        54,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000009c371fb16a",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 420,
      "trace_address": [
        11,
        1,
        3,
        1,
        54,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000009c371fb16a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 421,
      "trace_address": [
        11,
        1,
        3,
        1,
        54,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251031704114218,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 422,
      "trace_address": [
        11,
        1,
        3,
        1,
        54,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 423,
      "trace_address": [
        11,
        1,
        3,
        1,
        54,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 424,
      "trace_address": [
        11,
        1,
        3,
        1,
        54,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001242088b7345",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 425,
      "trace_address": [
        11,
        1,
        3,
        1,
        54,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001242088b7345",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 426,
      "trace_address": [
        11,
        1,
        3,
        1,
        55
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f39448dba72ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 427,
      "trace_address": [
        11,
        1,
        3,
        1,
        55,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 428,
      "trace_address": [
        11,
        1,
        3,
        1,
        55,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 429,
      "trace_address": [
        11,
        1,
        3,
        1,
        55,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000b7aab5a96257bb",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 430,
      "trace_address": [
        11,
        1,
        3,
        1,
        55,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950223541647986,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 431,
      "trace_address": [
        11,
        1,
        3,
        1,
        55,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950223541647986)"
    },
    {
      "trace_index": 432,
      "trace_address": [
        11,
        1,
        3,
        1,
        55,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bc02e9eeedf0122d",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 433,
      "trace_address": [
        11,
        1,
        3,
        1,
        56
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57ace367401f000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 434,
      "trace_address": [
        11,
        1,
        3,
        1,
        56,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251033494241249)"
    },
    {
      "trace_index": 435,
      "trace_address": [
        11,
        1,
        3,
        1,
        56,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000009d1e6fa345",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 436,
      "trace_address": [
        11,
        1,
        3,
        1,
        56,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000009d1e6fa345",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 437,
      "trace_address": [
        11,
        1,
        3,
        1,
        56,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251033494241249,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 438,
      "trace_address": [
        11,
        1,
        3,
        1,
        56,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 439,
      "trace_address": [
        11,
        1,
        3,
        1,
        56,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 440,
      "trace_address": [
        11,
        1,
        3,
        1,
        56,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001242efdb6520",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 441,
      "trace_address": [
        11,
        1,
        3,
        1,
        56,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001242efdb6520",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 442,
      "trace_address": [
        11,
        1,
        3,
        1,
        57
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f39af465cfaffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 443,
      "trace_address": [
        11,
        1,
        3,
        1,
        57,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 444,
      "trace_address": [
        11,
        1,
        3,
        1,
        57,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 445,
      "trace_address": [
        11,
        1,
        3,
        1,
        57,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000c1419bd157524c",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 446,
      "trace_address": [
        11,
        1,
        3,
        1,
        57,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950225332133114,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 447,
      "trace_address": [
        11,
        1,
        3,
        1,
        57,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950225332133114)"
    },
    {
      "trace_index": 448,
      "trace_address": [
        11,
        1,
        3,
        1,
        57,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bc0c80d5809daf46",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 449,
      "trace_address": [
        11,
        1,
        3,
        1,
        58
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57ac78b41469000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 450,
      "trace_address": [
        11,
        1,
        3,
        1,
        58,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251035284368279)"
    },
    {
      "trace_index": 451,
      "trace_address": [
        11,
        1,
        3,
        1,
        58,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000009e05bf9520",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 452,
      "trace_address": [
        11,
        1,
        3,
        1,
        58,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000009e05bf9520",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 453,
      "trace_address": [
        11,
        1,
        3,
        1,
        58,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251035284368279,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 454,
      "trace_address": [
        11,
        1,
        3,
        1,
        58,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 455,
      "trace_address": [
        11,
        1,
        3,
        1,
        58,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 456,
      "trace_address": [
        11,
        1,
        3,
        1,
        58,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001243d72b56fb",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 457,
      "trace_address": [
        11,
        1,
        3,
        1,
        58,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001243d72b56fb",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 458,
      "trace_address": [
        11,
        1,
        3,
        1,
        59
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f3a19feff83ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 459,
      "trace_address": [
        11,
        1,
        3,
        1,
        59,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 460,
      "trace_address": [
        11,
        1,
        3,
        1,
        59,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 461,
      "trace_address": [
        11,
        1,
        3,
        1,
        59,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000cad881f951c3af",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 462,
      "trace_address": [
        11,
        1,
        3,
        1,
        59,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950227122618243,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 463,
      "trace_address": [
        11,
        1,
        3,
        1,
        59,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950227122618243)"
    },
    {
      "trace_index": 464,
      "trace_address": [
        11,
        1,
        3,
        1,
        59,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bc1617bc1350c332",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 465,
      "trace_address": [
        11,
        1,
        3,
        1,
        60
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57ac0e00e8b1000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 466,
      "trace_address": [
        11,
        1,
        3,
        1,
        60,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251037074495311)"
    },
    {
      "trace_index": 467,
      "trace_address": [
        11,
        1,
        3,
        1,
        60,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000009eed0f86fb",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 468,
      "trace_address": [
        11,
        1,
        3,
        1,
        60,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000009eed0f86fb",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 469,
      "trace_address": [
        11,
        1,
        3,
        1,
        60,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251037074495311,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 470,
      "trace_address": [
        11,
        1,
        3,
        1,
        60,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 471,
      "trace_address": [
        11,
        1,
        3,
        1,
        60,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 472,
      "trace_address": [
        11,
        1,
        3,
        1,
        60,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001244be7b48d6",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 473,
      "trace_address": [
        11,
        1,
        3,
        1,
        60,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001244be7b48d6",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 474,
      "trace_address": [
        11,
        1,
        3,
        1,
        61
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f3a84b7a20bffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 475,
      "trace_address": [
        11,
        1,
        3,
        1,
        61,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 476,
      "trace_address": [
        11,
        1,
        3,
        1,
        61,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 477,
      "trace_address": [
        11,
        1,
        3,
        1,
        61,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000d46f682151abe3",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 478,
      "trace_address": [
        11,
        1,
        3,
        1,
        61,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950228913103371,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 479,
      "trace_address": [
        11,
        1,
        3,
        1,
        61,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950228913103371)"
    },
    {
      "trace_index": 480,
      "trace_address": [
        11,
        1,
        3,
        1,
        61,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bc1faea2a6094dee",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 481,
      "trace_address": [
        11,
        1,
        3,
        1,
        62
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57aba34dbcfa000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 482,
      "trace_address": [
        11,
        1,
        3,
        1,
        62,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251038864622342)"
    },
    {
      "trace_index": 483,
      "trace_address": [
        11,
        1,
        3,
        1,
        62,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000009fd45f78d6",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 484,
      "trace_address": [
        11,
        1,
        3,
        1,
        62,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000009fd45f78d6",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 485,
      "trace_address": [
        11,
        1,
        3,
        1,
        62,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251038864622342,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 486,
      "trace_address": [
        11,
        1,
        3,
        1,
        62,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 487,
      "trace_address": [
        11,
        1,
        3,
        1,
        62,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 488,
      "trace_address": [
        11,
        1,
        3,
        1,
        62,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001245a5cb3ab1",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 489,
      "trace_address": [
        11,
        1,
        3,
        1,
        62,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001245a5cb3ab1",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 490,
      "trace_address": [
        11,
        1,
        3,
        1,
        63
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f3aef704494ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 491,
      "trace_address": [
        11,
        1,
        3,
        1,
        63,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 492,
      "trace_address": [
        11,
        1,
        3,
        1,
        63,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 493,
      "trace_address": [
        11,
        1,
        3,
        1,
        63,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000de064e49570ae8",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 494,
      "trace_address": [
        11,
        1,
        3,
        1,
        63,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950230703588500,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 495,
      "trace_address": [
        11,
        1,
        3,
        1,
        63,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950230703588500)"
    },
    {
      "trace_index": 496,
      "trace_address": [
        11,
        1,
        3,
        1,
        63,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bc29458938c74f7c",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 497,
      "trace_address": [
        11,
        1,
        3,
        1,
        64
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57ab389a9141000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 498,
      "trace_address": [
        11,
        1,
        3,
        1,
        64,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251040654749375)"
    },
    {
      "trace_index": 499,
      "trace_address": [
        11,
        1,
        3,
        1,
        64,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a0bbaf6ab1",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 500,
      "trace_address": [
        11,
        1,
        3,
        1,
        64,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a0bbaf6ab1",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 501,
      "trace_address": [
        11,
        1,
        3,
        1,
        64,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251040654749375,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 502,
      "trace_address": [
        11,
        1,
        3,
        1,
        64,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 503,
      "trace_address": [
        11,
        1,
        3,
        1,
        64,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 504,
      "trace_address": [
        11,
        1,
        3,
        1,
        64,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012468d1b2c8c",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 505,
      "trace_address": [
        11,
        1,
        3,
        1,
        64,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012468d1b2c8c",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 506,
      "trace_address": [
        11,
        1,
        3,
        1,
        65
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f3b5a28e71effffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 507,
      "trace_address": [
        11,
        1,
        3,
        1,
        65,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 508,
      "trace_address": [
        11,
        1,
        3,
        1,
        65,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 509,
      "trace_address": [
        11,
        1,
        3,
        1,
        65,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000e79d347161e0bd",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 510,
      "trace_address": [
        11,
        1,
        3,
        1,
        65,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950232494073630,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 511,
      "trace_address": [
        11,
        1,
        3,
        1,
        65,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950232494073630)"
    },
    {
      "trace_index": 512,
      "trace_address": [
        11,
        1,
        3,
        1,
        65,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bc32dc6fcb8ac7db",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 513,
      "trace_address": [
        11,
        1,
        3,
        1,
        66
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57aacde76589000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 514,
      "trace_address": [
        11,
        1,
        3,
        1,
        66,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251042444876407)"
    },
    {
      "trace_index": 515,
      "trace_address": [
        11,
        1,
        3,
        1,
        66,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a1a2ff5c8c",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 516,
      "trace_address": [
        11,
        1,
        3,
        1,
        66,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a1a2ff5c8c",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 517,
      "trace_address": [
        11,
        1,
        3,
        1,
        66,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251042444876407,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 518,
      "trace_address": [
        11,
        1,
        3,
        1,
        66,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 519,
      "trace_address": [
        11,
        1,
        3,
        1,
        66,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 520,
      "trace_address": [
        11,
        1,
        3,
        1,
        66,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001247746b1e67",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 521,
      "trace_address": [
        11,
        1,
        3,
        1,
        66,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001247746b1e67",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 522,
      "trace_address": [
        11,
        1,
        3,
        1,
        67
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f3bc4e189a8ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 523,
      "trace_address": [
        11,
        1,
        3,
        1,
        67,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 524,
      "trace_address": [
        11,
        1,
        3,
        1,
        67,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 525,
      "trace_address": [
        11,
        1,
        3,
        1,
        67,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000f1341a99722d64",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 526,
      "trace_address": [
        11,
        1,
        3,
        1,
        67,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950234284558760,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 527,
      "trace_address": [
        11,
        1,
        3,
        1,
        67,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950234284558760)"
    },
    {
      "trace_index": 528,
      "trace_address": [
        11,
        1,
        3,
        1,
        67,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bc3c73565e53b70c",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 529,
      "trace_address": [
        11,
        1,
        3,
        1,
        68
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57aa633439cf000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 530,
      "trace_address": [
        11,
        1,
        3,
        1,
        68,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251044235003441)"
    },
    {
      "trace_index": 531,
      "trace_address": [
        11,
        1,
        3,
        1,
        68,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a28a4f4e67",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 532,
      "trace_address": [
        11,
        1,
        3,
        1,
        68,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a28a4f4e67",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 533,
      "trace_address": [
        11,
        1,
        3,
        1,
        68,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251044235003441,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 534,
      "trace_address": [
        11,
        1,
        3,
        1,
        68,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 535,
      "trace_address": [
        11,
        1,
        3,
        1,
        68,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 536,
      "trace_address": [
        11,
        1,
        3,
        1,
        68,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012485bbb1042",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 537,
      "trace_address": [
        11,
        1,
        3,
        1,
        68,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012485bbb1042",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 538,
      "trace_address": [
        11,
        1,
        3,
        1,
        69
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f3c2f9a2c33ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 539,
      "trace_address": [
        11,
        1,
        3,
        1,
        69,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 540,
      "trace_address": [
        11,
        1,
        3,
        1,
        69,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 541,
      "trace_address": [
        11,
        1,
        3,
        1,
        69,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000facb00c187f0db",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 542,
      "trace_address": [
        11,
        1,
        3,
        1,
        69,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950236075043891,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 543,
      "trace_address": [
        11,
        1,
        3,
        1,
        69,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950236075043891)"
    },
    {
      "trace_index": 544,
      "trace_address": [
        11,
        1,
        3,
        1,
        69,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bc460a3cf1221d0e",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 545,
      "trace_address": [
        11,
        1,
        3,
        1,
        70
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a9f8810e16000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 546,
      "trace_address": [
        11,
        1,
        3,
        1,
        70,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251046025130474)"
    },
    {
      "trace_index": 547,
      "trace_address": [
        11,
        1,
        3,
        1,
        70,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a3719f4042",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 548,
      "trace_address": [
        11,
        1,
        3,
        1,
        70,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a3719f4042",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 549,
      "trace_address": [
        11,
        1,
        3,
        1,
        70,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251046025130474,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 550,
      "trace_address": [
        11,
        1,
        3,
        1,
        70,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 551,
      "trace_address": [
        11,
        1,
        3,
        1,
        70,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 552,
      "trace_address": [
        11,
        1,
        3,
        1,
        70,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001249430b021d",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 553,
      "trace_address": [
        11,
        1,
        3,
        1,
        70,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001249430b021d",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 554,
      "trace_address": [
        11,
        1,
        3,
        1,
        71
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f3c9a52cebeffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 555,
      "trace_address": [
        11,
        1,
        3,
        1,
        71,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 556,
      "trace_address": [
        11,
        1,
        3,
        1,
        71,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 557,
      "trace_address": [
        11,
        1,
        3,
        1,
        71,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000010461e6e9a32b24",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 558,
      "trace_address": [
        11,
        1,
        3,
        1,
        71,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950237865529022,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 559,
      "trace_address": [
        11,
        1,
        3,
        1,
        71,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950237865529022)"
    },
    {
      "trace_index": 560,
      "trace_address": [
        11,
        1,
        3,
        1,
        71,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bc4fa12383f5f9e2",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 561,
      "trace_address": [
        11,
        1,
        3,
        1,
        72
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a98dcde25c000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 562,
      "trace_address": [
        11,
        1,
        3,
        1,
        72,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251047815257508)"
    },
    {
      "trace_index": 563,
      "trace_address": [
        11,
        1,
        3,
        1,
        72,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a458ef321d",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 564,
      "trace_address": [
        11,
        1,
        3,
        1,
        72,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a458ef321d",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 565,
      "trace_address": [
        11,
        1,
        3,
        1,
        72,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251047815257508,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 566,
      "trace_address": [
        11,
        1,
        3,
        1,
        72,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 567,
      "trace_address": [
        11,
        1,
        3,
        1,
        72,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 568,
      "trace_address": [
        11,
        1,
        3,
        1,
        72,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000124a2a5af3f8",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 569,
      "trace_address": [
        11,
        1,
        3,
        1,
        72,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000124a2a5af3f8",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 570,
      "trace_address": [
        11,
        1,
        3,
        1,
        73
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f3d050b7149ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 571,
      "trace_address": [
        11,
        1,
        3,
        1,
        73,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 572,
      "trace_address": [
        11,
        1,
        3,
        1,
        73,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 573,
      "trace_address": [
        11,
        1,
        3,
        1,
        73,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000010df8cd11c3dc3e",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 574,
      "trace_address": [
        11,
        1,
        3,
        1,
        73,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950239656014153,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 575,
      "trace_address": [
        11,
        1,
        3,
        1,
        73,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950239656014153)"
    },
    {
      "trace_index": 576,
      "trace_address": [
        11,
        1,
        3,
        1,
        73,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bc59380a16cf4d87",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 577,
      "trace_address": [
        11,
        1,
        3,
        1,
        74
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a9231ab6a1000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 578,
      "trace_address": [
        11,
        1,
        3,
        1,
        74,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251049605384543)"
    },
    {
      "trace_index": 579,
      "trace_address": [
        11,
        1,
        3,
        1,
        74,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a5403f23f8",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 580,
      "trace_address": [
        11,
        1,
        3,
        1,
        74,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a5403f23f8",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 581,
      "trace_address": [
        11,
        1,
        3,
        1,
        74,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251049605384543,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 582,
      "trace_address": [
        11,
        1,
        3,
        1,
        74,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 583,
      "trace_address": [
        11,
        1,
        3,
        1,
        74,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 584,
      "trace_address": [
        11,
        1,
        3,
        1,
        74,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000124b11aae5d3",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 585,
      "trace_address": [
        11,
        1,
        3,
        1,
        74,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000124b11aae5d3",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 586,
      "trace_address": [
        11,
        1,
        3,
        1,
        75
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f3d6fc413d5ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 587,
      "trace_address": [
        11,
        1,
        3,
        1,
        75,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 588,
      "trace_address": [
        11,
        1,
        3,
        1,
        75,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 589,
      "trace_address": [
        11,
        1,
        3,
        1,
        75,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000001178fb339ea0428",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 590,
      "trace_address": [
        11,
        1,
        3,
        1,
        75,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950241446499285,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 591,
      "trace_address": [
        11,
        1,
        3,
        1,
        75,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950241446499285)"
    },
    {
      "trace_index": 592,
      "trace_address": [
        11,
        1,
        3,
        1,
        75,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bc62cef0a9ae17fd",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 593,
      "trace_address": [
        11,
        1,
        3,
        1,
        76
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a8b8678ae6000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 594,
      "trace_address": [
        11,
        1,
        3,
        1,
        76,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251051395511578)"
    },
    {
      "trace_index": 595,
      "trace_address": [
        11,
        1,
        3,
        1,
        76,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a6278f15d3",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 596,
      "trace_address": [
        11,
        1,
        3,
        1,
        76,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a6278f15d3",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 597,
      "trace_address": [
        11,
        1,
        3,
        1,
        76,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251051395511578,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 598,
      "trace_address": [
        11,
        1,
        3,
        1,
        76,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 599,
      "trace_address": [
        11,
        1,
        3,
        1,
        76,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 600,
      "trace_address": [
        11,
        1,
        3,
        1,
        76,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000124bf8fad7ae",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 601,
      "trace_address": [
        11,
        1,
        3,
        1,
        76,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000124bf8fad7ae",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 602,
      "trace_address": [
        11,
        1,
        3,
        1,
        77
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f3dda7cb662ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 603,
      "trace_address": [
        11,
        1,
        3,
        1,
        77,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 604,
      "trace_address": [
        11,
        1,
        3,
        1,
        77,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 605,
      "trace_address": [
        11,
        1,
        3,
        1,
        77,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000012126996215a2e3",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 606,
      "trace_address": [
        11,
        1,
        3,
        1,
        77,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950243236984418,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 607,
      "trace_address": [
        11,
        1,
        3,
        1,
        77,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950243236984418)"
    },
    {
      "trace_index": 608,
      "trace_address": [
        11,
        1,
        3,
        1,
        77,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bc6c65d73c925945",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 609,
      "trace_address": [
        11,
        1,
        3,
        1,
        78
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a84db45f2a000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 610,
      "trace_address": [
        11,
        1,
        3,
        1,
        78,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251053185638614)"
    },
    {
      "trace_index": 611,
      "trace_address": [
        11,
        1,
        3,
        1,
        78,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a70edf07ae",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 612,
      "trace_address": [
        11,
        1,
        3,
        1,
        78,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a70edf07ae",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 613,
      "trace_address": [
        11,
        1,
        3,
        1,
        78,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251053185638614,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 614,
      "trace_address": [
        11,
        1,
        3,
        1,
        78,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 615,
      "trace_address": [
        11,
        1,
        3,
        1,
        78,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 616,
      "trace_address": [
        11,
        1,
        3,
        1,
        78,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000124ce04ac989",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 617,
      "trace_address": [
        11,
        1,
        3,
        1,
        78,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000124ce04ac989",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 618,
      "trace_address": [
        11,
        1,
        3,
        1,
        79
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f3e453558f0ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 619,
      "trace_address": [
        11,
        1,
        3,
        1,
        79,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 620,
      "trace_address": [
        11,
        1,
        3,
        1,
        79,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 621,
      "trace_address": [
        11,
        1,
        3,
        1,
        79,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000012abd7f8a46b86f",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 622,
      "trace_address": [
        11,
        1,
        3,
        1,
        79,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950245027469552,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 623,
      "trace_address": [
        11,
        1,
        3,
        1,
        79,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950245027469552)"
    },
    {
      "trace_index": 624,
      "trace_address": [
        11,
        1,
        3,
        1,
        79,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bc75fcbdcf7c115f",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 625,
      "trace_address": [
        11,
        1,
        3,
        1,
        80
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a7e301336f000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 626,
      "trace_address": [
        11,
        1,
        3,
        1,
        80,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251054975765649)"
    },
    {
      "trace_index": 627,
      "trace_address": [
        11,
        1,
        3,
        1,
        80,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a7f62ef989",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 628,
      "trace_address": [
        11,
        1,
        3,
        1,
        80,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a7f62ef989",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 629,
      "trace_address": [
        11,
        1,
        3,
        1,
        80,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251054975765649,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 630,
      "trace_address": [
        11,
        1,
        3,
        1,
        80,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 631,
      "trace_address": [
        11,
        1,
        3,
        1,
        80,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 632,
      "trace_address": [
        11,
        1,
        3,
        1,
        80,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000124dc79abb64",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 633,
      "trace_address": [
        11,
        1,
        3,
        1,
        80,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000124dc79abb64",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 634,
      "trace_address": [
        11,
        1,
        3,
        1,
        81
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f3eafedfb7bffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 635,
      "trace_address": [
        11,
        1,
        3,
        1,
        81,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 636,
      "trace_address": [
        11,
        1,
        3,
        1,
        81,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 637,
      "trace_address": [
        11,
        1,
        3,
        1,
        81,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000001345465b27d44ce",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 638,
      "trace_address": [
        11,
        1,
        3,
        1,
        81,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950246817954683,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 639,
      "trace_address": [
        11,
        1,
        3,
        1,
        81,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950246817954683)"
    },
    {
      "trace_index": 640,
      "trace_address": [
        11,
        1,
        3,
        1,
        81,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bc7f93a4626b4049",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 641,
      "trace_address": [
        11,
        1,
        3,
        1,
        82
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a7784e07b2000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 642,
      "trace_address": [
        11,
        1,
        3,
        1,
        82,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251056765892686)"
    },
    {
      "trace_index": 643,
      "trace_address": [
        11,
        1,
        3,
        1,
        82,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a8dd7eeb64",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 644,
      "trace_address": [
        11,
        1,
        3,
        1,
        82,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a8dd7eeb64",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 645,
      "trace_address": [
        11,
        1,
        3,
        1,
        82,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251056765892686,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 646,
      "trace_address": [
        11,
        1,
        3,
        1,
        82,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 647,
      "trace_address": [
        11,
        1,
        3,
        1,
        82,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 648,
      "trace_address": [
        11,
        1,
        3,
        1,
        82,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000124eaeeaad3f",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 649,
      "trace_address": [
        11,
        1,
        3,
        1,
        82,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000124eaeeaad3f",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 650,
      "trace_address": [
        11,
        1,
        3,
        1,
        83
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f3f1aa69e0affffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 651,
      "trace_address": [
        11,
        1,
        3,
        1,
        83,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 652,
      "trace_address": [
        11,
        1,
        3,
        1,
        83,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 653,
      "trace_address": [
        11,
        1,
        3,
        1,
        83,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000013deb4bdab947fb",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 654,
      "trace_address": [
        11,
        1,
        3,
        1,
        83,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950248608439818,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 655,
      "trace_address": [
        11,
        1,
        3,
        1,
        83,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950248608439818)"
    },
    {
      "trace_index": 656,
      "trace_address": [
        11,
        1,
        3,
        1,
        83,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bc892a8af55fe605",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 657,
      "trace_address": [
        11,
        1,
        3,
        1,
        84
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a70d9adbf6000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 658,
      "trace_address": [
        11,
        1,
        3,
        1,
        84,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251058556019722)"
    },
    {
      "trace_index": 659,
      "trace_address": [
        11,
        1,
        3,
        1,
        84,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a9c4cedd3f",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 660,
      "trace_address": [
        11,
        1,
        3,
        1,
        84,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000a9c4cedd3f",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 661,
      "trace_address": [
        11,
        1,
        3,
        1,
        84,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251058556019722,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 662,
      "trace_address": [
        11,
        1,
        3,
        1,
        84,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 663,
      "trace_address": [
        11,
        1,
        3,
        1,
        84,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 664,
      "trace_address": [
        11,
        1,
        3,
        1,
        84,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000124f963a9f1a",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 665,
      "trace_address": [
        11,
        1,
        3,
        1,
        84,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000124f963a9f1a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 666,
      "trace_address": [
        11,
        1,
        3,
        1,
        85
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f3f855f4098ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 667,
      "trace_address": [
        11,
        1,
        3,
        1,
        85,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 668,
      "trace_address": [
        11,
        1,
        3,
        1,
        85,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 669,
      "trace_address": [
        11,
        1,
        3,
        1,
        85,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000147823202fac1fb",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 670,
      "trace_address": [
        11,
        1,
        3,
        1,
        85,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950250398924952,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 671,
      "trace_address": [
        11,
        1,
        3,
        1,
        85,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950250398924952)"
    },
    {
      "trace_index": 672,
      "trace_address": [
        11,
        1,
        3,
        1,
        85,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bc92c171885a0293",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 673,
      "trace_address": [
        11,
        1,
        3,
        1,
        86
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a6a2e7b038000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 674,
      "trace_address": [
        11,
        1,
        3,
        1,
        86,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251060346146760)"
    },
    {
      "trace_index": 675,
      "trace_address": [
        11,
        1,
        3,
        1,
        86,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000aaac1ecf1a",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 676,
      "trace_address": [
        11,
        1,
        3,
        1,
        86,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000aaac1ecf1a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 677,
      "trace_address": [
        11,
        1,
        3,
        1,
        86,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251060346146760,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 678,
      "trace_address": [
        11,
        1,
        3,
        1,
        86,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 679,
      "trace_address": [
        11,
        1,
        3,
        1,
        86,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 680,
      "trace_address": [
        11,
        1,
        3,
        1,
        86,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012507d8a90f5",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 681,
      "trace_address": [
        11,
        1,
        3,
        1,
        86,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012507d8a90f5",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 682,
      "trace_address": [
        11,
        1,
        3,
        1,
        87
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f3ff017e328ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 683,
      "trace_address": [
        11,
        1,
        3,
        1,
        87,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 684,
      "trace_address": [
        11,
        1,
        3,
        1,
        87,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 685,
      "trace_address": [
        11,
        1,
        3,
        1,
        87,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000015119182b41b2cb",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 686,
      "trace_address": [
        11,
        1,
        3,
        1,
        87,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950252189410088,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 687,
      "trace_address": [
        11,
        1,
        3,
        1,
        87,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950252189410088)"
    },
    {
      "trace_index": 688,
      "trace_address": [
        11,
        1,
        3,
        1,
        87,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bc9c58581b5995f3",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 689,
      "trace_address": [
        11,
        1,
        3,
        1,
        88
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a63834847b000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 690,
      "trace_address": [
        11,
        1,
        3,
        1,
        88,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251062136273797)"
    },
    {
      "trace_index": 691,
      "trace_address": [
        11,
        1,
        3,
        1,
        88,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000ab936ec0f5",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 692,
      "trace_address": [
        11,
        1,
        3,
        1,
        88,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000ab936ec0f5",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 693,
      "trace_address": [
        11,
        1,
        3,
        1,
        88,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251062136273797,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 694,
      "trace_address": [
        11,
        1,
        3,
        1,
        88,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 695,
      "trace_address": [
        11,
        1,
        3,
        1,
        88,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 696,
      "trace_address": [
        11,
        1,
        3,
        1,
        88,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000125164da82d0",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 697,
      "trace_address": [
        11,
        1,
        3,
        1,
        88,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000125164da82d0",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 698,
      "trace_address": [
        11,
        1,
        3,
        1,
        89
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f405ad085b6ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 699,
      "trace_address": [
        11,
        1,
        3,
        1,
        89,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 700,
      "trace_address": [
        11,
        1,
        3,
        1,
        89,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 701,
      "trace_address": [
        11,
        1,
        3,
        1,
        89,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000015aaffe538e1a6e",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 702,
      "trace_address": [
        11,
        1,
        3,
        1,
        89,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950253979895222,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 703,
      "trace_address": [
        11,
        1,
        3,
        1,
        89,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950253979895222)"
    },
    {
      "trace_index": 704,
      "trace_address": [
        11,
        1,
        3,
        1,
        89,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bca5ef3eae5ea024",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 705,
      "trace_address": [
        11,
        1,
        3,
        1,
        90
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a5cd8158bc000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 706,
      "trace_address": [
        11,
        1,
        3,
        1,
        90,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251063926400836)"
    },
    {
      "trace_index": 707,
      "trace_address": [
        11,
        1,
        3,
        1,
        90,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000ac7abeb2d0",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 708,
      "trace_address": [
        11,
        1,
        3,
        1,
        90,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000ac7abeb2d0",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 709,
      "trace_address": [
        11,
        1,
        3,
        1,
        90,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251063926400836,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 710,
      "trace_address": [
        11,
        1,
        3,
        1,
        90,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 711,
      "trace_address": [
        11,
        1,
        3,
        1,
        90,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 712,
      "trace_address": [
        11,
        1,
        3,
        1,
        90,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012524c2a74ab",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 713,
      "trace_address": [
        11,
        1,
        3,
        1,
        90,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012524c2a74ab",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 714,
      "trace_address": [
        11,
        1,
        3,
        1,
        91
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f40c5892846ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 715,
      "trace_address": [
        11,
        1,
        3,
        1,
        91,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 716,
      "trace_address": [
        11,
        1,
        3,
        1,
        91,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 717,
      "trace_address": [
        11,
        1,
        3,
        1,
        91,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000016446e47bdff8e0",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 718,
      "trace_address": [
        11,
        1,
        3,
        1,
        91,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950255770380358,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 719,
      "trace_address": [
        11,
        1,
        3,
        1,
        91,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950255770380358)"
    },
    {
      "trace_index": 720,
      "trace_address": [
        11,
        1,
        3,
        1,
        91,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bcaf862541692126",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 721,
      "trace_address": [
        11,
        1,
        3,
        1,
        92
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a562ce2cfe000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 722,
      "trace_address": [
        11,
        1,
        3,
        1,
        92,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251065716527874)"
    },
    {
      "trace_index": 723,
      "trace_address": [
        11,
        1,
        3,
        1,
        92,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000ad620ea4ab",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 724,
      "trace_address": [
        11,
        1,
        3,
        1,
        92,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000ad620ea4ab",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 725,
      "trace_address": [
        11,
        1,
        3,
        1,
        92,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251065716527874,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 726,
      "trace_address": [
        11,
        1,
        3,
        1,
        92,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 727,
      "trace_address": [
        11,
        1,
        3,
        1,
        92,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 728,
      "trace_address": [
        11,
        1,
        3,
        1,
        92,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001253337a6686",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 729,
      "trace_address": [
        11,
        1,
        3,
        1,
        92,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001253337a6686",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 730,
      "trace_address": [
        11,
        1,
        3,
        1,
        93
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f413041cad5ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 731,
      "trace_address": [
        11,
        1,
        3,
        1,
        93,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 732,
      "trace_address": [
        11,
        1,
        3,
        1,
        93,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 733,
      "trace_address": [
        11,
        1,
        3,
        1,
        93,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000016dddcaa4374e24",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 734,
      "trace_address": [
        11,
        1,
        3,
        1,
        93,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950257560865493,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 735,
      "trace_address": [
        11,
        1,
        3,
        1,
        93,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950257560865493)"
    },
    {
      "trace_index": 736,
      "trace_address": [
        11,
        1,
        3,
        1,
        93,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bcb91d0bd47918f9",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 737,
      "trace_address": [
        11,
        1,
        3,
        1,
        94
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a4f81b013e000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 738,
      "trace_address": [
        11,
        1,
        3,
        1,
        94,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251067506654914)"
    },
    {
      "trace_index": 739,
      "trace_address": [
        11,
        1,
        3,
        1,
        94,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000ae495e9686",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 740,
      "trace_address": [
        11,
        1,
        3,
        1,
        94,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000ae495e9686",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 741,
      "trace_address": [
        11,
        1,
        3,
        1,
        94,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251067506654914,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 742,
      "trace_address": [
        11,
        1,
        3,
        1,
        94,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 743,
      "trace_address": [
        11,
        1,
        3,
        1,
        94,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 744,
      "trace_address": [
        11,
        1,
        3,
        1,
        94,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012541aca5861",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 745,
      "trace_address": [
        11,
        1,
        3,
        1,
        94,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012541aca5861",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 746,
      "trace_address": [
        11,
        1,
        3,
        1,
        95
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f419afa6d67ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 747,
      "trace_address": [
        11,
        1,
        3,
        1,
        95,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 748,
      "trace_address": [
        11,
        1,
        3,
        1,
        95,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 749,
      "trace_address": [
        11,
        1,
        3,
        1,
        95,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000017774b0cc941a37",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 750,
      "trace_address": [
        11,
        1,
        3,
        1,
        95,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950259351350631,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 751,
      "trace_address": [
        11,
        1,
        3,
        1,
        95,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950259351350631)"
    },
    {
      "trace_index": 752,
      "trace_address": [
        11,
        1,
        3,
        1,
        95,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bcc2b3f2678e879e",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 753,
      "trace_address": [
        11,
        1,
        3,
        1,
        96
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a48d67d57f000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 754,
      "trace_address": [
        11,
        1,
        3,
        1,
        96,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251069296781953)"
    },
    {
      "trace_index": 755,
      "trace_address": [
        11,
        1,
        3,
        1,
        96,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000af30ae8861",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 756,
      "trace_address": [
        11,
        1,
        3,
        1,
        96,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000af30ae8861",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 757,
      "trace_address": [
        11,
        1,
        3,
        1,
        96,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251069296781953,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 758,
      "trace_address": [
        11,
        1,
        3,
        1,
        96,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 759,
      "trace_address": [
        11,
        1,
        3,
        1,
        96,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 760,
      "trace_address": [
        11,
        1,
        3,
        1,
        96,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001255021a4a3c",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 761,
      "trace_address": [
        11,
        1,
        3,
        1,
        96,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001255021a4a3c",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 762,
      "trace_address": [
        11,
        1,
        3,
        1,
        97
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f4205b30ff9ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 763,
      "trace_address": [
        11,
        1,
        3,
        1,
        97,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 764,
      "trace_address": [
        11,
        1,
        3,
        1,
        97,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 765,
      "trace_address": [
        11,
        1,
        3,
        1,
        97,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000001810b96f4f65d1d",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 766,
      "trace_address": [
        11,
        1,
        3,
        1,
        97,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950261141835769,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 767,
      "trace_address": [
        11,
        1,
        3,
        1,
        97,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950261141835769)"
    },
    {
      "trace_index": 768,
      "trace_address": [
        11,
        1,
        3,
        1,
        97,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bccc4ad8faa96d16",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 769,
      "trace_address": [
        11,
        1,
        3,
        1,
        98
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a422b4a9bf000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 770,
      "trace_address": [
        11,
        1,
        3,
        1,
        98,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251071086908993)"
    },
    {
      "trace_index": 771,
      "trace_address": [
        11,
        1,
        3,
        1,
        98,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b017fe7a3c",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 772,
      "trace_address": [
        11,
        1,
        3,
        1,
        98,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b017fe7a3c",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 773,
      "trace_address": [
        11,
        1,
        3,
        1,
        98,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251071086908993,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 774,
      "trace_address": [
        11,
        1,
        3,
        1,
        98,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 775,
      "trace_address": [
        11,
        1,
        3,
        1,
        98,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 776,
      "trace_address": [
        11,
        1,
        3,
        1,
        98,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001255e96a3c17",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 777,
      "trace_address": [
        11,
        1,
        3,
        1,
        98,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001255e96a3c17",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 778,
      "trace_address": [
        11,
        1,
        3,
        1,
        99
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f42706bb28affffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 779,
      "trace_address": [
        11,
        1,
        3,
        1,
        99,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 780,
      "trace_address": [
        11,
        1,
        3,
        1,
        99,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 781,
      "trace_address": [
        11,
        1,
        3,
        1,
        99,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000018aa27d1d5e16d5",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 782,
      "trace_address": [
        11,
        1,
        3,
        1,
        99,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950262932320906,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 783,
      "trace_address": [
        11,
        1,
        3,
        1,
        99,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950262932320906)"
    },
    {
      "trace_index": 784,
      "trace_address": [
        11,
        1,
        3,
        1,
        99,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bcd5e1bf8dc9c95f",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 785,
      "trace_address": [
        11,
        1,
        3,
        1,
        100
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a3b8017dff000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 786,
      "trace_address": [
        11,
        1,
        3,
        1,
        100,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251072877036033)"
    },
    {
      "trace_index": 787,
      "trace_address": [
        11,
        1,
        3,
        1,
        100,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b0ff4e6c17",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 788,
      "trace_address": [
        11,
        1,
        3,
        1,
        100,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b0ff4e6c17",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 789,
      "trace_address": [
        11,
        1,
        3,
        1,
        100,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251072877036033,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 790,
      "trace_address": [
        11,
        1,
        3,
        1,
        100,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 791,
      "trace_address": [
        11,
        1,
        3,
        1,
        100,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 792,
      "trace_address": [
        11,
        1,
        3,
        1,
        100,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001256d0ba2df2",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 793,
      "trace_address": [
        11,
        1,
        3,
        1,
        100,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001256d0ba2df2",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 794,
      "trace_address": [
        11,
        1,
        3,
        1,
        101
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f42db24551bffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 795,
      "trace_address": [
        11,
        1,
        3,
        1,
        101,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 796,
      "trace_address": [
        11,
        1,
        3,
        1,
        101,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 797,
      "trace_address": [
        11,
        1,
        3,
        1,
        101,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000194396345cb475e",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 798,
      "trace_address": [
        11,
        1,
        3,
        1,
        101,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950264722806043,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 799,
      "trace_address": [
        11,
        1,
        3,
        1,
        101,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950264722806043)"
    },
    {
      "trace_index": 800,
      "trace_address": [
        11,
        1,
        3,
        1,
        101,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bcdf78a620ef9c79",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 801,
      "trace_address": [
        11,
        1,
        3,
        1,
        102
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a34d4e523e000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 802,
      "trace_address": [
        11,
        1,
        3,
        1,
        102,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251074667163074)"
    },
    {
      "trace_index": 803,
      "trace_address": [
        11,
        1,
        3,
        1,
        102,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b1e69e5df2",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 804,
      "trace_address": [
        11,
        1,
        3,
        1,
        102,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b1e69e5df2",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 805,
      "trace_address": [
        11,
        1,
        3,
        1,
        102,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251074667163074,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 806,
      "trace_address": [
        11,
        1,
        3,
        1,
        102,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 807,
      "trace_address": [
        11,
        1,
        3,
        1,
        102,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 808,
      "trace_address": [
        11,
        1,
        3,
        1,
        102,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001257b80a1fcd",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 809,
      "trace_address": [
        11,
        1,
        3,
        1,
        102,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001257b80a1fcd",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 810,
      "trace_address": [
        11,
        1,
        3,
        1,
        103
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f4345dcf7aeffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 811,
      "trace_address": [
        11,
        1,
        3,
        1,
        103,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 812,
      "trace_address": [
        11,
        1,
        3,
        1,
        103,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 813,
      "trace_address": [
        11,
        1,
        3,
        1,
        103,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000019dd0496e3deeb7",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 814,
      "trace_address": [
        11,
        1,
        3,
        1,
        103,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950266513291182,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 815,
      "trace_address": [
        11,
        1,
        3,
        1,
        103,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950266513291182)"
    },
    {
      "trace_index": 816,
      "trace_address": [
        11,
        1,
        3,
        1,
        103,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bce90f8cb41ae665",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 817,
      "trace_address": [
        11,
        1,
        3,
        1,
        104
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a2e29b267d000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 818,
      "trace_address": [
        11,
        1,
        3,
        1,
        104,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251076457290115)"
    },
    {
      "trace_index": 819,
      "trace_address": [
        11,
        1,
        3,
        1,
        104,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b2cdee4fcd",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 820,
      "trace_address": [
        11,
        1,
        3,
        1,
        104,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b2cdee4fcd",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 821,
      "trace_address": [
        11,
        1,
        3,
        1,
        104,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251076457290115,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 822,
      "trace_address": [
        11,
        1,
        3,
        1,
        104,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 823,
      "trace_address": [
        11,
        1,
        3,
        1,
        104,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 824,
      "trace_address": [
        11,
        1,
        3,
        1,
        104,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012589f5a11a8",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 825,
      "trace_address": [
        11,
        1,
        3,
        1,
        104,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012589f5a11a8",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 826,
      "trace_address": [
        11,
        1,
        3,
        1,
        105
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f43b0959a41ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 827,
      "trace_address": [
        11,
        1,
        3,
        1,
        105,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 828,
      "trace_address": [
        11,
        1,
        3,
        1,
        105,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 829,
      "trace_address": [
        11,
        1,
        3,
        1,
        105,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000001a7672f96b60ce2",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 830,
      "trace_address": [
        11,
        1,
        3,
        1,
        105,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950268303776321,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 831,
      "trace_address": [
        11,
        1,
        3,
        1,
        105,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950268303776321)"
    },
    {
      "trace_index": 832,
      "trace_address": [
        11,
        1,
        3,
        1,
        105,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bcf2a673474ba723",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 833,
      "trace_address": [
        11,
        1,
        3,
        1,
        106
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a277e7faba000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 834,
      "trace_address": [
        11,
        1,
        3,
        1,
        106,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251078247417158)"
    },
    {
      "trace_index": 835,
      "trace_address": [
        11,
        1,
        3,
        1,
        106,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b3b53e41a8",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 836,
      "trace_address": [
        11,
        1,
        3,
        1,
        106,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b3b53e41a8",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 837,
      "trace_address": [
        11,
        1,
        3,
        1,
        106,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251078247417158,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 838,
      "trace_address": [
        11,
        1,
        3,
        1,
        106,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 839,
      "trace_address": [
        11,
        1,
        3,
        1,
        106,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 840,
      "trace_address": [
        11,
        1,
        3,
        1,
        106,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000125986aa0383",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 841,
      "trace_address": [
        11,
        1,
        3,
        1,
        106,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000125986aa0383",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 842,
      "trace_address": [
        11,
        1,
        3,
        1,
        107
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f441b4e3cd4ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 843,
      "trace_address": [
        11,
        1,
        3,
        1,
        107,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 844,
      "trace_address": [
        11,
        1,
        3,
        1,
        107,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 845,
      "trace_address": [
        11,
        1,
        3,
        1,
        107,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000001b0fe15bf33a1dd",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 846,
      "trace_address": [
        11,
        1,
        3,
        1,
        107,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950270094261460,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 847,
      "trace_address": [
        11,
        1,
        3,
        1,
        107,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950270094261460)"
    },
    {
      "trace_index": 848,
      "trace_address": [
        11,
        1,
        3,
        1,
        107,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bcfc3d59da81deb1",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 849,
      "trace_address": [
        11,
        1,
        3,
        1,
        108
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a20d34cef9000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 850,
      "trace_address": [
        11,
        1,
        3,
        1,
        108,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251080037544199)"
    },
    {
      "trace_index": 851,
      "trace_address": [
        11,
        1,
        3,
        1,
        108,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b49c8e3383",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 852,
      "trace_address": [
        11,
        1,
        3,
        1,
        108,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b49c8e3383",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 853,
      "trace_address": [
        11,
        1,
        3,
        1,
        108,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251080037544199,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 854,
      "trace_address": [
        11,
        1,
        3,
        1,
        108,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 855,
      "trace_address": [
        11,
        1,
        3,
        1,
        108,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 856,
      "trace_address": [
        11,
        1,
        3,
        1,
        108,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000125a6df9f55e",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 857,
      "trace_address": [
        11,
        1,
        3,
        1,
        108,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000125a6df9f55e",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 858,
      "trace_address": [
        11,
        1,
        3,
        1,
        109
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f448606df68ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 859,
      "trace_address": [
        11,
        1,
        3,
        1,
        109,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 860,
      "trace_address": [
        11,
        1,
        3,
        1,
        109,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 861,
      "trace_address": [
        11,
        1,
        3,
        1,
        109,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000001ba94fbe7b6adaa",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 862,
      "trace_address": [
        11,
        1,
        3,
        1,
        109,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950271884746600,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 863,
      "trace_address": [
        11,
        1,
        3,
        1,
        109,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950271884746600)"
    },
    {
      "trace_index": 864,
      "trace_address": [
        11,
        1,
        3,
        1,
        109,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bd05d4406dbd8d12",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 865,
      "trace_address": [
        11,
        1,
        3,
        1,
        110
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a1a281a335000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 866,
      "trace_address": [
        11,
        1,
        3,
        1,
        110,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251081827671243)"
    },
    {
      "trace_index": 867,
      "trace_address": [
        11,
        1,
        3,
        1,
        110,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b583de255e",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 868,
      "trace_address": [
        11,
        1,
        3,
        1,
        110,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b583de255e",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 869,
      "trace_address": [
        11,
        1,
        3,
        1,
        110,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251081827671243,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 870,
      "trace_address": [
        11,
        1,
        3,
        1,
        110,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 871,
      "trace_address": [
        11,
        1,
        3,
        1,
        110,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 872,
      "trace_address": [
        11,
        1,
        3,
        1,
        110,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000125b5549e739",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 873,
      "trace_address": [
        11,
        1,
        3,
        1,
        110,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000125b5549e739",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 874,
      "trace_address": [
        11,
        1,
        3,
        1,
        111
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f44f0bf81fcffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 875,
      "trace_address": [
        11,
        1,
        3,
        1,
        111,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 876,
      "trace_address": [
        11,
        1,
        3,
        1,
        111,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 877,
      "trace_address": [
        11,
        1,
        3,
        1,
        111,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000001c42be2103f3047",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 878,
      "trace_address": [
        11,
        1,
        3,
        1,
        111,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950273675231740,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 879,
      "trace_address": [
        11,
        1,
        3,
        1,
        111,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950273675231740)"
    },
    {
      "trace_index": 880,
      "trace_address": [
        11,
        1,
        3,
        1,
        111,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bd0f6b2700feb243",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 881,
      "trace_address": [
        11,
        1,
        3,
        1,
        112
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a137ce7773000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 882,
      "trace_address": [
        11,
        1,
        3,
        1,
        112,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251083617798285)"
    },
    {
      "trace_index": 883,
      "trace_address": [
        11,
        1,
        3,
        1,
        112,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b66b2e1739",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 884,
      "trace_address": [
        11,
        1,
        3,
        1,
        112,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b66b2e1739",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 885,
      "trace_address": [
        11,
        1,
        3,
        1,
        112,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251083617798285,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 886,
      "trace_address": [
        11,
        1,
        3,
        1,
        112,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 887,
      "trace_address": [
        11,
        1,
        3,
        1,
        112,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 888,
      "trace_address": [
        11,
        1,
        3,
        1,
        112,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000125c3c99d914",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 889,
      "trace_address": [
        11,
        1,
        3,
        1,
        112,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000125c3c99d914",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 890,
      "trace_address": [
        11,
        1,
        3,
        1,
        113
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f455b782491ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 891,
      "trace_address": [
        11,
        1,
        3,
        1,
        113,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 892,
      "trace_address": [
        11,
        1,
        3,
        1,
        113,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 893,
      "trace_address": [
        11,
        1,
        3,
        1,
        113,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000001cdc2c838cd29b6",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 894,
      "trace_address": [
        11,
        1,
        3,
        1,
        113,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950275465716881,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 895,
      "trace_address": [
        11,
        1,
        3,
        1,
        113,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950275465716881)"
    },
    {
      "trace_index": 896,
      "trace_address": [
        11,
        1,
        3,
        1,
        113,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bd19020d94454e47",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 897,
      "trace_address": [
        11,
        1,
        3,
        1,
        114
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a0cd1b4bae000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 898,
      "trace_address": [
        11,
        1,
        3,
        1,
        114,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251085407925330)"
    },
    {
      "trace_index": 899,
      "trace_address": [
        11,
        1,
        3,
        1,
        114,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b7527e0914",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 900,
      "trace_address": [
        11,
        1,
        3,
        1,
        114,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b7527e0914",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 901,
      "trace_address": [
        11,
        1,
        3,
        1,
        114,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251085407925330,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 902,
      "trace_address": [
        11,
        1,
        3,
        1,
        114,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 903,
      "trace_address": [
        11,
        1,
        3,
        1,
        114,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 904,
      "trace_address": [
        11,
        1,
        3,
        1,
        114,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000125d23e9caef",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 905,
      "trace_address": [
        11,
        1,
        3,
        1,
        114,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000125d23e9caef",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 906,
      "trace_address": [
        11,
        1,
        3,
        1,
        115
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f45c630c726ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 907,
      "trace_address": [
        11,
        1,
        3,
        1,
        115,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 908,
      "trace_address": [
        11,
        1,
        3,
        1,
        115,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 909,
      "trace_address": [
        11,
        1,
        3,
        1,
        115,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000001d759ae616099f5",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 910,
      "trace_address": [
        11,
        1,
        3,
        1,
        115,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950277256202022,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 911,
      "trace_address": [
        11,
        1,
        3,
        1,
        115,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950277256202022)"
    },
    {
      "trace_index": 912,
      "trace_address": [
        11,
        1,
        3,
        1,
        115,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bd2298f42791611b",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 913,
      "trace_address": [
        11,
        1,
        3,
        1,
        116
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57a062681fea000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 914,
      "trace_address": [
        11,
        1,
        3,
        1,
        116,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251087198052374)"
    },
    {
      "trace_index": 915,
      "trace_address": [
        11,
        1,
        3,
        1,
        116,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b839cdfaef",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 916,
      "trace_address": [
        11,
        1,
        3,
        1,
        116,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b839cdfaef",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 917,
      "trace_address": [
        11,
        1,
        3,
        1,
        116,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251087198052374,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 918,
      "trace_address": [
        11,
        1,
        3,
        1,
        116,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 919,
      "trace_address": [
        11,
        1,
        3,
        1,
        116,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 920,
      "trace_address": [
        11,
        1,
        3,
        1,
        116,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000125e0b39bcca",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 921,
      "trace_address": [
        11,
        1,
        3,
        1,
        116,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000125e0b39bcca",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 922,
      "trace_address": [
        11,
        1,
        3,
        1,
        117
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f4630e969bcffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 923,
      "trace_address": [
        11,
        1,
        3,
        1,
        117,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 924,
      "trace_address": [
        11,
        1,
        3,
        1,
        117,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 925,
      "trace_address": [
        11,
        1,
        3,
        1,
        117,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000001e0f09489f98105",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 926,
      "trace_address": [
        11,
        1,
        3,
        1,
        117,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950279046687164,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 927,
      "trace_address": [
        11,
        1,
        3,
        1,
        117,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950279046687164)"
    },
    {
      "trace_index": 928,
      "trace_address": [
        11,
        1,
        3,
        1,
        117,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bd2c2fdabae2eac1",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 929,
      "trace_address": [
        11,
        1,
        3,
        1,
        118
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579ff7b4f426000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 930,
      "trace_address": [
        11,
        1,
        3,
        1,
        118,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251088988179418)"
    },
    {
      "trace_index": 931,
      "trace_address": [
        11,
        1,
        3,
        1,
        118,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b9211decca",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 932,
      "trace_address": [
        11,
        1,
        3,
        1,
        118,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000b9211decca",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 933,
      "trace_address": [
        11,
        1,
        3,
        1,
        118,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251088988179418,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 934,
      "trace_address": [
        11,
        1,
        3,
        1,
        118,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 935,
      "trace_address": [
        11,
        1,
        3,
        1,
        118,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 936,
      "trace_address": [
        11,
        1,
        3,
        1,
        118,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000125ef289aea5",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 937,
      "trace_address": [
        11,
        1,
        3,
        1,
        118,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000125ef289aea5",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 938,
      "trace_address": [
        11,
        1,
        3,
        1,
        119
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f469ba20c51ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 939,
      "trace_address": [
        11,
        1,
        3,
        1,
        119,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 940,
      "trace_address": [
        11,
        1,
        3,
        1,
        119,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 941,
      "trace_address": [
        11,
        1,
        3,
        1,
        119,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000001ea877ab297dee7",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 942,
      "trace_address": [
        11,
        1,
        3,
        1,
        119,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950280837172305,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 943,
      "trace_address": [
        11,
        1,
        3,
        1,
        119,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950280837172305)"
    },
    {
      "trace_index": 944,
      "trace_address": [
        11,
        1,
        3,
        1,
        119,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bd35c6c14e39eb38",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 945,
      "trace_address": [
        11,
        1,
        3,
        1,
        120
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579f8d01c860000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 946,
      "trace_address": [
        11,
        1,
        3,
        1,
        120,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251090778306464)"
    },
    {
      "trace_index": 947,
      "trace_address": [
        11,
        1,
        3,
        1,
        120,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000ba086ddea5",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 948,
      "trace_address": [
        11,
        1,
        3,
        1,
        120,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000ba086ddea5",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 949,
      "trace_address": [
        11,
        1,
        3,
        1,
        120,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251090778306464,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 950,
      "trace_address": [
        11,
        1,
        3,
        1,
        120,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 951,
      "trace_address": [
        11,
        1,
        3,
        1,
        120,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 952,
      "trace_address": [
        11,
        1,
        3,
        1,
        120,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000125fd9d9a080",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 953,
      "trace_address": [
        11,
        1,
        3,
        1,
        120,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000125fd9d9a080",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 954,
      "trace_address": [
        11,
        1,
        3,
        1,
        121
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f47065aaee8ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 955,
      "trace_address": [
        11,
        1,
        3,
        1,
        121,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 956,
      "trace_address": [
        11,
        1,
        3,
        1,
        121,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 957,
      "trace_address": [
        11,
        1,
        3,
        1,
        121,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000001f41e60db3bb398",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 958,
      "trace_address": [
        11,
        1,
        3,
        1,
        121,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950282627657448,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 959,
      "trace_address": [
        11,
        1,
        3,
        1,
        121,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950282627657448)"
    },
    {
      "trace_index": 960,
      "trace_address": [
        11,
        1,
        3,
        1,
        121,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bd3f5da7e1966280",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 961,
      "trace_address": [
        11,
        1,
        3,
        1,
        122
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579f224e9c9b000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 962,
      "trace_address": [
        11,
        1,
        3,
        1,
        122,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251092568433509)"
    },
    {
      "trace_index": 963,
      "trace_address": [
        11,
        1,
        3,
        1,
        122,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000baefbdd080",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 964,
      "trace_address": [
        11,
        1,
        3,
        1,
        122,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000baefbdd080",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 965,
      "trace_address": [
        11,
        1,
        3,
        1,
        122,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251092568433509,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 966,
      "trace_address": [
        11,
        1,
        3,
        1,
        122,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 967,
      "trace_address": [
        11,
        1,
        3,
        1,
        122,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 968,
      "trace_address": [
        11,
        1,
        3,
        1,
        122,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001260c129925b",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 969,
      "trace_address": [
        11,
        1,
        3,
        1,
        122,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001260c129925b",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 970,
      "trace_address": [
        11,
        1,
        3,
        1,
        123
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f477113517fffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 971,
      "trace_address": [
        11,
        1,
        3,
        1,
        123,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 972,
      "trace_address": [
        11,
        1,
        3,
        1,
        123,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 973,
      "trace_address": [
        11,
        1,
        3,
        1,
        123,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000001fdb54703e4ff1b",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 974,
      "trace_address": [
        11,
        1,
        3,
        1,
        123,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950284418142591,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 975,
      "trace_address": [
        11,
        1,
        3,
        1,
        123,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950284418142591)"
    },
    {
      "trace_index": 976,
      "trace_address": [
        11,
        1,
        3,
        1,
        123,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bd48f48e74f8509a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 977,
      "trace_address": [
        11,
        1,
        3,
        1,
        124
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579eb79b70d5000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 978,
      "trace_address": [
        11,
        1,
        3,
        1,
        124,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251094358560555)"
    },
    {
      "trace_index": 979,
      "trace_address": [
        11,
        1,
        3,
        1,
        124,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000bbd70dc25b",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 980,
      "trace_address": [
        11,
        1,
        3,
        1,
        124,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000bbd70dc25b",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 981,
      "trace_address": [
        11,
        1,
        3,
        1,
        124,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251094358560555,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 982,
      "trace_address": [
        11,
        1,
        3,
        1,
        124,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 983,
      "trace_address": [
        11,
        1,
        3,
        1,
        124,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 984,
      "trace_address": [
        11,
        1,
        3,
        1,
        124,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001261a8798436",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 985,
      "trace_address": [
        11,
        1,
        3,
        1,
        124,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001261a8798436",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 986,
      "trace_address": [
        11,
        1,
        3,
        1,
        125
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f47dbcbf417ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 987,
      "trace_address": [
        11,
        1,
        3,
        1,
        125,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 988,
      "trace_address": [
        11,
        1,
        3,
        1,
        125,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 989,
      "trace_address": [
        11,
        1,
        3,
        1,
        125,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000002074c2d2c93c16f",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 990,
      "trace_address": [
        11,
        1,
        3,
        1,
        125,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950286208627735,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 991,
      "trace_address": [
        11,
        1,
        3,
        1,
        125,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950286208627735)"
    },
    {
      "trace_index": 992,
      "trace_address": [
        11,
        1,
        3,
        1,
        125,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bd528b75085fb586",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 993,
      "trace_address": [
        11,
        1,
        3,
        1,
        126
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579e4ce8450f000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 994,
      "trace_address": [
        11,
        1,
        3,
        1,
        126,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251096148687601)"
    },
    {
      "trace_index": 995,
      "trace_address": [
        11,
        1,
        3,
        1,
        126,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000bcbe5db436",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 996,
      "trace_address": [
        11,
        1,
        3,
        1,
        126,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000bcbe5db436",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 997,
      "trace_address": [
        11,
        1,
        3,
        1,
        126,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251096148687601,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 998,
      "trace_address": [
        11,
        1,
        3,
        1,
        126,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 999,
      "trace_address": [
        11,
        1,
        3,
        1,
        126,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1000,
      "trace_address": [
        11,
        1,
        3,
        1,
        126,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012628fc97611",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1001,
      "trace_address": [
        11,
        1,
        3,
        1,
        126,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012628fc97611",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1002,
      "trace_address": [
        11,
        1,
        3,
        1,
        127
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f48468496aeffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1003,
      "trace_address": [
        11,
        1,
        3,
        1,
        127,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1004,
      "trace_address": [
        11,
        1,
        3,
        1,
        127,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1005,
      "trace_address": [
        11,
        1,
        3,
        1,
        127,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000210e3135547fa95",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1006,
      "trace_address": [
        11,
        1,
        3,
        1,
        127,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950287999112878,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1007,
      "trace_address": [
        11,
        1,
        3,
        1,
        127,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950287999112878)"
    },
    {
      "trace_index": 1008,
      "trace_address": [
        11,
        1,
        3,
        1,
        127,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bd5c225b9bcc9143",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1009,
      "trace_address": [
        11,
        1,
        3,
        1,
        128
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579de2351947000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1010,
      "trace_address": [
        11,
        1,
        3,
        1,
        128,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251097938814649)"
    },
    {
      "trace_index": 1011,
      "trace_address": [
        11,
        1,
        3,
        1,
        128,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000bda5ada611",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1012,
      "trace_address": [
        11,
        1,
        3,
        1,
        128,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000bda5ada611",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1013,
      "trace_address": [
        11,
        1,
        3,
        1,
        128,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251097938814649,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1014,
      "trace_address": [
        11,
        1,
        3,
        1,
        128,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1015,
      "trace_address": [
        11,
        1,
        3,
        1,
        128,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1016,
      "trace_address": [
        11,
        1,
        3,
        1,
        128,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001263771967ec",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1017,
      "trace_address": [
        11,
        1,
        3,
        1,
        128,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001263771967ec",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1018,
      "trace_address": [
        11,
        1,
        3,
        1,
        129
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f48b13d3948ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1019,
      "trace_address": [
        11,
        1,
        3,
        1,
        129,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1020,
      "trace_address": [
        11,
        1,
        3,
        1,
        129,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1021,
      "trace_address": [
        11,
        1,
        3,
        1,
        129,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000021a79f97e01aa8a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1022,
      "trace_address": [
        11,
        1,
        3,
        1,
        129,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950289789598024,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1023,
      "trace_address": [
        11,
        1,
        3,
        1,
        129,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950289789598024)"
    },
    {
      "trace_index": 1024,
      "trace_address": [
        11,
        1,
        3,
        1,
        129,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bd65b9422f3ee3d2",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1025,
      "trace_address": [
        11,
        1,
        3,
        1,
        130
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579d7781ed81000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1026,
      "trace_address": [
        11,
        1,
        3,
        1,
        130,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251099728941695)"
    },
    {
      "trace_index": 1027,
      "trace_address": [
        11,
        1,
        3,
        1,
        130,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000be8cfd97ec",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1028,
      "trace_address": [
        11,
        1,
        3,
        1,
        130,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000be8cfd97ec",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1029,
      "trace_address": [
        11,
        1,
        3,
        1,
        130,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251099728941695,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1030,
      "trace_address": [
        11,
        1,
        3,
        1,
        130,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1031,
      "trace_address": [
        11,
        1,
        3,
        1,
        130,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1032,
      "trace_address": [
        11,
        1,
        3,
        1,
        130,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012645e6959c7",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1033,
      "trace_address": [
        11,
        1,
        3,
        1,
        130,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012645e6959c7",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1034,
      "trace_address": [
        11,
        1,
        3,
        1,
        131
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f491bf5dbdfffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1035,
      "trace_address": [
        11,
        1,
        3,
        1,
        131,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1036,
      "trace_address": [
        11,
        1,
        3,
        1,
        131,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1037,
      "trace_address": [
        11,
        1,
        3,
        1,
        131,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000022410dfa6c0d153",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1038,
      "trace_address": [
        11,
        1,
        3,
        1,
        131,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950291580083167,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1039,
      "trace_address": [
        11,
        1,
        3,
        1,
        131,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950291580083167)"
    },
    {
      "trace_index": 1040,
      "trace_address": [
        11,
        1,
        3,
        1,
        131,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bd6f5028c2b6ad32",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1041,
      "trace_address": [
        11,
        1,
        3,
        1,
        132
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579d0ccec1b8000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1042,
      "trace_address": [
        11,
        1,
        3,
        1,
        132,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251101519068744)"
    },
    {
      "trace_index": 1043,
      "trace_address": [
        11,
        1,
        3,
        1,
        132,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000bf744d89c7",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1044,
      "trace_address": [
        11,
        1,
        3,
        1,
        132,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000bf744d89c7",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1045,
      "trace_address": [
        11,
        1,
        3,
        1,
        132,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251101519068744,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1046,
      "trace_address": [
        11,
        1,
        3,
        1,
        132,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1047,
      "trace_address": [
        11,
        1,
        3,
        1,
        132,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1048,
      "trace_address": [
        11,
        1,
        3,
        1,
        132,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000126545b94ba2",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1049,
      "trace_address": [
        11,
        1,
        3,
        1,
        132,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000126545b94ba2",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1050,
      "trace_address": [
        11,
        1,
        3,
        1,
        133
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f4986ae7e79ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1051,
      "trace_address": [
        11,
        1,
        3,
        1,
        133,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1052,
      "trace_address": [
        11,
        1,
        3,
        1,
        133,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1053,
      "trace_address": [
        11,
        1,
        3,
        1,
        133,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000022da7c5cf856eea",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1054,
      "trace_address": [
        11,
        1,
        3,
        1,
        133,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950293370568313,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1055,
      "trace_address": [
        11,
        1,
        3,
        1,
        133,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950293370568313)"
    },
    {
      "trace_index": 1056,
      "trace_address": [
        11,
        1,
        3,
        1,
        133,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bd78e70f5633ed63",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1057,
      "trace_address": [
        11,
        1,
        3,
        1,
        134
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579ca21b95f1000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1058,
      "trace_address": [
        11,
        1,
        3,
        1,
        134,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251103309195791)"
    },
    {
      "trace_index": 1059,
      "trace_address": [
        11,
        1,
        3,
        1,
        134,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c05b9d7ba2",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1060,
      "trace_address": [
        11,
        1,
        3,
        1,
        134,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c05b9d7ba2",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1061,
      "trace_address": [
        11,
        1,
        3,
        1,
        134,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251103309195791,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1062,
      "trace_address": [
        11,
        1,
        3,
        1,
        134,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1063,
      "trace_address": [
        11,
        1,
        3,
        1,
        134,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1064,
      "trace_address": [
        11,
        1,
        3,
        1,
        134,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012662d093d7d",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1065,
      "trace_address": [
        11,
        1,
        3,
        1,
        134,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012662d093d7d",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1066,
      "trace_address": [
        11,
        1,
        3,
        1,
        135
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f49f1672112ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1067,
      "trace_address": [
        11,
        1,
        3,
        1,
        135,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1068,
      "trace_address": [
        11,
        1,
        3,
        1,
        135,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1069,
      "trace_address": [
        11,
        1,
        3,
        1,
        135,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000002373eabf84f8354",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1070,
      "trace_address": [
        11,
        1,
        3,
        1,
        135,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950295161053458,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1071,
      "trace_address": [
        11,
        1,
        3,
        1,
        135,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950295161053458)"
    },
    {
      "trace_index": 1072,
      "trace_address": [
        11,
        1,
        3,
        1,
        135,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bd827df5e9b6a466",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1073,
      "trace_address": [
        11,
        1,
        3,
        1,
        136
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579c37686a27000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1074,
      "trace_address": [
        11,
        1,
        3,
        1,
        136,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251105099322841)"
    },
    {
      "trace_index": 1075,
      "trace_address": [
        11,
        1,
        3,
        1,
        136,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c142ed6d7d",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1076,
      "trace_address": [
        11,
        1,
        3,
        1,
        136,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c142ed6d7d",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1077,
      "trace_address": [
        11,
        1,
        3,
        1,
        136,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251105099322841,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1078,
      "trace_address": [
        11,
        1,
        3,
        1,
        136,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1079,
      "trace_address": [
        11,
        1,
        3,
        1,
        136,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1080,
      "trace_address": [
        11,
        1,
        3,
        1,
        136,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000126714592f58",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1081,
      "trace_address": [
        11,
        1,
        3,
        1,
        136,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000126714592f58",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1082,
      "trace_address": [
        11,
        1,
        3,
        1,
        137
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f4a5c1fc3adffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1083,
      "trace_address": [
        11,
        1,
        3,
        1,
        137,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1084,
      "trace_address": [
        11,
        1,
        3,
        1,
        137,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1085,
      "trace_address": [
        11,
        1,
        3,
        1,
        137,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000240d592211f0e8d",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1086,
      "trace_address": [
        11,
        1,
        3,
        1,
        137,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950296951538605,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1087,
      "trace_address": [
        11,
        1,
        3,
        1,
        137,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950296951538605)"
    },
    {
      "trace_index": 1088,
      "trace_address": [
        11,
        1,
        3,
        1,
        137,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bd8c14dc7d3ed23a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1089,
      "trace_address": [
        11,
        1,
        3,
        1,
        138
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579bccb53e5f000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1090,
      "trace_address": [
        11,
        1,
        3,
        1,
        138,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251106889449889)"
    },
    {
      "trace_index": 1091,
      "trace_address": [
        11,
        1,
        3,
        1,
        138,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c22a3d5f58",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1092,
      "trace_address": [
        11,
        1,
        3,
        1,
        138,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c22a3d5f58",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1093,
      "trace_address": [
        11,
        1,
        3,
        1,
        138,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251106889449889,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1094,
      "trace_address": [
        11,
        1,
        3,
        1,
        138,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1095,
      "trace_address": [
        11,
        1,
        3,
        1,
        138,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1096,
      "trace_address": [
        11,
        1,
        3,
        1,
        138,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001267fba92133",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1097,
      "trace_address": [
        11,
        1,
        3,
        1,
        138,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001267fba92133",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1098,
      "trace_address": [
        11,
        1,
        3,
        1,
        139
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f4ac6d86649ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1099,
      "trace_address": [
        11,
        1,
        3,
        1,
        139,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1100,
      "trace_address": [
        11,
        1,
        3,
        1,
        139,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1101,
      "trace_address": [
        11,
        1,
        3,
        1,
        139,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000024a6c7849f41099",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1102,
      "trace_address": [
        11,
        1,
        3,
        1,
        139,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950298742023753,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1103,
      "trace_address": [
        11,
        1,
        3,
        1,
        139,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950298742023753)"
    },
    {
      "trace_index": 1104,
      "trace_address": [
        11,
        1,
        3,
        1,
        139,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bd95abc310cc76e2",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1105,
      "trace_address": [
        11,
        1,
        3,
        1,
        140
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579b62021295000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1106,
      "trace_address": [
        11,
        1,
        3,
        1,
        140,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251108679576939)"
    },
    {
      "trace_index": 1107,
      "trace_address": [
        11,
        1,
        3,
        1,
        140,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c3118d5133",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1108,
      "trace_address": [
        11,
        1,
        3,
        1,
        140,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c3118d5133",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1109,
      "trace_address": [
        11,
        1,
        3,
        1,
        140,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251108679576939,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1110,
      "trace_address": [
        11,
        1,
        3,
        1,
        140,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1111,
      "trace_address": [
        11,
        1,
        3,
        1,
        140,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1112,
      "trace_address": [
        11,
        1,
        3,
        1,
        140,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001268e2f9130e",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1113,
      "trace_address": [
        11,
        1,
        3,
        1,
        140,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001268e2f9130e",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1114,
      "trace_address": [
        11,
        1,
        3,
        1,
        141
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f4b319108e3ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1115,
      "trace_address": [
        11,
        1,
        3,
        1,
        141,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1116,
      "trace_address": [
        11,
        1,
        3,
        1,
        141,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1117,
      "trace_address": [
        11,
        1,
        3,
        1,
        141,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000254035e72ce8977",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1118,
      "trace_address": [
        11,
        1,
        3,
        1,
        141,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950300532508899,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1119,
      "trace_address": [
        11,
        1,
        3,
        1,
        141,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950300532508899)"
    },
    {
      "trace_index": 1120,
      "trace_address": [
        11,
        1,
        3,
        1,
        141,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bd9f42a9a45f925a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1121,
      "trace_address": [
        11,
        1,
        3,
        1,
        142
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579af74ee6cb000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1122,
      "trace_address": [
        11,
        1,
        3,
        1,
        142,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251110469703989)"
    },
    {
      "trace_index": 1123,
      "trace_address": [
        11,
        1,
        3,
        1,
        142,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c3f8dd430e",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1124,
      "trace_address": [
        11,
        1,
        3,
        1,
        142,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c3f8dd430e",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1125,
      "trace_address": [
        11,
        1,
        3,
        1,
        142,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251110469703989,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1126,
      "trace_address": [
        11,
        1,
        3,
        1,
        142,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1127,
      "trace_address": [
        11,
        1,
        3,
        1,
        142,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1128,
      "trace_address": [
        11,
        1,
        3,
        1,
        142,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001269ca4904e9",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1129,
      "trace_address": [
        11,
        1,
        3,
        1,
        142,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001269ca4904e9",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1130,
      "trace_address": [
        11,
        1,
        3,
        1,
        143
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f4b9c49ab7fffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1131,
      "trace_address": [
        11,
        1,
        3,
        1,
        143,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1132,
      "trace_address": [
        11,
        1,
        3,
        1,
        143,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1133,
      "trace_address": [
        11,
        1,
        3,
        1,
        143,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000025d9a449bae7925",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1134,
      "trace_address": [
        11,
        1,
        3,
        1,
        143,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950302322994047,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1135,
      "trace_address": [
        11,
        1,
        3,
        1,
        143,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950302322994047)"
    },
    {
      "trace_index": 1136,
      "trace_address": [
        11,
        1,
        3,
        1,
        143,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bda8d99037f824a4",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1137,
      "trace_address": [
        11,
        1,
        3,
        1,
        144
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579a8c9bbb00000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1138,
      "trace_address": [
        11,
        1,
        3,
        1,
        144,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251112259831040)"
    },
    {
      "trace_index": 1139,
      "trace_address": [
        11,
        1,
        3,
        1,
        144,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c4e02d34e9",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1140,
      "trace_address": [
        11,
        1,
        3,
        1,
        144,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c4e02d34e9",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1141,
      "trace_address": [
        11,
        1,
        3,
        1,
        144,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251112259831040,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1142,
      "trace_address": [
        11,
        1,
        3,
        1,
        144,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1143,
      "trace_address": [
        11,
        1,
        3,
        1,
        144,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1144,
      "trace_address": [
        11,
        1,
        3,
        1,
        144,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000126ab198f6c4",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1145,
      "trace_address": [
        11,
        1,
        3,
        1,
        144,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000126ab198f6c4",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1146,
      "trace_address": [
        11,
        1,
        3,
        1,
        145
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f4c07024e1affffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1147,
      "trace_address": [
        11,
        1,
        3,
        1,
        145,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1148,
      "trace_address": [
        11,
        1,
        3,
        1,
        145,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1149,
      "trace_address": [
        11,
        1,
        3,
        1,
        145,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000267312ac493dfa4",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1150,
      "trace_address": [
        11,
        1,
        3,
        1,
        145,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950304113479194,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1151,
      "trace_address": [
        11,
        1,
        3,
        1,
        145,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950304113479194)"
    },
    {
      "trace_index": 1152,
      "trace_address": [
        11,
        1,
        3,
        1,
        145,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bdb27076cb962dbe",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1153,
      "trace_address": [
        11,
        1,
        3,
        1,
        146
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579a21e825ce000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1154,
      "trace_address": [
        11,
        1,
        3,
        1,
        146,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251114049985074)"
    },
    {
      "trace_index": 1155,
      "trace_address": [
        11,
        1,
        3,
        1,
        146,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c5c77d26c4",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1156,
      "trace_address": [
        11,
        1,
        3,
        1,
        146,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c5c77d26c4",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1157,
      "trace_address": [
        11,
        1,
        3,
        1,
        146,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251114049985074,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1158,
      "trace_address": [
        11,
        1,
        3,
        1,
        146,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1159,
      "trace_address": [
        11,
        1,
        3,
        1,
        146,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1160,
      "trace_address": [
        11,
        1,
        3,
        1,
        146,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000126b98e8e89f",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1161,
      "trace_address": [
        11,
        1,
        3,
        1,
        146,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000126b98e8e89f",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1162,
      "trace_address": [
        11,
        1,
        3,
        1,
        147
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f4c70a9bbe3ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1163,
      "trace_address": [
        11,
        1,
        3,
        1,
        147,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1164,
      "trace_address": [
        11,
        1,
        3,
        1,
        147,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1165,
      "trace_address": [
        11,
        1,
        3,
        1,
        147,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000270c810ed7e538c",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1166,
      "trace_address": [
        11,
        1,
        3,
        1,
        147,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950305886059491,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1167,
      "trace_address": [
        11,
        1,
        3,
        1,
        147,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950305886059491)"
    },
    {
      "trace_index": 1168,
      "trace_address": [
        11,
        1,
        3,
        1,
        147,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bdbc075d5e280f6f",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1169,
      "trace_address": [
        11,
        1,
        3,
        1,
        148
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be5799b84620d9000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1170,
      "trace_address": [
        11,
        1,
        3,
        1,
        148,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251115822210855)"
    },
    {
      "trace_index": 1171,
      "trace_address": [
        11,
        1,
        3,
        1,
        148,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c6aecd189f",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1172,
      "trace_address": [
        11,
        1,
        3,
        1,
        148,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c6aecd189f",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1173,
      "trace_address": [
        11,
        1,
        3,
        1,
        148,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251115822210855,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1174,
      "trace_address": [
        11,
        1,
        3,
        1,
        148,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1175,
      "trace_address": [
        11,
        1,
        3,
        1,
        148,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1176,
      "trace_address": [
        11,
        1,
        3,
        1,
        148,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000126c8038da7a",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1177,
      "trace_address": [
        11,
        1,
        3,
        1,
        148,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000126c8038da7a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1178,
      "trace_address": [
        11,
        1,
        3,
        1,
        149
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f4cda5129adffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1179,
      "trace_address": [
        11,
        1,
        3,
        1,
        149,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1180,
      "trace_address": [
        11,
        1,
        3,
        1,
        149,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1181,
      "trace_address": [
        11,
        1,
        3,
        1,
        149,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000027a5ef7166e3048",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1182,
      "trace_address": [
        11,
        1,
        3,
        1,
        149,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950307658639789,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1183,
      "trace_address": [
        11,
        1,
        3,
        1,
        149,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950307658639789)"
    },
    {
      "trace_index": 1184,
      "trace_address": [
        11,
        1,
        3,
        1,
        149,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bdc59e43f0bf59f5",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1185,
      "trace_address": [
        11,
        1,
        3,
        1,
        150
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57994ea41be3000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1186,
      "trace_address": [
        11,
        1,
        3,
        1,
        150,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251117594436637)"
    },
    {
      "trace_index": 1187,
      "trace_address": [
        11,
        1,
        3,
        1,
        150,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c7961d0a7a",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1188,
      "trace_address": [
        11,
        1,
        3,
        1,
        150,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c7961d0a7a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1189,
      "trace_address": [
        11,
        1,
        3,
        1,
        150,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251117594436637,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1190,
      "trace_address": [
        11,
        1,
        3,
        1,
        150,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1191,
      "trace_address": [
        11,
        1,
        3,
        1,
        150,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1192,
      "trace_address": [
        11,
        1,
        3,
        1,
        150,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000126d6788cc55",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1193,
      "trace_address": [
        11,
        1,
        3,
        1,
        150,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000126d6788cc55",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1194,
      "trace_address": [
        11,
        1,
        3,
        1,
        151
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f4d43f89777ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1195,
      "trace_address": [
        11,
        1,
        3,
        1,
        151,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1196,
      "trace_address": [
        11,
        1,
        3,
        1,
        151,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1197,
      "trace_address": [
        11,
        1,
        3,
        1,
        151,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000283f5dd3f6375d8",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1198,
      "trace_address": [
        11,
        1,
        3,
        1,
        151,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950309431220087,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1199,
      "trace_address": [
        11,
        1,
        3,
        1,
        151,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950309431220087)"
    },
    {
      "trace_index": 1200,
      "trace_address": [
        11,
        1,
        3,
        1,
        151,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bdcf352a835c0d4f",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1201,
      "trace_address": [
        11,
        1,
        3,
        1,
        152
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be5798e50216ee000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1202,
      "trace_address": [
        11,
        1,
        3,
        1,
        152,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251119366662418)"
    },
    {
      "trace_index": 1203,
      "trace_address": [
        11,
        1,
        3,
        1,
        152,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c87d6cfc55",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1204,
      "trace_address": [
        11,
        1,
        3,
        1,
        152,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c87d6cfc55",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1205,
      "trace_address": [
        11,
        1,
        3,
        1,
        152,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251119366662418,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1206,
      "trace_address": [
        11,
        1,
        3,
        1,
        152,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1207,
      "trace_address": [
        11,
        1,
        3,
        1,
        152,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1208,
      "trace_address": [
        11,
        1,
        3,
        1,
        152,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000126e4ed8be30",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1209,
      "trace_address": [
        11,
        1,
        3,
        1,
        152,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000126e4ed8be30",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1210,
      "trace_address": [
        11,
        1,
        3,
        1,
        153
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f4dada00542ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1211,
      "trace_address": [
        11,
        1,
        3,
        1,
        153,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1212,
      "trace_address": [
        11,
        1,
        3,
        1,
        153,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1213,
      "trace_address": [
        11,
        1,
        3,
        1,
        153,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000028d8cc3685e243d",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1214,
      "trace_address": [
        11,
        1,
        3,
        1,
        153,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950311203800386,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1215,
      "trace_address": [
        11,
        1,
        3,
        1,
        153,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950311203800386)"
    },
    {
      "trace_index": 1216,
      "trace_address": [
        11,
        1,
        3,
        1,
        153,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bdd8cc1115fe297f",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1217,
      "trace_address": [
        11,
        1,
        3,
        1,
        154
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57987b607b5e000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1218,
      "trace_address": [
        11,
        1,
        3,
        1,
        154,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251121138861218)"
    },
    {
      "trace_index": 1219,
      "trace_address": [
        11,
        1,
        3,
        1,
        154,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c964bcee30",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1220,
      "trace_address": [
        11,
        1,
        3,
        1,
        154,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000c964bcee30",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1221,
      "trace_address": [
        11,
        1,
        3,
        1,
        154,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251121138861218,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1222,
      "trace_address": [
        11,
        1,
        3,
        1,
        154,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1223,
      "trace_address": [
        11,
        1,
        3,
        1,
        154,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1224,
      "trace_address": [
        11,
        1,
        3,
        1,
        154,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000126f3628b00b",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1225,
      "trace_address": [
        11,
        1,
        3,
        1,
        154,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000126f3628b00b",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1226,
      "trace_address": [
        11,
        1,
        3,
        1,
        155
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f4e1858a7dfffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1227,
      "trace_address": [
        11,
        1,
        3,
        1,
        155,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1228,
      "trace_address": [
        11,
        1,
        3,
        1,
        155,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1229,
      "trace_address": [
        11,
        1,
        3,
        1,
        155,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000029723a9915ea4dd",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1230,
      "trace_address": [
        11,
        1,
        3,
        1,
        155,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950312994285535,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1231,
      "trace_address": [
        11,
        1,
        3,
        1,
        155,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950312994285535)"
    },
    {
      "trace_index": 1232,
      "trace_address": [
        11,
        1,
        3,
        1,
        155,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bde262f7a9b74cbc",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1233,
      "trace_address": [
        11,
        1,
        3,
        1,
        156
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579810ad4f92000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1234,
      "trace_address": [
        11,
        1,
        3,
        1,
        156,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251122928988270)"
    },
    {
      "trace_index": 1235,
      "trace_address": [
        11,
        1,
        3,
        1,
        156,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000ca4c0ce00b",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1236,
      "trace_address": [
        11,
        1,
        3,
        1,
        156,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000ca4c0ce00b",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1237,
      "trace_address": [
        11,
        1,
        3,
        1,
        156,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251122928988270,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1238,
      "trace_address": [
        11,
        1,
        3,
        1,
        156,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1239,
      "trace_address": [
        11,
        1,
        3,
        1,
        156,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1240,
      "trace_address": [
        11,
        1,
        3,
        1,
        156,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012701d78a1e6",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1241,
      "trace_address": [
        11,
        1,
        3,
        1,
        156,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012701d78a1e6",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1242,
      "trace_address": [
        11,
        1,
        3,
        1,
        157
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f4e83114a7effffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1243,
      "trace_address": [
        11,
        1,
        3,
        1,
        157,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1244,
      "trace_address": [
        11,
        1,
        3,
        1,
        157,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1245,
      "trace_address": [
        11,
        1,
        3,
        1,
        157,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000002a0ba8fba649c4e",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1246,
      "trace_address": [
        11,
        1,
        3,
        1,
        157,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950314784770686,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1247,
      "trace_address": [
        11,
        1,
        3,
        1,
        157,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950314784770686)"
    },
    {
      "trace_index": 1248,
      "trace_address": [
        11,
        1,
        3,
        1,
        157,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bdebf9de3d75e6cc",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1249,
      "trace_address": [
        11,
        1,
        3,
        1,
        158
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be5797a5fa23c3000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1250,
      "trace_address": [
        11,
        1,
        3,
        1,
        158,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251124719115325)"
    },
    {
      "trace_index": 1251,
      "trace_address": [
        11,
        1,
        3,
        1,
        158,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000cb335cd1e6",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1252,
      "trace_address": [
        11,
        1,
        3,
        1,
        158,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000cb335cd1e6",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1253,
      "trace_address": [
        11,
        1,
        3,
        1,
        158,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251124719115325,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1254,
      "trace_address": [
        11,
        1,
        3,
        1,
        158,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1255,
      "trace_address": [
        11,
        1,
        3,
        1,
        158,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1256,
      "trace_address": [
        11,
        1,
        3,
        1,
        158,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127104c893c1",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1257,
      "trace_address": [
        11,
        1,
        3,
        1,
        158,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127104c893c1",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1258,
      "trace_address": [
        11,
        1,
        3,
        1,
        159
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f4eedc9ed1effffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1259,
      "trace_address": [
        11,
        1,
        3,
        1,
        159,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1260,
      "trace_address": [
        11,
        1,
        3,
        1,
        159,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1261,
      "trace_address": [
        11,
        1,
        3,
        1,
        159,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000002aa5175e3700a8f",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1262,
      "trace_address": [
        11,
        1,
        3,
        1,
        159,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950316575255838,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1263,
      "trace_address": [
        11,
        1,
        3,
        1,
        159,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950316575255838)"
    },
    {
      "trace_index": 1264,
      "trace_address": [
        11,
        1,
        3,
        1,
        159,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bdf590c4d139f7ad",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1265,
      "trace_address": [
        11,
        1,
        3,
        1,
        160
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57973b46f7f6000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1266,
      "trace_address": [
        11,
        1,
        3,
        1,
        160,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251126509242378)"
    },
    {
      "trace_index": 1267,
      "trace_address": [
        11,
        1,
        3,
        1,
        160,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000cc1aacc3c1",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1268,
      "trace_address": [
        11,
        1,
        3,
        1,
        160,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000cc1aacc3c1",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1269,
      "trace_address": [
        11,
        1,
        3,
        1,
        160,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251126509242378,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1270,
      "trace_address": [
        11,
        1,
        3,
        1,
        160,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1271,
      "trace_address": [
        11,
        1,
        3,
        1,
        160,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1272,
      "trace_address": [
        11,
        1,
        3,
        1,
        160,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001271ec18859c",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1273,
      "trace_address": [
        11,
        1,
        3,
        1,
        160,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001271ec18859c",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1274,
      "trace_address": [
        11,
        1,
        3,
        1,
        161
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f4f58828fbeffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1275,
      "trace_address": [
        11,
        1,
        3,
        1,
        161,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1276,
      "trace_address": [
        11,
        1,
        3,
        1,
        161,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1277,
      "trace_address": [
        11,
        1,
        3,
        1,
        161,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000002b3e85c0c80efa3",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1278,
      "trace_address": [
        11,
        1,
        3,
        1,
        161,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950318365740990,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1279,
      "trace_address": [
        11,
        1,
        3,
        1,
        161,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950318365740990)"
    },
    {
      "trace_index": 1280,
      "trace_address": [
        11,
        1,
        3,
        1,
        161,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bdff27ab65037f61",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1281,
      "trace_address": [
        11,
        1,
        3,
        1,
        162
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be5796d093cc27000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1282,
      "trace_address": [
        11,
        1,
        3,
        1,
        162,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251128299369433)"
    },
    {
      "trace_index": 1283,
      "trace_address": [
        11,
        1,
        3,
        1,
        162,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000cd01fcb59c",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1284,
      "trace_address": [
        11,
        1,
        3,
        1,
        162,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000cd01fcb59c",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1285,
      "trace_address": [
        11,
        1,
        3,
        1,
        162,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251128299369433,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1286,
      "trace_address": [
        11,
        1,
        3,
        1,
        162,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1287,
      "trace_address": [
        11,
        1,
        3,
        1,
        162,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1288,
      "trace_address": [
        11,
        1,
        3,
        1,
        162,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001272d3687777",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1289,
      "trace_address": [
        11,
        1,
        3,
        1,
        162,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001272d3687777",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1290,
      "trace_address": [
        11,
        1,
        3,
        1,
        163
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f4fc33b325effffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1291,
      "trace_address": [
        11,
        1,
        3,
        1,
        163,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1292,
      "trace_address": [
        11,
        1,
        3,
        1,
        163,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1293,
      "trace_address": [
        11,
        1,
        3,
        1,
        163,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000002bd7f4235974b88",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1294,
      "trace_address": [
        11,
        1,
        3,
        1,
        163,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950320156226142,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1295,
      "trace_address": [
        11,
        1,
        3,
        1,
        163,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950320156226142)"
    },
    {
      "trace_index": 1296,
      "trace_address": [
        11,
        1,
        3,
        1,
        163,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000be08be91f8d27de6",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1297,
      "trace_address": [
        11,
        1,
        3,
        1,
        164
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579665e0a058000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1298,
      "trace_address": [
        11,
        1,
        3,
        1,
        164,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251130089496488)"
    },
    {
      "trace_index": 1299,
      "trace_address": [
        11,
        1,
        3,
        1,
        164,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000cde94ca777",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1300,
      "trace_address": [
        11,
        1,
        3,
        1,
        164,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000cde94ca777",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1301,
      "trace_address": [
        11,
        1,
        3,
        1,
        164,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251130089496488,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1302,
      "trace_address": [
        11,
        1,
        3,
        1,
        164,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1303,
      "trace_address": [
        11,
        1,
        3,
        1,
        164,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1304,
      "trace_address": [
        11,
        1,
        3,
        1,
        164,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001273bab86952",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1305,
      "trace_address": [
        11,
        1,
        3,
        1,
        164,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001273bab86952",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1306,
      "trace_address": [
        11,
        1,
        3,
        1,
        165
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f502df3d4feffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1307,
      "trace_address": [
        11,
        1,
        3,
        1,
        165,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1308,
      "trace_address": [
        11,
        1,
        3,
        1,
        165,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1309,
      "trace_address": [
        11,
        1,
        3,
        1,
        165,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000002c716285eb31e3e",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1310,
      "trace_address": [
        11,
        1,
        3,
        1,
        165,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950321946711294,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1311,
      "trace_address": [
        11,
        1,
        3,
        1,
        165,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950321946711294)"
    },
    {
      "trace_index": 1312,
      "trace_address": [
        11,
        1,
        3,
        1,
        165,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000be1255788ca6f33c",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1313,
      "trace_address": [
        11,
        1,
        3,
        1,
        166
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be5795fb2d7488000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1314,
      "trace_address": [
        11,
        1,
        3,
        1,
        166,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251131879623544)"
    },
    {
      "trace_index": 1315,
      "trace_address": [
        11,
        1,
        3,
        1,
        166,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000ced09c9952",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1316,
      "trace_address": [
        11,
        1,
        3,
        1,
        166,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000ced09c9952",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1317,
      "trace_address": [
        11,
        1,
        3,
        1,
        166,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251131879623544,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1318,
      "trace_address": [
        11,
        1,
        3,
        1,
        166,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1319,
      "trace_address": [
        11,
        1,
        3,
        1,
        166,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1320,
      "trace_address": [
        11,
        1,
        3,
        1,
        166,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001274a2085b2d",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1321,
      "trace_address": [
        11,
        1,
        3,
        1,
        166,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001274a2085b2d",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1322,
      "trace_address": [
        11,
        1,
        3,
        1,
        167
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f5098ac779fffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1323,
      "trace_address": [
        11,
        1,
        3,
        1,
        167,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1324,
      "trace_address": [
        11,
        1,
        3,
        1,
        167,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1325,
      "trace_address": [
        11,
        1,
        3,
        1,
        167,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000002d0ad0e87d467c4",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1326,
      "trace_address": [
        11,
        1,
        3,
        1,
        167,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950323737196447,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1327,
      "trace_address": [
        11,
        1,
        3,
        1,
        167,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950323737196447)"
    },
    {
      "trace_index": 1328,
      "trace_address": [
        11,
        1,
        3,
        1,
        167,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000be1bec5f2080df63",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1329,
      "trace_address": [
        11,
        1,
        3,
        1,
        168
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be5795907a48b8000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1330,
      "trace_address": [
        11,
        1,
        3,
        1,
        168,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251133669750600)"
    },
    {
      "trace_index": 1331,
      "trace_address": [
        11,
        1,
        3,
        1,
        168,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000cfb7ec8b2d",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1332,
      "trace_address": [
        11,
        1,
        3,
        1,
        168,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000cfb7ec8b2d",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1333,
      "trace_address": [
        11,
        1,
        3,
        1,
        168,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251133669750600,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1334,
      "trace_address": [
        11,
        1,
        3,
        1,
        168,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1335,
      "trace_address": [
        11,
        1,
        3,
        1,
        168,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1336,
      "trace_address": [
        11,
        1,
        3,
        1,
        168,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127589584d08",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1337,
      "trace_address": [
        11,
        1,
        3,
        1,
        168,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127589584d08",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1338,
      "trace_address": [
        11,
        1,
        3,
        1,
        169
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f5103651a41ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1339,
      "trace_address": [
        11,
        1,
        3,
        1,
        169,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1340,
      "trace_address": [
        11,
        1,
        3,
        1,
        169,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1341,
      "trace_address": [
        11,
        1,
        3,
        1,
        169,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000002da43f4b0fb281b",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1342,
      "trace_address": [
        11,
        1,
        3,
        1,
        169,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950325527681601,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1343,
      "trace_address": [
        11,
        1,
        3,
        1,
        169,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950325527681601)"
    },
    {
      "trace_index": 1344,
      "trace_address": [
        11,
        1,
        3,
        1,
        169,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000be258345b460425c",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1345,
      "trace_address": [
        11,
        1,
        3,
        1,
        170
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579525c71ce7000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1346,
      "trace_address": [
        11,
        1,
        3,
        1,
        170,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251135459877657)"
    },
    {
      "trace_index": 1347,
      "trace_address": [
        11,
        1,
        3,
        1,
        170,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d09f3c7d08",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1348,
      "trace_address": [
        11,
        1,
        3,
        1,
        170,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d09f3c7d08",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1349,
      "trace_address": [
        11,
        1,
        3,
        1,
        170,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251135459877657,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1350,
      "trace_address": [
        11,
        1,
        3,
        1,
        170,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1351,
      "trace_address": [
        11,
        1,
        3,
        1,
        170,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1352,
      "trace_address": [
        11,
        1,
        3,
        1,
        170,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127670a83ee3",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1353,
      "trace_address": [
        11,
        1,
        3,
        1,
        170,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127670a83ee3",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1354,
      "trace_address": [
        11,
        1,
        3,
        1,
        171
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f516e1dbce3ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1355,
      "trace_address": [
        11,
        1,
        3,
        1,
        171,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1356,
      "trace_address": [
        11,
        1,
        3,
        1,
        171,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1357,
      "trace_address": [
        11,
        1,
        3,
        1,
        171,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000002e3dadada275f43",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1358,
      "trace_address": [
        11,
        1,
        3,
        1,
        171,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950327318166755,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1359,
      "trace_address": [
        11,
        1,
        3,
        1,
        171,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950327318166755)"
    },
    {
      "trace_index": 1360,
      "trace_address": [
        11,
        1,
        3,
        1,
        171,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000be2f1a2c48451c26",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1361,
      "trace_address": [
        11,
        1,
        3,
        1,
        172
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be5794bb13f116000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1362,
      "trace_address": [
        11,
        1,
        3,
        1,
        172,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251137250004714)"
    },
    {
      "trace_index": 1363,
      "trace_address": [
        11,
        1,
        3,
        1,
        172,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d1868c6ee3",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1364,
      "trace_address": [
        11,
        1,
        3,
        1,
        172,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d1868c6ee3",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1365,
      "trace_address": [
        11,
        1,
        3,
        1,
        172,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251137250004714,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1366,
      "trace_address": [
        11,
        1,
        3,
        1,
        172,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1367,
      "trace_address": [
        11,
        1,
        3,
        1,
        172,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1368,
      "trace_address": [
        11,
        1,
        3,
        1,
        172,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127757f830be",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1369,
      "trace_address": [
        11,
        1,
        3,
        1,
        172,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127757f830be",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1370,
      "trace_address": [
        11,
        1,
        3,
        1,
        173
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f51d8d65f85ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1371,
      "trace_address": [
        11,
        1,
        3,
        1,
        173,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1372,
      "trace_address": [
        11,
        1,
        3,
        1,
        173,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1373,
      "trace_address": [
        11,
        1,
        3,
        1,
        173,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000002ed71c103590d3c",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1374,
      "trace_address": [
        11,
        1,
        3,
        1,
        173,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950329108651909,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1375,
      "trace_address": [
        11,
        1,
        3,
        1,
        173,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950329108651909)"
    },
    {
      "trace_index": 1376,
      "trace_address": [
        11,
        1,
        3,
        1,
        173,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000be38b112dc2f6cc1",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1377,
      "trace_address": [
        11,
        1,
        3,
        1,
        174
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57945060c545000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1378,
      "trace_address": [
        11,
        1,
        3,
        1,
        174,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251139040131771)"
    },
    {
      "trace_index": 1379,
      "trace_address": [
        11,
        1,
        3,
        1,
        174,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d26ddc60be",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1380,
      "trace_address": [
        11,
        1,
        3,
        1,
        174,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d26ddc60be",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1381,
      "trace_address": [
        11,
        1,
        3,
        1,
        174,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251139040131771,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1382,
      "trace_address": [
        11,
        1,
        3,
        1,
        174,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1383,
      "trace_address": [
        11,
        1,
        3,
        1,
        174,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1384,
      "trace_address": [
        11,
        1,
        3,
        1,
        174,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012783f482299",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1385,
      "trace_address": [
        11,
        1,
        3,
        1,
        174,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012783f482299",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1386,
      "trace_address": [
        11,
        1,
        3,
        1,
        175
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f52438f0227ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1387,
      "trace_address": [
        11,
        1,
        3,
        1,
        175,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1388,
      "trace_address": [
        11,
        1,
        3,
        1,
        175,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1389,
      "trace_address": [
        11,
        1,
        3,
        1,
        175,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000002f708a72c903206",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1390,
      "trace_address": [
        11,
        1,
        3,
        1,
        175,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950330899137063,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1391,
      "trace_address": [
        11,
        1,
        3,
        1,
        175,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950330899137063)"
    },
    {
      "trace_index": 1392,
      "trace_address": [
        11,
        1,
        3,
        1,
        175,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000be4247f9701f342d",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1393,
      "trace_address": [
        11,
        1,
        3,
        1,
        176
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be5793e5ad9973000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1394,
      "trace_address": [
        11,
        1,
        3,
        1,
        176,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251140830258829)"
    },
    {
      "trace_index": 1395,
      "trace_address": [
        11,
        1,
        3,
        1,
        176,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d3552c5299",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1396,
      "trace_address": [
        11,
        1,
        3,
        1,
        176,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d3552c5299",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1397,
      "trace_address": [
        11,
        1,
        3,
        1,
        176,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251140830258829,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1398,
      "trace_address": [
        11,
        1,
        3,
        1,
        176,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1399,
      "trace_address": [
        11,
        1,
        3,
        1,
        176,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1400,
      "trace_address": [
        11,
        1,
        3,
        1,
        176,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127926981474",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1401,
      "trace_address": [
        11,
        1,
        3,
        1,
        176,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127926981474",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1402,
      "trace_address": [
        11,
        1,
        3,
        1,
        177
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f52ae47a4ccffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1403,
      "trace_address": [
        11,
        1,
        3,
        1,
        177,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1404,
      "trace_address": [
        11,
        1,
        3,
        1,
        177,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1405,
      "trace_address": [
        11,
        1,
        3,
        1,
        177,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000003009f8d55cccda0",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1406,
      "trace_address": [
        11,
        1,
        3,
        1,
        177,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950332689622220,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1407,
      "trace_address": [
        11,
        1,
        3,
        1,
        177,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950332689622220)"
    },
    {
      "trace_index": 1408,
      "trace_address": [
        11,
        1,
        3,
        1,
        177,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000be4bdee00414726c",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1409,
      "trace_address": [
        11,
        1,
        3,
        1,
        178
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57937afa6da1000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1410,
      "trace_address": [
        11,
        1,
        3,
        1,
        178,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251142620385887)"
    },
    {
      "trace_index": 1411,
      "trace_address": [
        11,
        1,
        3,
        1,
        178,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d43c7c4474",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1412,
      "trace_address": [
        11,
        1,
        3,
        1,
        178,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d43c7c4474",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1413,
      "trace_address": [
        11,
        1,
        3,
        1,
        178,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251142620385887,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1414,
      "trace_address": [
        11,
        1,
        3,
        1,
        178,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1415,
      "trace_address": [
        11,
        1,
        3,
        1,
        178,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1416,
      "trace_address": [
        11,
        1,
        3,
        1,
        178,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127a0de8064f",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1417,
      "trace_address": [
        11,
        1,
        3,
        1,
        178,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127a0de8064f",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1418,
      "trace_address": [
        11,
        1,
        3,
        1,
        179
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f531900476fffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1419,
      "trace_address": [
        11,
        1,
        3,
        1,
        179,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1420,
      "trace_address": [
        11,
        1,
        3,
        1,
        179,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1421,
      "trace_address": [
        11,
        1,
        3,
        1,
        179,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000030a36737f0ee00d",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1422,
      "trace_address": [
        11,
        1,
        3,
        1,
        179,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950334480107375,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1423,
      "trace_address": [
        11,
        1,
        3,
        1,
        179,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950334480107375)"
    },
    {
      "trace_index": 1424,
      "trace_address": [
        11,
        1,
        3,
        1,
        179,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000be5575c6980f277c",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1425,
      "trace_address": [
        11,
        1,
        3,
        1,
        180
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be5793104741ce000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1426,
      "trace_address": [
        11,
        1,
        3,
        1,
        180,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251144410512946)"
    },
    {
      "trace_index": 1427,
      "trace_address": [
        11,
        1,
        3,
        1,
        180,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d523cc364f",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1428,
      "trace_address": [
        11,
        1,
        3,
        1,
        180,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d523cc364f",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1429,
      "trace_address": [
        11,
        1,
        3,
        1,
        180,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251144410512946,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1430,
      "trace_address": [
        11,
        1,
        3,
        1,
        180,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1431,
      "trace_address": [
        11,
        1,
        3,
        1,
        180,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1432,
      "trace_address": [
        11,
        1,
        3,
        1,
        180,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127af537f82a",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1433,
      "trace_address": [
        11,
        1,
        3,
        1,
        180,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127af537f82a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1434,
      "trace_address": [
        11,
        1,
        3,
        1,
        181
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f5383b8ea14ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1435,
      "trace_address": [
        11,
        1,
        3,
        1,
        181,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1436,
      "trace_address": [
        11,
        1,
        3,
        1,
        181,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1437,
      "trace_address": [
        11,
        1,
        3,
        1,
        181,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000313cd59a856694a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1438,
      "trace_address": [
        11,
        1,
        3,
        1,
        181,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950336270592532,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1439,
      "trace_address": [
        11,
        1,
        3,
        1,
        181,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950336270592532)"
    },
    {
      "trace_index": 1440,
      "trace_address": [
        11,
        1,
        3,
        1,
        181,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000be5f0cad2c0f535e",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1441,
      "trace_address": [
        11,
        1,
        3,
        1,
        182
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be5792a59415fb000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1442,
      "trace_address": [
        11,
        1,
        3,
        1,
        182,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251146200640005)"
    },
    {
      "trace_index": 1443,
      "trace_address": [
        11,
        1,
        3,
        1,
        182,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d60b1c282a",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1444,
      "trace_address": [
        11,
        1,
        3,
        1,
        182,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d60b1c282a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1445,
      "trace_address": [
        11,
        1,
        3,
        1,
        182,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251146200640005,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1446,
      "trace_address": [
        11,
        1,
        3,
        1,
        182,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1447,
      "trace_address": [
        11,
        1,
        3,
        1,
        182,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1448,
      "trace_address": [
        11,
        1,
        3,
        1,
        182,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127bdc87ea05",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1449,
      "trace_address": [
        11,
        1,
        3,
        1,
        182,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127bdc87ea05",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1450,
      "trace_address": [
        11,
        1,
        3,
        1,
        183
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f53ee718cb8ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1451,
      "trace_address": [
        11,
        1,
        3,
        1,
        183,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1452,
      "trace_address": [
        11,
        1,
        3,
        1,
        183,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1453,
      "trace_address": [
        11,
        1,
        3,
        1,
        183,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000031d643fd1a36959",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1454,
      "trace_address": [
        11,
        1,
        3,
        1,
        183,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950338061077688,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1455,
      "trace_address": [
        11,
        1,
        3,
        1,
        183,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950338061077688)"
    },
    {
      "trace_index": 1456,
      "trace_address": [
        11,
        1,
        3,
        1,
        183,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000be68a393c014f611",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1457,
      "trace_address": [
        11,
        1,
        3,
        1,
        184
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be57923ae0ea27000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1458,
      "trace_address": [
        11,
        1,
        3,
        1,
        184,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251147990767065)"
    },
    {
      "trace_index": 1459,
      "trace_address": [
        11,
        1,
        3,
        1,
        184,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d6f26c1a05",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1460,
      "trace_address": [
        11,
        1,
        3,
        1,
        184,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d6f26c1a05",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1461,
      "trace_address": [
        11,
        1,
        3,
        1,
        184,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251147990767065,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1462,
      "trace_address": [
        11,
        1,
        3,
        1,
        184,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1463,
      "trace_address": [
        11,
        1,
        3,
        1,
        184,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1464,
      "trace_address": [
        11,
        1,
        3,
        1,
        184,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127cc3d7dbe0",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1465,
      "trace_address": [
        11,
        1,
        3,
        1,
        184,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127cc3d7dbe0",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1466,
      "trace_address": [
        11,
        1,
        3,
        1,
        185
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f54592a2f5dffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1467,
      "trace_address": [
        11,
        1,
        3,
        1,
        185,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1468,
      "trace_address": [
        11,
        1,
        3,
        1,
        185,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1469,
      "trace_address": [
        11,
        1,
        3,
        1,
        185,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000326fb25faf5e038",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1470,
      "trace_address": [
        11,
        1,
        3,
        1,
        185,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950339851562845,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1471,
      "trace_address": [
        11,
        1,
        3,
        1,
        185,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950339851562845)"
    },
    {
      "trace_index": 1472,
      "trace_address": [
        11,
        1,
        3,
        1,
        185,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000be723a7a54200f95",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1473,
      "trace_address": [
        11,
        1,
        3,
        1,
        186
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be5791d02dbe53000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1474,
      "trace_address": [
        11,
        1,
        3,
        1,
        186,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251149780894125)"
    },
    {
      "trace_index": 1475,
      "trace_address": [
        11,
        1,
        3,
        1,
        186,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d7d9bc0be0",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1476,
      "trace_address": [
        11,
        1,
        3,
        1,
        186,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d7d9bc0be0",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1477,
      "trace_address": [
        11,
        1,
        3,
        1,
        186,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251149780894125,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1478,
      "trace_address": [
        11,
        1,
        3,
        1,
        186,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1479,
      "trace_address": [
        11,
        1,
        3,
        1,
        186,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1480,
      "trace_address": [
        11,
        1,
        3,
        1,
        186,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127dab27cdbb",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1481,
      "trace_address": [
        11,
        1,
        3,
        1,
        186,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127dab27cdbb",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1482,
      "trace_address": [
        11,
        1,
        3,
        1,
        187
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f54c3e2d203ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1483,
      "trace_address": [
        11,
        1,
        3,
        1,
        187,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1484,
      "trace_address": [
        11,
        1,
        3,
        1,
        187,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1485,
      "trace_address": [
        11,
        1,
        3,
        1,
        187,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000330920c244dcde8",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1486,
      "trace_address": [
        11,
        1,
        3,
        1,
        187,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950341642048003,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1487,
      "trace_address": [
        11,
        1,
        3,
        1,
        187,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950341642048003)"
    },
    {
      "trace_index": 1488,
      "trace_address": [
        11,
        1,
        3,
        1,
        187,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000be7bd160e8309feb",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1489,
      "trace_address": [
        11,
        1,
        3,
        1,
        188
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be5791657a927e000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1490,
      "trace_address": [
        11,
        1,
        3,
        1,
        188,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251151571021186)"
    },
    {
      "trace_index": 1491,
      "trace_address": [
        11,
        1,
        3,
        1,
        188,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d8c10bfdbb",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1492,
      "trace_address": [
        11,
        1,
        3,
        1,
        188,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d8c10bfdbb",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1493,
      "trace_address": [
        11,
        1,
        3,
        1,
        188,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251151571021186,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1494,
      "trace_address": [
        11,
        1,
        3,
        1,
        188,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1495,
      "trace_address": [
        11,
        1,
        3,
        1,
        188,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1496,
      "trace_address": [
        11,
        1,
        3,
        1,
        188,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127e9277bf96",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1497,
      "trace_address": [
        11,
        1,
        3,
        1,
        188,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127e9277bf96",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1498,
      "trace_address": [
        11,
        1,
        3,
        1,
        189
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f552e9b74a9ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1499,
      "trace_address": [
        11,
        1,
        3,
        1,
        189,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1500,
      "trace_address": [
        11,
        1,
        3,
        1,
        189,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1501,
      "trace_address": [
        11,
        1,
        3,
        1,
        189,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000033a28f24dab3269",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1502,
      "trace_address": [
        11,
        1,
        3,
        1,
        189,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950343432533161,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1503,
      "trace_address": [
        11,
        1,
        3,
        1,
        189,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950343432533161)"
    },
    {
      "trace_index": 1504,
      "trace_address": [
        11,
        1,
        3,
        1,
        189,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000be8568477c46a712",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1505,
      "trace_address": [
        11,
        1,
        3,
        1,
        190
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be5790fac766a9000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1506,
      "trace_address": [
        11,
        1,
        3,
        1,
        190,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251153361148247)"
    },
    {
      "trace_index": 1507,
      "trace_address": [
        11,
        1,
        3,
        1,
        190,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d9a85bef96",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1508,
      "trace_address": [
        11,
        1,
        3,
        1,
        190,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000d9a85bef96",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1509,
      "trace_address": [
        11,
        1,
        3,
        1,
        190,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251153361148247,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1510,
      "trace_address": [
        11,
        1,
        3,
        1,
        190,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1511,
      "trace_address": [
        11,
        1,
        3,
        1,
        190,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1512,
      "trace_address": [
        11,
        1,
        3,
        1,
        190,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127f79c7b171",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1513,
      "trace_address": [
        11,
        1,
        3,
        1,
        190,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000127f79c7b171",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1514,
      "trace_address": [
        11,
        1,
        3,
        1,
        191
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f559954174fffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1515,
      "trace_address": [
        11,
        1,
        3,
        1,
        191,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1516,
      "trace_address": [
        11,
        1,
        3,
        1,
        191,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1517,
      "trace_address": [
        11,
        1,
        3,
        1,
        191,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000343bfd8770e0dbb",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1518,
      "trace_address": [
        11,
        1,
        3,
        1,
        191,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950345223018319,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1519,
      "trace_address": [
        11,
        1,
        3,
        1,
        191,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950345223018319)"
    },
    {
      "trace_index": 1520,
      "trace_address": [
        11,
        1,
        3,
        1,
        191,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000be8eff2e1062250a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1521,
      "trace_address": [
        11,
        1,
        3,
        1,
        192
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579090143ad3000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1522,
      "trace_address": [
        11,
        1,
        3,
        1,
        192,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251155151275309)"
    },
    {
      "trace_index": 1523,
      "trace_address": [
        11,
        1,
        3,
        1,
        192,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000da8fabe171",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1524,
      "trace_address": [
        11,
        1,
        3,
        1,
        192,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000da8fabe171",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1525,
      "trace_address": [
        11,
        1,
        3,
        1,
        192,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251155151275309,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1526,
      "trace_address": [
        11,
        1,
        3,
        1,
        192,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1527,
      "trace_address": [
        11,
        1,
        3,
        1,
        192,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1528,
      "trace_address": [
        11,
        1,
        3,
        1,
        192,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012806117a34c",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1529,
      "trace_address": [
        11,
        1,
        3,
        1,
        192,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012806117a34c",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1530,
      "trace_address": [
        11,
        1,
        3,
        1,
        193
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f56040cb9f8ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1531,
      "trace_address": [
        11,
        1,
        3,
        1,
        193,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1532,
      "trace_address": [
        11,
        1,
        3,
        1,
        193,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1533,
      "trace_address": [
        11,
        1,
        3,
        1,
        193,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000034d56bea0765fdd",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1534,
      "trace_address": [
        11,
        1,
        3,
        1,
        193,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950347013503480,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1535,
      "trace_address": [
        11,
        1,
        3,
        1,
        193,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950347013503480)"
    },
    {
      "trace_index": 1536,
      "trace_address": [
        11,
        1,
        3,
        1,
        193,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000be989614a48319d5",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1537,
      "trace_address": [
        11,
        1,
        3,
        1,
        194
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be579025610efe000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1538,
      "trace_address": [
        11,
        1,
        3,
        1,
        194,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251156941402370)"
    },
    {
      "trace_index": 1539,
      "trace_address": [
        11,
        1,
        3,
        1,
        194,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000db76fbd34c",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1540,
      "trace_address": [
        11,
        1,
        3,
        1,
        194,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000db76fbd34c",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1541,
      "trace_address": [
        11,
        1,
        3,
        1,
        194,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251156941402370,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1542,
      "trace_address": [
        11,
        1,
        3,
        1,
        194,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1543,
      "trace_address": [
        11,
        1,
        3,
        1,
        194,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1544,
      "trace_address": [
        11,
        1,
        3,
        1,
        194,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000128148679527",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1545,
      "trace_address": [
        11,
        1,
        3,
        1,
        194,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000128148679527",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1546,
      "trace_address": [
        11,
        1,
        3,
        1,
        195
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f566ec55c9effffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1547,
      "trace_address": [
        11,
        1,
        3,
        1,
        195,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1548,
      "trace_address": [
        11,
        1,
        3,
        1,
        195,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1549,
      "trace_address": [
        11,
        1,
        3,
        1,
        195,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000356eda4c9e428d3",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1550,
      "trace_address": [
        11,
        1,
        3,
        1,
        195,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950348803988638,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1551,
      "trace_address": [
        11,
        1,
        3,
        1,
        195,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950348803988638)"
    },
    {
      "trace_index": 1552,
      "trace_address": [
        11,
        1,
        3,
        1,
        195,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bea22cfb38a98571",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1553,
      "trace_address": [
        11,
        1,
        3,
        1,
        196
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be578fbaade327000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1554,
      "trace_address": [
        11,
        1,
        3,
        1,
        196,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251158731529433)"
    },
    {
      "trace_index": 1555,
      "trace_address": [
        11,
        1,
        3,
        1,
        196,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000dc5e4bc527",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1556,
      "trace_address": [
        11,
        1,
        3,
        1,
        196,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000dc5e4bc527",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1557,
      "trace_address": [
        11,
        1,
        3,
        1,
        196,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251158731529433,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1558,
      "trace_address": [
        11,
        1,
        3,
        1,
        196,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1559,
      "trace_address": [
        11,
        1,
        3,
        1,
        196,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1560,
      "trace_address": [
        11,
        1,
        3,
        1,
        196,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012822fb78702",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1561,
      "trace_address": [
        11,
        1,
        3,
        1,
        196,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012822fb78702",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1562,
      "trace_address": [
        11,
        1,
        3,
        1,
        197
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f56d97dff46ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1563,
      "trace_address": [
        11,
        1,
        3,
        1,
        197,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1564,
      "trace_address": [
        11,
        1,
        3,
        1,
        197,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1565,
      "trace_address": [
        11,
        1,
        3,
        1,
        197,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000360848af3576898",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1566,
      "trace_address": [
        11,
        1,
        3,
        1,
        197,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950350594473798,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1567,
      "trace_address": [
        11,
        1,
        3,
        1,
        197,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950350594473798)"
    },
    {
      "trace_index": 1568,
      "trace_address": [
        11,
        1,
        3,
        1,
        197,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000beabc3e1ccd567de",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1569,
      "trace_address": [
        11,
        1,
        3,
        1,
        198
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be578f4ffab751000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1570,
      "trace_address": [
        11,
        1,
        3,
        1,
        198,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251160521656495)"
    },
    {
      "trace_index": 1571,
      "trace_address": [
        11,
        1,
        3,
        1,
        198,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000dd459bb702",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1572,
      "trace_address": [
        11,
        1,
        3,
        1,
        198,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000dd459bb702",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1573,
      "trace_address": [
        11,
        1,
        3,
        1,
        198,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251160521656495,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1574,
      "trace_address": [
        11,
        1,
        3,
        1,
        198,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1575,
      "trace_address": [
        11,
        1,
        3,
        1,
        198,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1576,
      "trace_address": [
        11,
        1,
        3,
        1,
        198,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001283170778dd",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1577,
      "trace_address": [
        11,
        1,
        3,
        1,
        198,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001283170778dd",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1578,
      "trace_address": [
        11,
        1,
        3,
        1,
        199
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f574436a1efffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1579,
      "trace_address": [
        11,
        1,
        3,
        1,
        199,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1580,
      "trace_address": [
        11,
        1,
        3,
        1,
        199,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1581,
      "trace_address": [
        11,
        1,
        3,
        1,
        199,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000036a1b711cd01f2f",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1582,
      "trace_address": [
        11,
        1,
        3,
        1,
        199,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950352384958959,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1583,
      "trace_address": [
        11,
        1,
        3,
        1,
        199,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950352384958959)"
    },
    {
      "trace_index": 1584,
      "trace_address": [
        11,
        1,
        3,
        1,
        199,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000beb55ac86106c11e",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1585,
      "trace_address": [
        11,
        1,
        3,
        1,
        200
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be578ee5478b79000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1586,
      "trace_address": [
        11,
        1,
        3,
        1,
        200,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251162311783559)"
    },
    {
      "trace_index": 1587,
      "trace_address": [
        11,
        1,
        3,
        1,
        200,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000de2ceba8dd",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1588,
      "trace_address": [
        11,
        1,
        3,
        1,
        200,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000de2ceba8dd",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1589,
      "trace_address": [
        11,
        1,
        3,
        1,
        200,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251162311783559,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1590,
      "trace_address": [
        11,
        1,
        3,
        1,
        200,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1591,
      "trace_address": [
        11,
        1,
        3,
        1,
        200,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1592,
      "trace_address": [
        11,
        1,
        3,
        1,
        200,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001283fe576ab8",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1593,
      "trace_address": [
        11,
        1,
        3,
        1,
        200,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001283fe576ab8",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1594,
      "trace_address": [
        11,
        1,
        3,
        1,
        201
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f57aeef4497ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1595,
      "trace_address": [
        11,
        1,
        3,
        1,
        201,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1596,
      "trace_address": [
        11,
        1,
        3,
        1,
        201,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1597,
      "trace_address": [
        11,
        1,
        3,
        1,
        201,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000373b257464e4c97",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1598,
      "trace_address": [
        11,
        1,
        3,
        1,
        201,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950354175444119,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1599,
      "trace_address": [
        11,
        1,
        3,
        1,
        201,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950354175444119)"
    },
    {
      "trace_index": 1600,
      "trace_address": [
        11,
        1,
        3,
        1,
        201,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bebef1aef53d912e",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1601,
      "trace_address": [
        11,
        1,
        3,
        1,
        202
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be578e7a945fa2000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1602,
      "trace_address": [
        11,
        1,
        3,
        1,
        202,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251164101910622)"
    },
    {
      "trace_index": 1603,
      "trace_address": [
        11,
        1,
        3,
        1,
        202,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000df143b9ab8",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1604,
      "trace_address": [
        11,
        1,
        3,
        1,
        202,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000df143b9ab8",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1605,
      "trace_address": [
        11,
        1,
        3,
        1,
        202,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251164101910622,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1606,
      "trace_address": [
        11,
        1,
        3,
        1,
        202,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1607,
      "trace_address": [
        11,
        1,
        3,
        1,
        202,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1608,
      "trace_address": [
        11,
        1,
        3,
        1,
        202,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001284e5a75c93",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1609,
      "trace_address": [
        11,
        1,
        3,
        1,
        202,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001284e5a75c93",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1610,
      "trace_address": [
        11,
        1,
        3,
        1,
        203
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f5819a7e742ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1611,
      "trace_address": [
        11,
        1,
        3,
        1,
        203,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1612,
      "trace_address": [
        11,
        1,
        3,
        1,
        203,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1613,
      "trace_address": [
        11,
        1,
        3,
        1,
        203,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000037d493d6fd1f0d0",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1614,
      "trace_address": [
        11,
        1,
        3,
        1,
        203,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950355965929282,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1615,
      "trace_address": [
        11,
        1,
        3,
        1,
        203,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950355965929282)"
    },
    {
      "trace_index": 1616,
      "trace_address": [
        11,
        1,
        3,
        1,
        203,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bec888958979d812",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1617,
      "trace_address": [
        11,
        1,
        3,
        1,
        204
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be578e0fe133c9000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1618,
      "trace_address": [
        11,
        1,
        3,
        1,
        204,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251165892037687)"
    },
    {
      "trace_index": 1619,
      "trace_address": [
        11,
        1,
        3,
        1,
        204,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000dffb8b8c93",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1620,
      "trace_address": [
        11,
        1,
        3,
        1,
        204,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000dffb8b8c93",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1621,
      "trace_address": [
        11,
        1,
        3,
        1,
        204,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251165892037687,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1622,
      "trace_address": [
        11,
        1,
        3,
        1,
        204,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1623,
      "trace_address": [
        11,
        1,
        3,
        1,
        204,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1624,
      "trace_address": [
        11,
        1,
        3,
        1,
        204,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001285ccf74e6e",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1625,
      "trace_address": [
        11,
        1,
        3,
        1,
        204,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001285ccf74e6e",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1626,
      "trace_address": [
        11,
        1,
        3,
        1,
        205
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f58846089eaffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1627,
      "trace_address": [
        11,
        1,
        3,
        1,
        205,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1628,
      "trace_address": [
        11,
        1,
        3,
        1,
        205,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1629,
      "trace_address": [
        11,
        1,
        3,
        1,
        205,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000386e023995b0bdb",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1630,
      "trace_address": [
        11,
        1,
        3,
        1,
        205,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950357756414442,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1631,
      "trace_address": [
        11,
        1,
        3,
        1,
        205,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950357756414442)"
    },
    {
      "trace_index": 1632,
      "trace_address": [
        11,
        1,
        3,
        1,
        205,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bed21f7c1dbb95c5",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1633,
      "trace_address": [
        11,
        1,
        3,
        1,
        206
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be578da52e07f1000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1634,
      "trace_address": [
        11,
        1,
        3,
        1,
        206,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251167682164751)"
    },
    {
      "trace_index": 1635,
      "trace_address": [
        11,
        1,
        3,
        1,
        206,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000e0e2db7e6e",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1636,
      "trace_address": [
        11,
        1,
        3,
        1,
        206,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000e0e2db7e6e",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1637,
      "trace_address": [
        11,
        1,
        3,
        1,
        206,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251167682164751,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1638,
      "trace_address": [
        11,
        1,
        3,
        1,
        206,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1639,
      "trace_address": [
        11,
        1,
        3,
        1,
        206,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1640,
      "trace_address": [
        11,
        1,
        3,
        1,
        206,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001286b4474049",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1641,
      "trace_address": [
        11,
        1,
        3,
        1,
        206,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001286b4474049",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1642,
      "trace_address": [
        11,
        1,
        3,
        1,
        207
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f58ef192c95ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1643,
      "trace_address": [
        11,
        1,
        3,
        1,
        207,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1644,
      "trace_address": [
        11,
        1,
        3,
        1,
        207,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1645,
      "trace_address": [
        11,
        1,
        3,
        1,
        207,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000003907709c2e99db6",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1646,
      "trace_address": [
        11,
        1,
        3,
        1,
        207,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950359546899605,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1647,
      "trace_address": [
        11,
        1,
        3,
        1,
        207,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950359546899605)"
    },
    {
      "trace_index": 1648,
      "trace_address": [
        11,
        1,
        3,
        1,
        207,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bedbb662b202ca4b",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1649,
      "trace_address": [
        11,
        1,
        3,
        1,
        208
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be578d3a7adc17000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1650,
      "trace_address": [
        11,
        1,
        3,
        1,
        208,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251169472291817)"
    },
    {
      "trace_index": 1651,
      "trace_address": [
        11,
        1,
        3,
        1,
        208,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000e1ca2b7049",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1652,
      "trace_address": [
        11,
        1,
        3,
        1,
        208,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000e1ca2b7049",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1653,
      "trace_address": [
        11,
        1,
        3,
        1,
        208,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251169472291817,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1654,
      "trace_address": [
        11,
        1,
        3,
        1,
        208,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1655,
      "trace_address": [
        11,
        1,
        3,
        1,
        208,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1656,
      "trace_address": [
        11,
        1,
        3,
        1,
        208,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012879b973224",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1657,
      "trace_address": [
        11,
        1,
        3,
        1,
        208,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012879b973224",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1658,
      "trace_address": [
        11,
        1,
        3,
        1,
        209
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f5959d1cf3fffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1659,
      "trace_address": [
        11,
        1,
        3,
        1,
        209,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1660,
      "trace_address": [
        11,
        1,
        3,
        1,
        209,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1661,
      "trace_address": [
        11,
        1,
        3,
        1,
        209,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000039a0defec7da662",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1662,
      "trace_address": [
        11,
        1,
        3,
        1,
        209,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950361337384767,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1663,
      "trace_address": [
        11,
        1,
        3,
        1,
        209,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950361337384767)"
    },
    {
      "trace_index": 1664,
      "trace_address": [
        11,
        1,
        3,
        1,
        209,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bee54d49464f75a1",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1665,
      "trace_address": [
        11,
        1,
        3,
        1,
        210
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be578ccfc7b03e000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1666,
      "trace_address": [
        11,
        1,
        3,
        1,
        210,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251171262418882)"
    },
    {
      "trace_index": 1667,
      "trace_address": [
        11,
        1,
        3,
        1,
        210,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000e2b17b6224",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1668,
      "trace_address": [
        11,
        1,
        3,
        1,
        210,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000e2b17b6224",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1669,
      "trace_address": [
        11,
        1,
        3,
        1,
        210,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251171262418882,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1670,
      "trace_address": [
        11,
        1,
        3,
        1,
        210,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1671,
      "trace_address": [
        11,
        1,
        3,
        1,
        210,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1672,
      "trace_address": [
        11,
        1,
        3,
        1,
        210,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000128882e723ff",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1673,
      "trace_address": [
        11,
        1,
        3,
        1,
        210,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000128882e723ff",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1674,
      "trace_address": [
        11,
        1,
        3,
        1,
        211
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f59c48a71ebffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1675,
      "trace_address": [
        11,
        1,
        3,
        1,
        211,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1676,
      "trace_address": [
        11,
        1,
        3,
        1,
        211,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1677,
      "trace_address": [
        11,
        1,
        3,
        1,
        211,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000003a3a4d6161725df",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1678,
      "trace_address": [
        11,
        1,
        3,
        1,
        211,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950363127869931,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1679,
      "trace_address": [
        11,
        1,
        3,
        1,
        211,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950363127869931)"
    },
    {
      "trace_index": 1680,
      "trace_address": [
        11,
        1,
        3,
        1,
        211,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000beeee42fdaa197ca",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1681,
      "trace_address": [
        11,
        1,
        3,
        1,
        212
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be578c65148463000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1682,
      "trace_address": [
        11,
        1,
        3,
        1,
        212,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251173052545949)"
    },
    {
      "trace_index": 1683,
      "trace_address": [
        11,
        1,
        3,
        1,
        212,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000e398cb53ff",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1684,
      "trace_address": [
        11,
        1,
        3,
        1,
        212,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000e398cb53ff",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1685,
      "trace_address": [
        11,
        1,
        3,
        1,
        212,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251173052545949,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1686,
      "trace_address": [
        11,
        1,
        3,
        1,
        212,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1687,
      "trace_address": [
        11,
        1,
        3,
        1,
        212,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1688,
      "trace_address": [
        11,
        1,
        3,
        1,
        212,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012896a3715da",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1689,
      "trace_address": [
        11,
        1,
        3,
        1,
        212,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000012896a3715da",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1690,
      "trace_address": [
        11,
        1,
        3,
        1,
        213
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f5a2f431496ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1691,
      "trace_address": [
        11,
        1,
        3,
        1,
        213,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1692,
      "trace_address": [
        11,
        1,
        3,
        1,
        213,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1693,
      "trace_address": [
        11,
        1,
        3,
        1,
        213,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000003ad3bbc3fb61c2d",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1694,
      "trace_address": [
        11,
        1,
        3,
        1,
        213,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950364918355094,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1695,
      "trace_address": [
        11,
        1,
        3,
        1,
        213,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950364918355094)"
    },
    {
      "trace_index": 1696,
      "trace_address": [
        11,
        1,
        3,
        1,
        213,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bef87b166ef930c3",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1697,
      "trace_address": [
        11,
        1,
        3,
        1,
        214
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be578bfa615889000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1698,
      "trace_address": [
        11,
        1,
        3,
        1,
        214,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251174842673015)"
    },
    {
      "trace_index": 1699,
      "trace_address": [
        11,
        1,
        3,
        1,
        214,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000e4801b45da",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1700,
      "trace_address": [
        11,
        1,
        3,
        1,
        214,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000e4801b45da",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1701,
      "trace_address": [
        11,
        1,
        3,
        1,
        214,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251174842673015,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1702,
      "trace_address": [
        11,
        1,
        3,
        1,
        214,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1703,
      "trace_address": [
        11,
        1,
        3,
        1,
        214,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1704,
      "trace_address": [
        11,
        1,
        3,
        1,
        214,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000128a518707b5",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1705,
      "trace_address": [
        11,
        1,
        3,
        1,
        214,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000128a518707b5",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1706,
      "trace_address": [
        11,
        1,
        3,
        1,
        215
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bb4b3f5a99fbb742ffffffffffffffffffffffffffffffffffffffffffffffffffffee5b15e43000",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1707,
      "trace_address": [
        11,
        1,
        3,
        1,
        215,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1708,
      "trace_address": [
        11,
        1,
        3,
        1,
        215,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)"
    },
    {
      "trace_index": 1709,
      "trace_address": [
        11,
        1,
        3,
        1,
        215,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000003b6d2a2695a894c",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1710,
      "trace_address": [
        11,
        1,
        3,
        1,
        215,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=13495950366708840258,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1711,
      "trace_address": [
        11,
        1,
        3,
        1,
        215,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950366708840258)"
    },
    {
      "trace_index": 1712,
      "trace_address": [
        11,
        1,
        3,
        1,
        215,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000bf0211fd0356408e",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1713,
      "trace_address": [
        11,
        1,
        3,
        1,
        216
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffff44be578b8fae2cae000000000000000000000000000000000000000000000000000011a5d16bc1db",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1714,
      "trace_address": [
        11,
        1,
        3,
        1,
        216,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251176632800082)"
    },
    {
      "trace_index": 1715,
      "trace_address": [
        11,
        1,
        3,
        1,
        216,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000e5676b37b5",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1716,
      "trace_address": [
        11,
        1,
        3,
        1,
        216,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000e5676b37b5",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1717,
      "trace_address": [
        11,
        1,
        3,
        1,
        216,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-13493251176632800082,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1718,
      "trace_address": [
        11,
        1,
        3,
        1,
        216,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1719,
      "trace_address": [
        11,
        1,
        3,
        1,
        216,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)"
    },
    {
      "trace_index": 1720,
      "trace_address": [
        11,
        1,
        3,
        1,
        216,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000128b38d6f990",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1721,
      "trace_address": [
        11,
        1,
        3,
        1,
        216,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000128b38d6f990",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1722,
      "trace_address": [
        11,
        1,
        3,
        1,
        217
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff5f334cb500000000000000000000000000000000000000000000000000000000000186a0",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=100000,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1723,
      "trace_address": [
        11,
        1,
        3,
        1,
        217,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=2697769803)"
    },
    {
      "trace_index": 1724,
      "trace_address": [
        11,
        1,
        3,
        1,
        217,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000128b38d6f990",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1725,
      "trace_address": [
        11,
        1,
        3,
        1,
        217,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000128b38d6f990",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1726,
      "trace_address": [
        11,
        1,
        3,
        1,
        217,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=-2697769803,int256=100000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1727,
      "trace_address": [
        11,
        1,
        3,
        1,
        217,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=100000)"
    },
    {
      "trace_index": 1728,
      "trace_address": [
        11,
        1,
        3,
        1,
        217,
        2,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=100000)"
    },
    {
      "trace_index": 1729,
      "trace_address": [
        11,
        1,
        3,
        1,
        217,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000128b38d88030",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1730,
      "trace_address": [
        11,
        1,
        3,
        1,
        217,
        3,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000128b38d88030",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1731,
      "trace_address": [
        11,
        1,
        3,
        1,
        218
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000002c9b4ef079368fa1847f5000000000000000000000000000000000000000000000003424b15b68b7aff0e00000000000000000000000000000000000000000000000000000055d59b008f000000000000000000000000000000000000000000000003427b07b726a55f820000000000000000000000000000000000000000000000000000005a5a1c6c61000000000000000000000000000000000000000000000003424b15b68b7aff0e00000000000000000000000000000000000000000000000000000055d59b008f",
      "subtraces": 4,
      "decoded_input": "getPositionData(uint256=255,uint256=1183215960000000000)"
    },
    {
      "trace_index": 1732,
      "trace_address": [
        11,
        1,
        3,
        1,
        218,
        0
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)"
    },
    {
      "trace_index": 1733,
      "trace_address": [
        11,
        1,
        3,
        1,
        218,
        1
      ],
      "call_type": "call",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0,
      "decoded_input": "burn(int24=-196216,int24=-102028,uint128=0)"
    },
    {
      "trace_index": 1734,
      "trace_address": [
        11,
        1,
        3,
        1,
        218,
        2
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000bc729c7751ed7000000000000000000000000000000516a4917c91a647f8b35e650617f69b1c4000000000000000000000000000000000007ac3f935aa006f90dbea1cdb67b5100000000000000000000000000000000000000000000000003bee80c1f4f89010000000000000000000000000000000000000000000000000000005a5a1c6c61",
      "subtraces": 0,
      "decoded_input": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)"
    },
    {
      "trace_index": 1735,
      "trace_address": [
        11,
        1,
        3,
        1,
        218,
        3
      ],
      "call_type": "call",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000002c9b4ef079368fa1847f5",
      "subtraces": 6
    },
    {
      "trace_index": 1736,
      "trace_address": [
        11,
        1,
        3,
        1,
        218,
        3,
        0
      ],
      "call_type": "staticcall",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000002a2297cc40",
      "subtraces": 1,
      "decoded_input": "latestAnswer()"
    },
    {
      "trace_index": 1737,
      "trace_address": [
        11,
        1,
        3,
        1,
        218,
        3,
        0,
        0
      ],
      "call_type": "staticcall",
      "from": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70",
      "to": "0x57d2d46fc7ff2a7142d479f2f59e1e3f95447077",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000002a2297cc40",
      "subtraces": 0,
      "decoded_input": "latestAnswer()"
    },
    {
      "trace_index": 1738,
      "trace_address": [
        11,
        1,
        3,
        1,
        218,
        3,
        1
      ],
      "call_type": "staticcall",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000005f5e4e8",
      "subtraces": 1,
      "decoded_input": "latestAnswer()"
    },
    {
      "trace_index": 1739,
      "trace_address": [
        11,
        1,
        3,
        1,
        218,
        3,
        1,
        0
      ],
      "call_type": "staticcall",
      "from": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
      "to": "0x0ee7145e1370653533e2f2e824424be2aa95a4aa",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000005f5e4e8",
      "subtraces": 0,
      "decoded_input": "latestAnswer()"
    },
    {
      "trace_index": 1740,
      "trace_address": [
        11,
        1,
        3,
        1,
        218,
        3,
        2
      ],
      "call_type": "staticcall",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000008",
      "subtraces": 1,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1741,
      "trace_address": [
        11,
        1,
        3,
        1,
        218,
        3,
        2,
        0
      ],
      "call_type": "staticcall",
      "from": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70",
      "to": "0x57d2d46fc7ff2a7142d479f2f59e1e3f95447077",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000008",
      "subtraces": 0,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1742,
      "trace_address": [
        11,
        1,
        3,
        1,
        218,
        3,
        3
      ],
      "call_type": "staticcall",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000012",
      "subtraces": 0,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1743,
      "trace_address": [
        11,
        1,
        3,
        1,
        218,
        3,
        4
      ],
      "call_type": "staticcall",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000008",
      "subtraces": 1,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1744,
      "trace_address": [
        11,
        1,
        3,
        1,
        218,
        3,
        4,
        0
      ],
      "call_type": "staticcall",
      "from": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
      "to": "0x0ee7145e1370653533e2f2e824424be2aa95a4aa",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000008",
      "subtraces": 0,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1745,
      "trace_address": [
        11,
        1,
        3,
        1,
        218,
        3,
        5
      ],
      "call_type": "staticcall",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000006",
      "subtraces": 1,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1746,
      "trace_address": [
        11,
        1,
        3,
        1,
        218,
        3,
        5,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000006",
      "subtraces": 0,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1747,
      "trace_address": [
        11,
        1,
        3,
        1,
        219
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000e27c49886e60000",
      "subtraces": 0,
      "decoded_input": "liquidationPenalty()"
    },
    {
      "trace_index": 1748,
      "trace_address": [
        11,
        1,
        3,
        1,
        220
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000023b9f22b8df60602109",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 1749,
      "trace_address": [
        11,
        1,
        3,
        1,
        221
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000001e0462a7738c0f471",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)"
    },
    {
      "trace_index": 1750,
      "trace_address": [
        11,
        1,
        3,
        1,
        222
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000001e0462a7738c0f471",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)"
    },
    {
      "trace_index": 1751,
      "trace_address": [
        11,
        1,
        3,
        1,
        223
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee,uint256=166988030575033714385)"
    },
    {
      "trace_index": 1752,
      "trace_address": [
        11,
        1,
        3,
        1,
        224
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000008ee66933cfe5bf808",
      "subtraces": 3,
      "decoded_input": "mint(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 1753,
      "trace_address": [
        11,
        1,
        3,
        1,
        224,
        0
      ],
      "call_type": "staticcall",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000aedb2d3887fb4fb42",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)"
    },
    {
      "trace_index": 1754,
      "trace_address": [
        11,
        1,
        3,
        1,
        224,
        1
      ],
      "call_type": "staticcall",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x175712cd666fbcfe8b69866a3088d7bf17a47685",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000d3080518e5678dc5464b7d4079d1046929985c59",
      "subtraces": 0,
      "decoded_input": "reservesManager()"
    },
    {
      "trace_index": 1755,
      "trace_address": [
        11,
        1,
        3,
        1,
        224,
        2
      ],
      "call_type": "staticcall",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000aedb2d3887fb4fb42",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)"
    },
    {
      "trace_index": 1756,
      "trace_address": [
        11,
        1,
        3,
        1,
        225
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000aedb2d3887fb4fb42",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)"
    },
    {
      "trace_index": 1757,
      "trace_address": [
        11,
        1,
        3,
        1,
        226
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000aedb2d3887fb4fb42",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)"
    },
    {
      "trace_index": 1758,
      "trace_address": [
        11,
        1,
        3,
        1,
        227
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 5
    },
    {
      "trace_index": 1759,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        0
      ],
      "call_type": "staticcall",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000098e938899902217465f17cf0b76d12b3dca8ce1b",
      "subtraces": 0,
      "decoded_input": "ownerOf(uint256=255)"
    },
    {
      "trace_index": 1760,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        1
      ],
      "call_type": "call",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=201595425653150513986)"
    },
    {
      "trace_index": 1761,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        2
      ],
      "call_type": "staticcall",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)"
    },
    {
      "trace_index": 1762,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        3
      ],
      "call_type": "call",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 3
    },
    {
      "trace_index": 1763,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        3,
        0
      ],
      "call_type": "staticcall",
      "from": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000c1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "subtraces": 0,
      "decoded_input": "ownerOf(uint256=255)"
    },
    {
      "trace_index": 1764,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        3,
        1
      ],
      "call_type": "call",
      "from": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "to": "0xbc303acda8b2a0dcd3d17f05adddf854edd6da59",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0
    },
    {
      "trace_index": 1765,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        3,
        2
      ],
      "call_type": "call",
      "from": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000002c9b4ef079368fa1847f5000000000000000000000000000000000000000000000003424b15b68b7aff0e00000000000000000000000000000000000000000000000000000055d59b008f000000000000000000000000000000000000000000000003427b07b726a55f820000000000000000000000000000000000000000000000000000005a5a1c6c61000000000000000000000000000000000000000000000003424b15b68b7aff0e00000000000000000000000000000000000000000000000000000055d59b008f",
      "subtraces": 4,
      "decoded_input": "getPositionData(uint256=255,uint256=1183215960000000000)"
    },
    {
      "trace_index": 1766,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        3,
        2,
        0
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)"
    },
    {
      "trace_index": 1767,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        3,
        2,
        1
      ],
      "call_type": "call",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0,
      "decoded_input": "burn(int24=-196216,int24=-102028,uint128=0)"
    },
    {
      "trace_index": 1768,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        3,
        2,
        2
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000bc729c7751ed7000000000000000000000000000000516a4917c91a647f8b35e650617f69b1c4000000000000000000000000000000000007ac3f935aa006f90dbea1cdb67b5100000000000000000000000000000000000000000000000003bee80c1f4f89010000000000000000000000000000000000000000000000000000005a5a1c6c61",
      "subtraces": 0,
      "decoded_input": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)"
    },
    {
      "trace_index": 1769,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        3,
        2,
        3
      ],
      "call_type": "call",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000002c9b4ef079368fa1847f5",
      "subtraces": 6
    },
    {
      "trace_index": 1770,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        3,
        2,
        3,
        0
      ],
      "call_type": "staticcall",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000002a2297cc40",
      "subtraces": 1,
      "decoded_input": "latestAnswer()"
    },
    {
      "trace_index": 1771,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        3,
        2,
        3,
        0,
        0
      ],
      "call_type": "staticcall",
      "from": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70",
      "to": "0x57d2d46fc7ff2a7142d479f2f59e1e3f95447077",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000002a2297cc40",
      "subtraces": 0,
      "decoded_input": "latestAnswer()"
    },
    {
      "trace_index": 1772,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        3,
        2,
        3,
        1
      ],
      "call_type": "staticcall",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000005f5e4e8",
      "subtraces": 1,
      "decoded_input": "latestAnswer()"
    },
    {
      "trace_index": 1773,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        3,
        2,
        3,
        1,
        0
      ],
      "call_type": "staticcall",
      "from": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
      "to": "0x0ee7145e1370653533e2f2e824424be2aa95a4aa",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000005f5e4e8",
      "subtraces": 0,
      "decoded_input": "latestAnswer()"
    },
    {
      "trace_index": 1774,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        3,
        2,
        3,
        2
      ],
      "call_type": "staticcall",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000008",
      "subtraces": 1,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1775,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        3,
        2,
        3,
        2,
        0
      ],
      "call_type": "staticcall",
      "from": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70",
      "to": "0x57d2d46fc7ff2a7142d479f2f59e1e3f95447077",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000008",
      "subtraces": 0,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1776,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        3,
        2,
        3,
        3
      ],
      "call_type": "staticcall",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000012",
      "subtraces": 0,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1777,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        3,
        2,
        3,
        4
      ],
      "call_type": "staticcall",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000008",
      "subtraces": 1,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1778,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        3,
        2,
        3,
        4,
        0
      ],
      "call_type": "staticcall",
      "from": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
      "to": "0x0ee7145e1370653533e2f2e824424be2aa95a4aa",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000008",
      "subtraces": 0,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1779,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        3,
        2,
        3,
        5
      ],
      "call_type": "staticcall",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000006",
      "subtraces": 1,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1780,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        3,
        2,
        3,
        5,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000006",
      "subtraces": 0,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1781,
      "trace_address": [
        11,
        1,
        3,
        1,
        227,
        4
      ],
      "call_type": "staticcall",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)"
    },
    {
      "trace_index": 1782,
      "trace_address": [
        11,
        1,
        3,
        1,
        228
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 9,
      "decoded_input": "reinvest(uint256=255,address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 1783,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        0
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0xe5d6cf969c01bf8d6c46840ed784d7f209038d7a",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000077eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "subtraces": 0
    },
    {
      "trace_index": 1784,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        1
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)"
    },
    {
      "trace_index": 1785,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        2
      ],
      "call_type": "call",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0,
      "decoded_input": "burn(int24=-196216,int24=-102028,uint128=0)"
    },
    {
      "trace_index": 1786,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        3
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000bc729c7751ed7000000000000000000000000000000516a4917c91a647f8b35e650617f69b1c4000000000000000000000000000000000007ac3f935aa006f90dbea1cdb67b5100000000000000000000000000000000000000000000000003bee80c1f4f89010000000000000000000000000000000000000000000000000000005a5a1c6c61",
      "subtraces": 0,
      "decoded_input": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)"
    },
    {
      "trace_index": 1787,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        4
      ],
      "call_type": "call",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000033f4d0e26340000000000000000000000000000000000000000000000000000005a5a1c6c61000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f60800000000000000000000000000000000000000000000000000000000000000c8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd0188fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe7174000000000000000000000000000000000000000000000000000bc729c7751ed700000000000000000000000000000000002b8ad9c29158cbab2d3f8140206edf0000000000000000000000000000000000000067a8b0dcb084f5141b7b7a9b4900000000000000000000000000000000000000000000000000000200ab00dc76000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff0000000000000000000000000000000000000000000000000000033f4d0e26340000000000000000000000000000000000000000000000000000005a5a1c6c6100000000000000000000000000000000000000000000000000003a80b83f04e1",
      "subtraces": 5
    },
    {
      "trace_index": 1788,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        4,
        0
      ],
      "call_type": "staticcall",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000004200000000000000000000000000000000000006",
      "subtraces": 0,
      "decoded_input": "amarettoIdealist()"
    },
    {
      "trace_index": 1789,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        4,
        1
      ],
      "call_type": "staticcall",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "subtraces": 0,
      "decoded_input": "detectabilityAntiauthoritarianism()"
    },
    {
      "trace_index": 1790,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        4,
        2
      ],
      "call_type": "staticcall",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xe5d6cf969c01bf8d6c46840ed784d7f209038d7a",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000a68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "subtraces": 0
    },
    {
      "trace_index": 1791,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        4,
        3
      ],
      "call_type": "staticcall",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 1
    },
    {
      "trace_index": 1792,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        4,
        3,
        0
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)"
    },
    {
      "trace_index": 1793,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        4,
        4
      ],
      "call_type": "staticcall",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000018ef6dd67bb2351da3af56afffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe716d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "slot0()"
    },
    {
      "trace_index": 1794,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        5
      ],
      "call_type": "call",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000033f4d0e26340000000000000000000000000000000000000000000000000000005a5a1c6c61",
      "subtraces": 2,
      "decoded_input": "collect(address=0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1,int24=-196216,int24=-102028,uint128=3570410595892,uint128=388058868833)"
    },
    {
      "trace_index": 1795,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        5,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1,uint256=3570410595892)"
    },
    {
      "trace_index": 1796,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        5,
        1
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1,uint256=388058868833)"
    },
    {
      "trace_index": 1797,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        5,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1,uint256=388058868833)"
    },
    {
      "trace_index": 1798,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        6
      ],
      "call_type": "call",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 4
    },
    {
      "trace_index": 1799,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        6,
        0
      ],
      "call_type": "staticcall",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000004200000000000000000000000000000000000006",
      "subtraces": 0,
      "decoded_input": "amarettoIdealist()"
    },
    {
      "trace_index": 1800,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        6,
        1
      ],
      "call_type": "staticcall",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "subtraces": 0,
      "decoded_input": "detectabilityAntiauthoritarianism()"
    },
    {
      "trace_index": 1801,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        6,
        2
      ],
      "call_type": "staticcall",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xe5d6cf969c01bf8d6c46840ed784d7f209038d7a",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000a68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "subtraces": 0
    },
    {
      "trace_index": 1802,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        6,
        3
      ],
      "call_type": "call",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000033f4d0e26340000000000000000000000000000000000000000000000000000005a5a1c6c61",
      "subtraces": 5,
      "decoded_input": "mint(address=0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8,int24=-196216,int24=-102028,uint128=64324521362657,bytes=0x00000000000000000000000000000000000000000000000000000000000000c80000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1803,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        6,
        3,
        0
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000003c06648a52993bd",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1804,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        6,
        3,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001230debc13cf",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1805,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        6,
        3,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000001230debc13cf",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1806,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        6,
        3,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 3,
      "decoded_input": "uniswapV3MintCallback(uint256=3570410595892,uint256=388058868833,bytes=0x00000000000000000000000000000000000000000000000000000000000000c80000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1807,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        6,
        3,
        2,
        0
      ],
      "call_type": "staticcall",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)"
    },
    {
      "trace_index": 1808,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        6,
        3,
        2,
        1
      ],
      "call_type": "call",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=3570410595892)"
    },
    {
      "trace_index": 1809,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        6,
        3,
        2,
        2
      ],
      "call_type": "call",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=388058868833)"
    },
    {
      "trace_index": 1810,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        6,
        3,
        2,
        2,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=388058868833)"
    },
    {
      "trace_index": 1811,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        6,
        3,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000003c06987f237b9f1",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1812,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        6,
        3,
        4
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000128b38d88030",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1813,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        6,
        3,
        4,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000128b38d88030",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1814,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        7
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)"
    },
    {
      "trace_index": 1815,
      "trace_address": [
        11,
        1,
        3,
        1,
        228,
        8
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000c01aa7fb423b8000000000000000000000000000000516a4917c91a647f8b35e650617f69b1c4000000000000000000000000000000000007ac3f935aa006f90dbea1cdb67b5100000000000000000000000000000000000000000000000003bee4ccd24162cd0000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0,
      "decoded_input": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)"
    },
    {
      "trace_index": 1816,
      "trace_address": [
        11,
        1,
        3,
        1,
        229
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 5
    },
    {
      "trace_index": 1817,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        0
      ],
      "call_type": "call",
      "from": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000aedb2d3887fb4fb42",
      "subtraces": 0
    },
    {
      "trace_index": 1818,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        1
      ],
      "call_type": "call",
      "from": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "to": "0xbc303acda8b2a0dcd3d17f05adddf854edd6da59",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0
    },
    {
      "trace_index": 1819,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        2
      ],
      "call_type": "call",
      "from": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000002c9b4ef079368fa1847f5000000000000000000000000000000000000000000000003526971b3694d8a4400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035299638a73d0cf350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003526971b3694d8a440000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 4,
      "decoded_input": "getPositionData(uint256=255,uint256=1183215960000000000)"
    },
    {
      "trace_index": 1820,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        2,
        0
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)"
    },
    {
      "trace_index": 1821,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        2,
        1
      ],
      "call_type": "call",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0,
      "decoded_input": "burn(int24=-196216,int24=-102028,uint128=0)"
    },
    {
      "trace_index": 1822,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        2,
        2
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000c01aa7fb423b8000000000000000000000000000000516a4917c91a647f8b35e650617f69b1c4000000000000000000000000000000000007ac3f935aa006f90dbea1cdb67b5100000000000000000000000000000000000000000000000003bee4ccd24162cd0000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0,
      "decoded_input": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)"
    },
    {
      "trace_index": 1823,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        2,
        3
      ],
      "call_type": "call",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000002c9b4ef079368fa1847f5",
      "subtraces": 6
    },
    {
      "trace_index": 1824,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        2,
        3,
        0
      ],
      "call_type": "staticcall",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000002a2297cc40",
      "subtraces": 1,
      "decoded_input": "latestAnswer()"
    },
    {
      "trace_index": 1825,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        2,
        3,
        0,
        0
      ],
      "call_type": "staticcall",
      "from": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70",
      "to": "0x57d2d46fc7ff2a7142d479f2f59e1e3f95447077",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000002a2297cc40",
      "subtraces": 0,
      "decoded_input": "latestAnswer()"
    },
    {
      "trace_index": 1826,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        2,
        3,
        1
      ],
      "call_type": "staticcall",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000005f5e4e8",
      "subtraces": 1,
      "decoded_input": "latestAnswer()"
    },
    {
      "trace_index": 1827,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        2,
        3,
        1,
        0
      ],
      "call_type": "staticcall",
      "from": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
      "to": "0x0ee7145e1370653533e2f2e824424be2aa95a4aa",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000005f5e4e8",
      "subtraces": 0,
      "decoded_input": "latestAnswer()"
    },
    {
      "trace_index": 1828,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        2,
        3,
        2
      ],
      "call_type": "staticcall",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000008",
      "subtraces": 1,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1829,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        2,
        3,
        2,
        0
      ],
      "call_type": "staticcall",
      "from": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70",
      "to": "0x57d2d46fc7ff2a7142d479f2f59e1e3f95447077",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000008",
      "subtraces": 0,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1830,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        2,
        3,
        3
      ],
      "call_type": "staticcall",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000012",
      "subtraces": 0,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1831,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        2,
        3,
        4
      ],
      "call_type": "staticcall",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000008",
      "subtraces": 1,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1832,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        2,
        3,
        4,
        0
      ],
      "call_type": "staticcall",
      "from": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
      "to": "0x0ee7145e1370653533e2f2e824424be2aa95a4aa",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000008",
      "subtraces": 0,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1833,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        2,
        3,
        5
      ],
      "call_type": "staticcall",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000006",
      "subtraces": 1,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1834,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        2,
        3,
        5,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000006",
      "subtraces": 0,
      "decoded_input": "decimals()"
    },
    {
      "trace_index": 1835,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        3
      ],
      "call_type": "call",
      "from": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1
    },
    {
      "trace_index": 1836,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        3,
        0
      ],
      "call_type": "staticcall",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)"
    },
    {
      "trace_index": 1837,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        4
      ],
      "call_type": "call",
      "from": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "to": "0xbc303acda8b2a0dcd3d17f05adddf854edd6da59",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1
    },
    {
      "trace_index": 1838,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        4,
        0
      ],
      "call_type": "staticcall",
      "from": "0xbc303acda8b2a0dcd3d17f05adddf854edd6da59",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000069264d9a2",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0xbc303acda8b2a0dcd3d17f05adddf854edd6da59)"
    },
    {
      "trace_index": 1839,
      "trace_address": [
        11,
        1,
        3,
        1,
        229,
        4,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000000000069264d9a2",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0xbc303acda8b2a0dcd3d17f05adddf854edd6da59)"
    },
    {
      "trace_index": 1840,
      "trace_address": [
        11,
        1,
        3,
        1,
        230
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000341ebb6ec213b2567",
      "subtraces": 0
    },
    {
      "trace_index": 1841,
      "trace_address": [
        11,
        1,
        3,
        1,
        231
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee,uint256=60090323578407036263)"
    },
    {
      "trace_index": 1842,
      "trace_address": [
        11,
        1,
        3,
        1,
        232
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 2
    },
    {
      "trace_index": 1843,
      "trace_address": [
        11,
        1,
        3,
        1,
        232,
        0
      ],
      "call_type": "staticcall",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000341ebb6ec213b2567",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)"
    },
    {
      "trace_index": 1844,
      "trace_address": [
        11,
        1,
        3,
        1,
        232,
        1
      ],
      "call_type": "staticcall",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000341ebb6ec213b2567",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)"
    },
    {
      "trace_index": 1845,
      "trace_address": [
        11,
        1,
        3,
        1,
        233
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000000000000000000ff",
      "subtraces": 3,
      "decoded_input": "redeem(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=255,uint256=1000000000000000000)"
    },
    {
      "trace_index": 1846,
      "trace_address": [
        11,
        1,
        3,
        1,
        233,
        0
      ],
      "call_type": "call",
      "from": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "safeTransferFrom(address=0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d,address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=255)"
    },
    {
      "trace_index": 1847,
      "trace_address": [
        11,
        1,
        3,
        1,
        233,
        0,
        0
      ],
      "call_type": "call",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x150b7a0200000000000000000000000000000000000000000000000000000000",
      "subtraces": 0,
      "decoded_input": "onERC721Received(address=0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d,address=0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d,uint256=255,bytes=0x)"
    },
    {
      "trace_index": 1848,
      "trace_address": [
        11,
        1,
        3,
        1,
        233,
        1
      ],
      "call_type": "staticcall",
      "from": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0
    },
    {
      "trace_index": 1849,
      "trace_address": [
        11,
        1,
        3,
        1,
        233,
        2
      ],
      "call_type": "staticcall",
      "from": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "to": "0xbc303acda8b2a0dcd3d17f05adddf854edd6da59",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0
    },
    {
      "trace_index": 1850,
      "trace_address": [
        11,
        1,
        3,
        1,
        234
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000003bf8f685b5d74b80000000000000000000000000000000000000000000000000000128afbafab65",
      "subtraces": 6,
      "decoded_input": "redeem(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=255)"
    },
    {
      "trace_index": 1851,
      "trace_address": [
        11,
        1,
        3,
        1,
        234,
        0
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)"
    },
    {
      "trace_index": 1852,
      "trace_address": [
        11,
        1,
        3,
        1,
        234,
        1
      ],
      "call_type": "call",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000aa9b891c11eb0000000000000000000000000000000000000000000000000000128afbafab65",
      "subtraces": 0,
      "decoded_input": "burn(int24=-196216,int24=-102028,uint128=3379531519108024)"
    },
    {
      "trace_index": 1853,
      "trace_address": [
        11,
        1,
        3,
        1,
        234,
        2
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000001c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)"
    },
    {
      "trace_index": 1854,
      "trace_address": [
        11,
        1,
        3,
        1,
        234,
        3
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000516a4917c91a647f8b35e650617f69b1c4000000000000000000000000000000000007ac3f935aa006f90dbea1cdb67b5100000000000000000000000000000000000000000000000003bf8f685b5d74b80000000000000000000000000000000000000000000000000000128afbafab65",
      "subtraces": 0,
      "decoded_input": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)"
    },
    {
      "trace_index": 1855,
      "trace_address": [
        11,
        1,
        3,
        1,
        234,
        4
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000516a4917c91a647f8b35e650617f69b1c4000000000000000000000000000000000007ac3f935aa006f90dbea1cdb67b5100000000000000000000000000000000000000000000000003bf8f685b5d74b80000000000000000000000000000000000000000000000000000128afbafab65",
      "subtraces": 0,
      "decoded_input": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)"
    },
    {
      "trace_index": 1856,
      "trace_address": [
        11,
        1,
        3,
        1,
        234,
        5
      ],
      "call_type": "call",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000003bf8f685b5d74b80000000000000000000000000000000000000000000000000000128afbafab65",
      "subtraces": 2,
      "decoded_input": "collect(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,int24=-196216,int24=-102028,uint128=270092181037741240,uint128=20388137380709)"
    },
    {
      "trace_index": 1857,
      "trace_address": [
        11,
        1,
        3,
        1,
        234,
        5,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=270092181037741240)"
    },
    {
      "trace_index": 1858,
      "trace_address": [
        11,
        1,
        3,
        1,
        234,
        5,
        1
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=20388137380709)"
    },
    {
      "trace_index": 1859,
      "trace_address": [
        11,
        1,
        3,
        1,
        234,
        5,
        1,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=20388137380709)"
    },
    {
      "trace_index": 1860,
      "trace_address": [
        11,
        1,
        3,
        1,
        235
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000032a99398c616beffffffffffffffffffffffffffffffffffffffffffffffffffffffffc46843d8",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=14260200223938238,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1861,
      "trace_address": [
        11,
        1,
        3,
        1,
        235,
        0
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=999799848)"
    },
    {
      "trace_index": 1862,
      "trace_address": [
        11,
        1,
        3,
        1,
        235,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=999799848)"
    },
    {
      "trace_index": 1863,
      "trace_address": [
        11,
        1,
        3,
        1,
        235,
        1
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000da1f96da4539",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1864,
      "trace_address": [
        11,
        1,
        3,
        1,
        235,
        2
      ],
      "call_type": "call",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=14260200223938238,int256=-999799848,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1865,
      "trace_address": [
        11,
        1,
        3,
        1,
        235,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=14260200223938238)"
    },
    {
      "trace_index": 1866,
      "trace_address": [
        11,
        1,
        3,
        1,
        235,
        3
      ],
      "call_type": "staticcall",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000000003383b32fa05bf7",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)"
    },
    {
      "trace_index": 1867,
      "trace_address": [
        11,
        1,
        3,
        1,
        236
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000341ebb6ec213b2567",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)"
    },
    {
      "trace_index": 1868,
      "trace_address": [
        11,
        1,
        3,
        1,
        237
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000006e56dc701211054",
      "subtraces": 0,
      "decoded_input": "exchangeRate()"
    },
    {
      "trace_index": 1869,
      "trace_address": [
        11,
        1,
        3,
        1,
        238
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000008ee66933cfe5bf808",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 1870,
      "trace_address": [
        11,
        1,
        3,
        1,
        239
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee,uint256=120924566533707506470)"
    },
    {
      "trace_index": 1871,
      "trace_address": [
        11,
        1,
        3,
        1,
        240
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000000341ebb6ec213b2566",
      "subtraces": 2,
      "decoded_input": "redeem(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 1872,
      "trace_address": [
        11,
        1,
        3,
        1,
        240,
        0
      ],
      "call_type": "call",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=60090323578407036262)"
    },
    {
      "trace_index": 1873,
      "trace_address": [
        11,
        1,
        3,
        1,
        240,
        1
      ],
      "call_type": "staticcall",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)"
    },
    {
      "trace_index": 1874,
      "trace_address": [
        11,
        1,
        3,
        1,
        241
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000d0b53d9277642d899df5c87a3966a349a798f224",
      "subtraces": 1
    },
    {
      "trace_index": 1875,
      "trace_address": [
        11,
        1,
        3,
        1,
        241,
        0
      ],
      "call_type": "staticcall",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000d0b53d9277642d899df5c87a3966a349a798f224",
      "subtraces": 0,
      "decoded_input": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=500)"
    },
    {
      "trace_index": 1876,
      "trace_address": [
        11,
        1,
        3,
        1,
        242
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000023d82f5c92b5bb87373",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 1877,
      "trace_address": [
        11,
        1,
        3,
        1,
        243
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000147fef4d58f3",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 1878,
      "trace_address": [
        11,
        1,
        3,
        1,
        243,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000147fef4d58f3",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 1879,
      "trace_address": [
        11,
        1,
        3,
        1,
        244
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xd0b53d9277642d899df5c87a3966a349a798f224",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000026cccc18b5d02efffffffffffffffffffffffffffffffffffffffffffffffffffffffffed27947",
      "subtraces": 4,
      "decoded_input": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19760825,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1880,
      "trace_address": [
        11,
        1,
        3,
        1,
        244,
        0
      ],
      "call_type": "call",
      "from": "0xd0b53d9277642d899df5c87a3966a349a798f224",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19760825)"
    },
    {
      "trace_index": 1881,
      "trace_address": [
        11,
        1,
        3,
        1,
        244,
        0,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19760825)"
    },
    {
      "trace_index": 1882,
      "trace_address": [
        11,
        1,
        3,
        1,
        244,
        1
      ],
      "call_type": "staticcall",
      "from": "0xd0b53d9277642d899df5c87a3966a349a798f224",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000eae8f28e8c8d62eb5a",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0xd0b53d9277642d899df5c87a3966a349a798f224)"
    },
    {
      "trace_index": 1883,
      "trace_address": [
        11,
        1,
        3,
        1,
        244,
        2
      ],
      "call_type": "call",
      "from": "0xd0b53d9277642d899df5c87a3966a349a798f224",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "uniswapV3SwapCallback(int256=10921226074968110,int256=-19760825,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)"
    },
    {
      "trace_index": 1884,
      "trace_address": [
        11,
        1,
        3,
        1,
        244,
        2,
        0
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transfer(address=0xd0b53d9277642d899df5c87a3966a349a798f224,uint256=10921226074968110)"
    },
    {
      "trace_index": 1885,
      "trace_address": [
        11,
        1,
        3,
        1,
        244,
        3
      ],
      "call_type": "staticcall",
      "from": "0xd0b53d9277642d899df5c87a3966a349a798f224",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000eae9195b58a618bb88",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0xd0b53d9277642d899df5c87a3966a349a798f224)"
    },
    {
      "trace_index": 1886,
      "trace_address": [
        11,
        1,
        3,
        1,
        245
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x00000000000000000000000000000000000000000000023d82cefc5f4302a345",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 1887,
      "trace_address": [
        11,
        1,
        3,
        1,
        246
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000147ff07adfac",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 1888,
      "trace_address": [
        11,
        1,
        3,
        1,
        246,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000147ff07adfac",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 1889,
      "trace_address": [
        11,
        1,
        3,
        2
      ],
      "call_type": "call",
      "from": "0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 1,
      "decoded_input": "transferFrom(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb,uint256=22539727986604)"
    },
    {
      "trace_index": 1890,
      "trace_address": [
        11,
        1,
        3,
        2,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transferFrom(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb,uint256=22539727986604)"
    },
    {
      "trace_index": 1891,
      "trace_address": [
        11,
        2
      ],
      "call_type": "call",
      "from": "0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000001",
      "subtraces": 0,
      "decoded_input": "transferFrom(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb,uint256=10544813644832897955984)"
    },
    {
      "trace_index": 1892,
      "trace_address": [
        12
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xd0b53d9277642d899df5c87a3966a349a798f224",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000004200000000000000000000000000000000000006",
      "subtraces": 0,
      "decoded_input": "amarettoIdealist()"
    },
    {
      "trace_index": 1893,
      "trace_address": [
        13
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xd0b53d9277642d899df5c87a3966a349a798f224",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "subtraces": 0,
      "decoded_input": "detectabilityAntiauthoritarianism()"
    },
    {
      "trace_index": 1894,
      "trace_address": [
        14
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 1895,
      "trace_address": [
        14,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 1896,
      "trace_address": [
        15
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000001e01f4f36b60baab5",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 1897,
      "trace_address": [
        16
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x000000000000000000000000000000000000000000000001e01f4f36b60baab5",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 1898,
      "trace_address": [
        17
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x",
      "subtraces": 1,
      "decoded_input": "withdraw(uint256=34596457958884485813)"
    },
    {
      "trace_index": 1899,
      "trace_address": [
        17,
        0
      ],
      "call_type": "call",
      "from": "0x4200000000000000000000000000000000000006",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 34596457958884485813,
      "value_eth": 34.596457958884486,
      "output": "0x",
      "subtraces": 0
    },
    {
      "trace_index": 1900,
      "trace_address": [
        18
      ],
      "call_type": "call",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xe9f853d2616ac6b04e5fc2b4be6eb654b9f224cd",
      "value": 34596457958884485813,
      "value_eth": 34.596457958884486,
      "output": "0x",
      "subtraces": 0
    },
    {
      "trace_index": 1901,
      "trace_address": [
        19
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 1902,
      "trace_address": [
        20
      ],
      "call_type": "staticcall",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 1,
      "decoded_input": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    },
    {
      "trace_index": 1903,
      "trace_address": [
        20,
        0
      ],
      "call_type": "delegatecall",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "value": 0,
      "value_eth": 0.0,
      "output": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "subtraces": 0,
      "decoded_input": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)"
    }
  ],
  "addresses_involved": [
    "0xe3223f7e3343c2c8079f261d59ee1e513086c7c3",
    "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
    "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
    "0x175712cd666fbcfe8b69866a3088d7bf17a47685",
    "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
    "0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb",
    "0x0ee7145e1370653533e2f2e824424be2aa95a4aa",
    "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
    "0x57d2d46fc7ff2a7142d479f2f59e1e3f95447077",
    "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
    "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
    "0xbc303acda8b2a0dcd3d17f05adddf854edd6da59",
    "0x4200000000000000000000000000000000000006",
    "0xd0b53d9277642d899df5c87a3966a349a798f224",
    "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
    "0xe5d6cf969c01bf8d6c46840ed784d7f209038d7a",
    "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
    "0xe9f853d2616ac6b04e5fc2b4be6eb654b9f224cd",
    "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
    "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
    "0x33128a8fc17869897dce68ed026d694621f6fdfd",
    "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70"
  ],
  "value_transfers": [
    {
      "from": "0x4200000000000000000000000000000000000006",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "value": 34596457958884485813,
      "value_eth": 34.596457958884486,
      "trace_index": 1899
    },
    {
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xe9f853d2616ac6b04e5fc2b4be6eb654b9f224cd",
      "value": 34596457958884485813,
      "value_eth": 34.596457958884486,
      "trace_index": 1900
    }
  ],
  "function_calls": [
    {
      "trace_index": 2,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 3,
      "function": "slot0()",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 5,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=500)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 6,
      "function": "slot0()",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xd0b53d9277642d899df5c87a3966a349a798f224"
    },
    {
      "trace_index": 7,
      "function": "slot0()",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xd0b53d9277642d899df5c87a3966a349a798f224"
    },
    {
      "trace_index": 9,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 10,
      "function": "balanceOf(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 11,
      "function": "balanceOf(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 12,
      "function": "balanceOf(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 13,
      "function": "balanceOf(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 14,
      "function": "balanceOf(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 15,
      "function": "balanceOf(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 16,
      "function": "approve(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb,uint256=10544813644832897955984)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 17,
      "function": "flashLoan(address=0x4200000000000000000000000000000000000006,uint256=10544813644832897955984,bytes=0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000005d93f216f17c225a8b5ffa34e74b7133436281ee000000000000000000000000bc303acda8b2a0dcd3d17f05adddf854edd6da59000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000c1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d000000000000000000000000a68f6075ae62ebd514d1600cb5035fa0e2210ef80000000000000000000000006799246165c8ce1ed2e5cf8c494fa8e7a5de447200000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017b7883c06916600000000000000000000000000000000000000000000000000000000012309ce540000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d0b53d9277642d899df5c87a3966a349a798f2240000000000000000000000000000000000000000000000000000000000000000)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb"
    },
    {
      "trace_index": 18,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=10544813644832897955984)",
      "from": "0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 19,
      "function": "onMorphoFlashLoan(uint256=10544813644832897955984,bytes=0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000005d93f216f17c225a8b5ffa34e74b7133436281ee000000000000000000000000bc303acda8b2a0dcd3d17f05adddf854edd6da59000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000c1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d000000000000000000000000a68f6075ae62ebd514d1600cb5035fa0e2210ef80000000000000000000000006799246165c8ce1ed2e5cf8c494fa8e7a5de447200000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017b7883c06916600000000000000000000000000000000000000000000000000000000012309ce540000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d0b53d9277642d899df5c87a3966a349a798f2240000000000000000000000000000000000000000000000000000000000000000)",
      "from": "0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 20,
      "function": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 21,
      "function": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 22,
      "function": "balanceOf(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 23,
      "function": "balanceOf(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 24,
      "function": "approve(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb,uint256=22539727986604)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 25,
      "function": "approve(address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb,uint256=22539727986604)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 26,
      "function": "flashLoan(address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint256=22539727986604,bytes=0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000005d93f216f17c225a8b5ffa34e74b7133436281ee000000000000000000000000bc303acda8b2a0dcd3d17f05adddf854edd6da59000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000c1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d000000000000000000000000a68f6075ae62ebd514d1600cb5035fa0e2210ef80000000000000000000000006799246165c8ce1ed2e5cf8c494fa8e7a5de447200000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017b7883c06916600000000000000000000000000000000000000000000000000000000012309ce540000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d0b53d9277642d899df5c87a3966a349a798f2240000000000000000000000000000000000000000000000000000000000000000)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb"
    },
    {
      "trace_index": 27,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=22539727986604)",
      "from": "0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 28,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=22539727986604)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 29,
      "function": "onMorphoFlashLoan(uint256=22539727986604,bytes=0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000005d93f216f17c225a8b5ffa34e74b7133436281ee000000000000000000000000bc303acda8b2a0dcd3d17f05adddf854edd6da59000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000c1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d000000000000000000000000a68f6075ae62ebd514d1600cb5035fa0e2210ef80000000000000000000000006799246165c8ce1ed2e5cf8c494fa8e7a5de447200000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017b7883c06916600000000000000000000000000000000000000000000000000000000012309ce540000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d0b53d9277642d899df5c87a3966a349a798f2240000000000000000000000000000000000000000000000000000000000000000)",
      "from": "0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 30,
      "function": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 31,
      "function": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 32,
      "function": "totalBorrows()",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee"
    },
    {
      "trace_index": 33,
      "function": "debtCeiling()",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee"
    },
    {
      "trace_index": 34,
      "function": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 36,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 37,
      "function": "tickSpacing()",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 38,
      "function": "slot0()",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 39,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=1000000000,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 40,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=14257348183893451)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 41,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 42,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 43,
      "function": "uniswapV3SwapCallback(int256=-14257348183893451,int256=1000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 44,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=1000000000)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 45,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=1000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 46,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 47,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 48,
      "function": "slot0()",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 49,
      "function": "safetyMarginSqrt()",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d"
    },
    {
      "trace_index": 50,
      "function": "mint(address=0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8,int24=-196216,int24=-102028,uint128=3315194000212825,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 51,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 52,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 53,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 54,
      "function": "uniswapV3MintCallback(uint256=184016562672189,uint256=20000000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 55,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=184016562672189)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 56,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=20000000000000)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 57,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=20000000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 58,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 59,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 60,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 62,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 63,
      "function": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 64,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 65,
      "function": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 66,
      "function": "transferFrom(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,address=0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d,uint256=255)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8"
    },
    {
      "trace_index": 67,
      "function": "mint(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=255)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d"
    },
    {
      "trace_index": 68,
      "function": "ownerOf(uint256=255)",
      "from": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8"
    },
    {
      "trace_index": 69,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 70,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 71,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 72,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 73,
      "function": "uniswapV3SwapCallback(int256=11013674086286896,int256=-400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 74,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=11013674086286896)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 75,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 76,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=400080026003,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 77,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=11011471621183370)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 78,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 79,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 80,
      "function": "uniswapV3SwapCallback(int256=-11011471621183370,int256=400080026003,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 81,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=400080026003)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 82,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=400080026003)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 83,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 84,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 85,
      "function": "reinvest(uint256=255,address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8"
    },
    {
      "trace_index": 87,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 88,
      "function": "burn(int24=-196216,int24=-102028,uint128=0)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 89,
      "function": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 91,
      "function": "amarettoIdealist()",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8"
    },
    {
      "trace_index": 92,
      "function": "detectabilityAntiauthoritarianism()",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8"
    },
    {
      "trace_index": 95,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 96,
      "function": "slot0()",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 97,
      "function": "collect(address=0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1,int24=-196216,int24=-102028,uint128=736176869,uint128=80012140)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 98,
      "function": "transfer(address=0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1,uint256=736176869)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 99,
      "function": "transfer(address=0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1,uint256=80012140)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 100,
      "function": "transfer(address=0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1,uint256=80012140)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 102,
      "function": "amarettoIdealist()",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8"
    },
    {
      "trace_index": 103,
      "function": "detectabilityAntiauthoritarianism()",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8"
    },
    {
      "trace_index": 105,
      "function": "mint(address=0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8,int24=-196216,int24=-102028,uint128=12997532542,bytes=0x00000000000000000000000000000000000000000000000000000000000000c80000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 106,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 107,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 108,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 109,
      "function": "uniswapV3MintCallback(uint256=721453332,uint256=78411898,bytes=0x00000000000000000000000000000000000000000000000000000000000000c80000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1"
    },
    {
      "trace_index": 110,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 111,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=721453332)",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 112,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=78411898)",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 113,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=78411898)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 114,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 115,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 116,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 117,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=7361768)",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 118,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=800121)",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 119,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=800121)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 120,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 121,
      "function": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 122,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 123,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 124,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 125,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 126,
      "function": "uniswapV3SwapCallback(int256=13495950189594037729,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 127,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950189594037729)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 128,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 129,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 130,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493250999553432829)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 131,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 132,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 133,
      "function": "uniswapV3SwapCallback(int256=-13493250999553432829,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 134,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 135,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 136,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 137,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 138,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 139,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 140,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 141,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 142,
      "function": "uniswapV3SwapCallback(int256=13495950191384535167,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 143,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950191384535167)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 144,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 145,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 146,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251001343559852)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 147,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 148,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 149,
      "function": "uniswapV3SwapCallback(int256=-13493251001343559852,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 150,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 151,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 152,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 153,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 154,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 155,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 156,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 157,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 158,
      "function": "uniswapV3SwapCallback(int256=13495950193175020287,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 159,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950193175020287)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 160,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 161,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 162,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251003133686875)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 163,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 164,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 165,
      "function": "uniswapV3SwapCallback(int256=-13493251003133686875,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 166,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 167,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 168,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 169,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 170,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 171,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 172,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 173,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 174,
      "function": "uniswapV3SwapCallback(int256=13495950194965505407,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 175,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950194965505407)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 176,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 177,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 178,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251004923813898)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 179,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 180,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 181,
      "function": "uniswapV3SwapCallback(int256=-13493251004923813898,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 182,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 183,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 184,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 185,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 186,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 187,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 188,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 189,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 190,
      "function": "uniswapV3SwapCallback(int256=13495950196755990527,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 191,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950196755990527)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 192,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 193,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 194,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251006713940922)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 195,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 196,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 197,
      "function": "uniswapV3SwapCallback(int256=-13493251006713940922,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 198,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 199,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 200,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 201,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 202,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 203,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 204,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 205,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 206,
      "function": "uniswapV3SwapCallback(int256=13495950198546475648,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 207,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950198546475648)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 208,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 209,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 210,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251008504067945)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 211,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 212,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 213,
      "function": "uniswapV3SwapCallback(int256=-13493251008504067945,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 214,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 215,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 216,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 217,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 218,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 219,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 220,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 221,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 222,
      "function": "uniswapV3SwapCallback(int256=13495950200336960769,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 223,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950200336960769)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 224,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 225,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 226,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251010294194970)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 227,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 228,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 229,
      "function": "uniswapV3SwapCallback(int256=-13493251010294194970,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 230,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 231,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 232,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 233,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 234,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 235,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 236,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 237,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 238,
      "function": "uniswapV3SwapCallback(int256=13495950202127445892,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 239,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950202127445892)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 240,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 241,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 242,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251012084321995)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 243,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 244,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 245,
      "function": "uniswapV3SwapCallback(int256=-13493251012084321995,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 246,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 247,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 248,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 249,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 250,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 251,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 252,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 253,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 254,
      "function": "uniswapV3SwapCallback(int256=13495950203917931014,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 255,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950203917931014)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 256,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 257,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 258,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251013874449021)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 259,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 260,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 261,
      "function": "uniswapV3SwapCallback(int256=-13493251013874449021,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 262,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 263,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 264,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 265,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 266,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 267,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 268,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 269,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 270,
      "function": "uniswapV3SwapCallback(int256=13495950205708416137,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 271,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950205708416137)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 272,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 273,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 274,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251015664576046)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 275,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 276,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 277,
      "function": "uniswapV3SwapCallback(int256=-13493251015664576046,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 278,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 279,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 280,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 281,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 282,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 283,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 284,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 285,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 286,
      "function": "uniswapV3SwapCallback(int256=13495950207498901259,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 287,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950207498901259)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 288,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 289,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 290,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251017454703073)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 291,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 292,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 293,
      "function": "uniswapV3SwapCallback(int256=-13493251017454703073,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 294,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 295,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 296,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 297,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 298,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 299,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 300,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 301,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 302,
      "function": "uniswapV3SwapCallback(int256=13495950209289386384,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 303,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950209289386384)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 304,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 305,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 306,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251019244830099)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 307,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 308,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 309,
      "function": "uniswapV3SwapCallback(int256=-13493251019244830099,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 310,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 311,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 312,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 313,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 314,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 315,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 316,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 317,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 318,
      "function": "uniswapV3SwapCallback(int256=13495950211079871509,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 319,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950211079871509)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 320,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 321,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 322,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251021034957127)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 323,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 324,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 325,
      "function": "uniswapV3SwapCallback(int256=-13493251021034957127,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 326,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 327,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 328,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 329,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 330,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 331,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 332,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 333,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 334,
      "function": "uniswapV3SwapCallback(int256=13495950212870356633,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 335,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950212870356633)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 336,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 337,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 338,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251022825084154)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 339,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 340,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 341,
      "function": "uniswapV3SwapCallback(int256=-13493251022825084154,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 342,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 343,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 344,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 345,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 346,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 347,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 348,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 349,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 350,
      "function": "uniswapV3SwapCallback(int256=13495950214660841759,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 351,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950214660841759)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 352,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 353,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 354,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251024615238165)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 355,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 356,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 357,
      "function": "uniswapV3SwapCallback(int256=-13493251024615238165,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 358,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 359,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 360,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 361,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 362,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 363,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 364,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 365,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 366,
      "function": "uniswapV3SwapCallback(int256=13495950216433422033,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 367,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950216433422033)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 368,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 369,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 370,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251026387463924)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 371,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 372,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 373,
      "function": "uniswapV3SwapCallback(int256=-13493251026387463924,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 374,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 375,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 376,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 377,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 378,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 379,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 380,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 381,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 382,
      "function": "uniswapV3SwapCallback(int256=13495950218206002308,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 383,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950218206002308)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 384,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 385,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 386,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251028159689682)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 387,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 388,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 389,
      "function": "uniswapV3SwapCallback(int256=-13493251028159689682,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 390,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 391,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 392,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 393,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 394,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 395,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 396,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 397,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 398,
      "function": "uniswapV3SwapCallback(int256=13495950219978582582,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 399,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950219978582582)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 400,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 401,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 402,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251029931915442)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 403,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 404,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 405,
      "function": "uniswapV3SwapCallback(int256=-13493251029931915442,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 406,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 407,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 408,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 409,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 410,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 411,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 412,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 413,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 414,
      "function": "uniswapV3SwapCallback(int256=13495950221751162858,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 415,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950221751162858)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 416,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 417,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 418,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251031704114218)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 419,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 420,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 421,
      "function": "uniswapV3SwapCallback(int256=-13493251031704114218,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 422,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 423,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 424,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 425,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 426,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 427,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 428,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 429,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 430,
      "function": "uniswapV3SwapCallback(int256=13495950223541647986,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 431,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950223541647986)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 432,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 433,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 434,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251033494241249)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 435,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 436,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 437,
      "function": "uniswapV3SwapCallback(int256=-13493251033494241249,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 438,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 439,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 440,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 441,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 442,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 443,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 444,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 445,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 446,
      "function": "uniswapV3SwapCallback(int256=13495950225332133114,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 447,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950225332133114)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 448,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 449,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 450,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251035284368279)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 451,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 452,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 453,
      "function": "uniswapV3SwapCallback(int256=-13493251035284368279,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 454,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 455,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 456,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 457,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 458,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 459,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 460,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 461,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 462,
      "function": "uniswapV3SwapCallback(int256=13495950227122618243,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 463,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950227122618243)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 464,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 465,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 466,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251037074495311)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 467,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 468,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 469,
      "function": "uniswapV3SwapCallback(int256=-13493251037074495311,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 470,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 471,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 472,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 473,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 474,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 475,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 476,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 477,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 478,
      "function": "uniswapV3SwapCallback(int256=13495950228913103371,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 479,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950228913103371)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 480,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 481,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 482,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251038864622342)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 483,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 484,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 485,
      "function": "uniswapV3SwapCallback(int256=-13493251038864622342,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 486,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 487,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 488,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 489,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 490,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 491,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 492,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 493,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 494,
      "function": "uniswapV3SwapCallback(int256=13495950230703588500,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 495,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950230703588500)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 496,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 497,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 498,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251040654749375)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 499,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 500,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 501,
      "function": "uniswapV3SwapCallback(int256=-13493251040654749375,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 502,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 503,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 504,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 505,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 506,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 507,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 508,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 509,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 510,
      "function": "uniswapV3SwapCallback(int256=13495950232494073630,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 511,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950232494073630)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 512,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 513,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 514,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251042444876407)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 515,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 516,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 517,
      "function": "uniswapV3SwapCallback(int256=-13493251042444876407,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 518,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 519,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 520,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 521,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 522,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 523,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 524,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 525,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 526,
      "function": "uniswapV3SwapCallback(int256=13495950234284558760,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 527,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950234284558760)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 528,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 529,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 530,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251044235003441)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 531,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 532,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 533,
      "function": "uniswapV3SwapCallback(int256=-13493251044235003441,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 534,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 535,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 536,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 537,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 538,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 539,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 540,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 541,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 542,
      "function": "uniswapV3SwapCallback(int256=13495950236075043891,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 543,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950236075043891)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 544,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 545,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 546,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251046025130474)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 547,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 548,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 549,
      "function": "uniswapV3SwapCallback(int256=-13493251046025130474,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 550,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 551,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 552,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 553,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 554,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 555,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 556,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 557,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 558,
      "function": "uniswapV3SwapCallback(int256=13495950237865529022,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 559,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950237865529022)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 560,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 561,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 562,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251047815257508)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 563,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 564,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 565,
      "function": "uniswapV3SwapCallback(int256=-13493251047815257508,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 566,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 567,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 568,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 569,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 570,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 571,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 572,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 573,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 574,
      "function": "uniswapV3SwapCallback(int256=13495950239656014153,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 575,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950239656014153)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 576,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 577,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 578,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251049605384543)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 579,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 580,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 581,
      "function": "uniswapV3SwapCallback(int256=-13493251049605384543,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 582,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 583,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 584,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 585,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 586,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 587,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 588,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 589,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 590,
      "function": "uniswapV3SwapCallback(int256=13495950241446499285,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 591,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950241446499285)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 592,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 593,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 594,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251051395511578)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 595,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 596,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 597,
      "function": "uniswapV3SwapCallback(int256=-13493251051395511578,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 598,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 599,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 600,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 601,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 602,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 603,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 604,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 605,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 606,
      "function": "uniswapV3SwapCallback(int256=13495950243236984418,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 607,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950243236984418)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 608,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 609,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 610,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251053185638614)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 611,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 612,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 613,
      "function": "uniswapV3SwapCallback(int256=-13493251053185638614,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 614,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 615,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 616,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 617,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 618,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 619,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 620,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 621,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 622,
      "function": "uniswapV3SwapCallback(int256=13495950245027469552,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 623,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950245027469552)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 624,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 625,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 626,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251054975765649)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 627,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 628,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 629,
      "function": "uniswapV3SwapCallback(int256=-13493251054975765649,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 630,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 631,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 632,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 633,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 634,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 635,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 636,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 637,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 638,
      "function": "uniswapV3SwapCallback(int256=13495950246817954683,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 639,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950246817954683)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 640,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 641,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 642,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251056765892686)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 643,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 644,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 645,
      "function": "uniswapV3SwapCallback(int256=-13493251056765892686,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 646,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 647,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 648,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 649,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 650,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 651,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 652,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 653,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 654,
      "function": "uniswapV3SwapCallback(int256=13495950248608439818,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 655,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950248608439818)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 656,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 657,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 658,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251058556019722)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 659,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 660,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 661,
      "function": "uniswapV3SwapCallback(int256=-13493251058556019722,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 662,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 663,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 664,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 665,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 666,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 667,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 668,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 669,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 670,
      "function": "uniswapV3SwapCallback(int256=13495950250398924952,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 671,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950250398924952)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 672,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 673,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 674,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251060346146760)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 675,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 676,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 677,
      "function": "uniswapV3SwapCallback(int256=-13493251060346146760,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 678,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 679,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 680,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 681,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 682,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 683,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 684,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 685,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 686,
      "function": "uniswapV3SwapCallback(int256=13495950252189410088,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 687,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950252189410088)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 688,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 689,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 690,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251062136273797)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 691,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 692,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 693,
      "function": "uniswapV3SwapCallback(int256=-13493251062136273797,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 694,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 695,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 696,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 697,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 698,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 699,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 700,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 701,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 702,
      "function": "uniswapV3SwapCallback(int256=13495950253979895222,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 703,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950253979895222)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 704,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 705,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 706,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251063926400836)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 707,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 708,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 709,
      "function": "uniswapV3SwapCallback(int256=-13493251063926400836,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 710,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 711,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 712,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 713,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 714,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 715,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 716,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 717,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 718,
      "function": "uniswapV3SwapCallback(int256=13495950255770380358,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 719,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950255770380358)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 720,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 721,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 722,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251065716527874)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 723,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 724,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 725,
      "function": "uniswapV3SwapCallback(int256=-13493251065716527874,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 726,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 727,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 728,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 729,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 730,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 731,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 732,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 733,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 734,
      "function": "uniswapV3SwapCallback(int256=13495950257560865493,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 735,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950257560865493)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 736,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 737,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 738,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251067506654914)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 739,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 740,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 741,
      "function": "uniswapV3SwapCallback(int256=-13493251067506654914,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 742,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 743,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 744,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 745,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 746,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 747,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 748,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 749,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 750,
      "function": "uniswapV3SwapCallback(int256=13495950259351350631,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 751,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950259351350631)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 752,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 753,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 754,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251069296781953)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 755,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 756,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 757,
      "function": "uniswapV3SwapCallback(int256=-13493251069296781953,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 758,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 759,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 760,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 761,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 762,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 763,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 764,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 765,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 766,
      "function": "uniswapV3SwapCallback(int256=13495950261141835769,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 767,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950261141835769)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 768,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 769,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 770,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251071086908993)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 771,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 772,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 773,
      "function": "uniswapV3SwapCallback(int256=-13493251071086908993,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 774,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 775,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 776,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 777,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 778,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 779,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 780,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 781,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 782,
      "function": "uniswapV3SwapCallback(int256=13495950262932320906,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 783,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950262932320906)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 784,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 785,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 786,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251072877036033)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 787,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 788,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 789,
      "function": "uniswapV3SwapCallback(int256=-13493251072877036033,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 790,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 791,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 792,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 793,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 794,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 795,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 796,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 797,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 798,
      "function": "uniswapV3SwapCallback(int256=13495950264722806043,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 799,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950264722806043)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 800,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 801,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 802,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251074667163074)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 803,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 804,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 805,
      "function": "uniswapV3SwapCallback(int256=-13493251074667163074,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 806,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 807,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 808,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 809,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 810,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 811,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 812,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 813,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 814,
      "function": "uniswapV3SwapCallback(int256=13495950266513291182,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 815,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950266513291182)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 816,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 817,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 818,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251076457290115)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 819,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 820,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 821,
      "function": "uniswapV3SwapCallback(int256=-13493251076457290115,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 822,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 823,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 824,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 825,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 826,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 827,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 828,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 829,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 830,
      "function": "uniswapV3SwapCallback(int256=13495950268303776321,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 831,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950268303776321)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 832,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 833,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 834,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251078247417158)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 835,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 836,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 837,
      "function": "uniswapV3SwapCallback(int256=-13493251078247417158,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 838,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 839,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 840,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 841,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 842,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 843,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 844,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 845,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 846,
      "function": "uniswapV3SwapCallback(int256=13495950270094261460,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 847,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950270094261460)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 848,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 849,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 850,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251080037544199)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 851,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 852,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 853,
      "function": "uniswapV3SwapCallback(int256=-13493251080037544199,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 854,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 855,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 856,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 857,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 858,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 859,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 860,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 861,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 862,
      "function": "uniswapV3SwapCallback(int256=13495950271884746600,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 863,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950271884746600)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 864,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 865,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 866,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251081827671243)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 867,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 868,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 869,
      "function": "uniswapV3SwapCallback(int256=-13493251081827671243,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 870,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 871,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 872,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 873,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 874,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 875,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 876,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 877,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 878,
      "function": "uniswapV3SwapCallback(int256=13495950273675231740,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 879,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950273675231740)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 880,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 881,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 882,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251083617798285)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 883,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 884,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 885,
      "function": "uniswapV3SwapCallback(int256=-13493251083617798285,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 886,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 887,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 888,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 889,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 890,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 891,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 892,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 893,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 894,
      "function": "uniswapV3SwapCallback(int256=13495950275465716881,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 895,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950275465716881)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 896,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 897,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 898,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251085407925330)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 899,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 900,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 901,
      "function": "uniswapV3SwapCallback(int256=-13493251085407925330,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 902,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 903,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 904,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 905,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 906,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 907,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 908,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 909,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 910,
      "function": "uniswapV3SwapCallback(int256=13495950277256202022,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 911,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950277256202022)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 912,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 913,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 914,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251087198052374)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 915,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 916,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 917,
      "function": "uniswapV3SwapCallback(int256=-13493251087198052374,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 918,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 919,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 920,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 921,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 922,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 923,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 924,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 925,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 926,
      "function": "uniswapV3SwapCallback(int256=13495950279046687164,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 927,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950279046687164)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 928,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 929,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 930,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251088988179418)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 931,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 932,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 933,
      "function": "uniswapV3SwapCallback(int256=-13493251088988179418,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 934,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 935,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 936,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 937,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 938,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 939,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 940,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 941,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 942,
      "function": "uniswapV3SwapCallback(int256=13495950280837172305,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 943,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950280837172305)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 944,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 945,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 946,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251090778306464)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 947,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 948,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 949,
      "function": "uniswapV3SwapCallback(int256=-13493251090778306464,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 950,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 951,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 952,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 953,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 954,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 955,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 956,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 957,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 958,
      "function": "uniswapV3SwapCallback(int256=13495950282627657448,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 959,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950282627657448)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 960,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 961,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 962,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251092568433509)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 963,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 964,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 965,
      "function": "uniswapV3SwapCallback(int256=-13493251092568433509,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 966,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 967,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 968,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 969,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 970,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 971,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 972,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 973,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 974,
      "function": "uniswapV3SwapCallback(int256=13495950284418142591,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 975,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950284418142591)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 976,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 977,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 978,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251094358560555)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 979,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 980,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 981,
      "function": "uniswapV3SwapCallback(int256=-13493251094358560555,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 982,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 983,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 984,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 985,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 986,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 987,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 988,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 989,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 990,
      "function": "uniswapV3SwapCallback(int256=13495950286208627735,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 991,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950286208627735)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 992,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 993,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 994,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251096148687601)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 995,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 996,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 997,
      "function": "uniswapV3SwapCallback(int256=-13493251096148687601,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 998,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 999,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1000,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1001,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1002,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1003,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1004,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1005,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1006,
      "function": "uniswapV3SwapCallback(int256=13495950287999112878,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1007,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950287999112878)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1008,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1009,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1010,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251097938814649)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1011,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1012,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1013,
      "function": "uniswapV3SwapCallback(int256=-13493251097938814649,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1014,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1015,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1016,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1017,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1018,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1019,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1020,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1021,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1022,
      "function": "uniswapV3SwapCallback(int256=13495950289789598024,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1023,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950289789598024)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1024,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1025,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1026,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251099728941695)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1027,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1028,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1029,
      "function": "uniswapV3SwapCallback(int256=-13493251099728941695,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1030,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1031,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1032,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1033,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1034,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1035,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1036,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1037,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1038,
      "function": "uniswapV3SwapCallback(int256=13495950291580083167,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1039,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950291580083167)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1040,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1041,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1042,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251101519068744)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1043,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1044,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1045,
      "function": "uniswapV3SwapCallback(int256=-13493251101519068744,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1046,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1047,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1048,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1049,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1050,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1051,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1052,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1053,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1054,
      "function": "uniswapV3SwapCallback(int256=13495950293370568313,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1055,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950293370568313)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1056,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1057,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1058,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251103309195791)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1059,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1060,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1061,
      "function": "uniswapV3SwapCallback(int256=-13493251103309195791,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1062,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1063,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1064,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1065,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1066,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1067,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1068,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1069,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1070,
      "function": "uniswapV3SwapCallback(int256=13495950295161053458,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1071,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950295161053458)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1072,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1073,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1074,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251105099322841)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1075,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1076,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1077,
      "function": "uniswapV3SwapCallback(int256=-13493251105099322841,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1078,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1079,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1080,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1081,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1082,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1083,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1084,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1085,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1086,
      "function": "uniswapV3SwapCallback(int256=13495950296951538605,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1087,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950296951538605)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1088,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1089,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1090,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251106889449889)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1091,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1092,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1093,
      "function": "uniswapV3SwapCallback(int256=-13493251106889449889,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1094,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1095,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1096,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1097,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1098,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1099,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1100,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1101,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1102,
      "function": "uniswapV3SwapCallback(int256=13495950298742023753,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1103,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950298742023753)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1104,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1105,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1106,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251108679576939)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1107,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1108,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1109,
      "function": "uniswapV3SwapCallback(int256=-13493251108679576939,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1110,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1111,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1112,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1113,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1114,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1115,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1116,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1117,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1118,
      "function": "uniswapV3SwapCallback(int256=13495950300532508899,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1119,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950300532508899)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1120,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1121,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1122,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251110469703989)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1123,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1124,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1125,
      "function": "uniswapV3SwapCallback(int256=-13493251110469703989,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1126,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1127,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1128,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1129,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1130,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1131,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1132,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1133,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1134,
      "function": "uniswapV3SwapCallback(int256=13495950302322994047,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1135,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950302322994047)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1136,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1137,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1138,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251112259831040)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1139,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1140,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1141,
      "function": "uniswapV3SwapCallback(int256=-13493251112259831040,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1142,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1143,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1144,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1145,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1146,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1147,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1148,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1149,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1150,
      "function": "uniswapV3SwapCallback(int256=13495950304113479194,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1151,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950304113479194)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1152,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1153,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1154,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251114049985074)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1155,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1156,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1157,
      "function": "uniswapV3SwapCallback(int256=-13493251114049985074,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1158,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1159,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1160,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1161,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1162,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1163,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1164,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1165,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1166,
      "function": "uniswapV3SwapCallback(int256=13495950305886059491,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1167,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950305886059491)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1168,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1169,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1170,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251115822210855)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1171,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1172,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1173,
      "function": "uniswapV3SwapCallback(int256=-13493251115822210855,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1174,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1175,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1176,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1177,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1178,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1179,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1180,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1181,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1182,
      "function": "uniswapV3SwapCallback(int256=13495950307658639789,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1183,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950307658639789)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1184,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1185,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1186,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251117594436637)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1187,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1188,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1189,
      "function": "uniswapV3SwapCallback(int256=-13493251117594436637,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1190,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1191,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1192,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1193,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1194,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1195,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1196,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1197,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1198,
      "function": "uniswapV3SwapCallback(int256=13495950309431220087,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1199,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950309431220087)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1200,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1201,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1202,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251119366662418)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1203,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1204,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1205,
      "function": "uniswapV3SwapCallback(int256=-13493251119366662418,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1206,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1207,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1208,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1209,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1210,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1211,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1212,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1213,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1214,
      "function": "uniswapV3SwapCallback(int256=13495950311203800386,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1215,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950311203800386)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1216,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1217,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1218,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251121138861218)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1219,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1220,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1221,
      "function": "uniswapV3SwapCallback(int256=-13493251121138861218,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1222,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1223,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1224,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1225,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1226,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1227,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1228,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1229,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1230,
      "function": "uniswapV3SwapCallback(int256=13495950312994285535,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1231,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950312994285535)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1232,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1233,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1234,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251122928988270)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1235,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1236,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1237,
      "function": "uniswapV3SwapCallback(int256=-13493251122928988270,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1238,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1239,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1240,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1241,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1242,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1243,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1244,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1245,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1246,
      "function": "uniswapV3SwapCallback(int256=13495950314784770686,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1247,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950314784770686)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1248,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1249,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1250,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251124719115325)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1251,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1252,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1253,
      "function": "uniswapV3SwapCallback(int256=-13493251124719115325,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1254,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1255,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1256,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1257,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1258,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1259,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1260,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1261,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1262,
      "function": "uniswapV3SwapCallback(int256=13495950316575255838,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1263,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950316575255838)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1264,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1265,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1266,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251126509242378)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1267,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1268,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1269,
      "function": "uniswapV3SwapCallback(int256=-13493251126509242378,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1270,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1271,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1272,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1273,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1274,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1275,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1276,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1277,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1278,
      "function": "uniswapV3SwapCallback(int256=13495950318365740990,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1279,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950318365740990)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1280,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1281,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1282,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251128299369433)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1283,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1284,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1285,
      "function": "uniswapV3SwapCallback(int256=-13493251128299369433,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1286,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1287,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1288,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1289,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1290,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1291,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1292,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1293,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1294,
      "function": "uniswapV3SwapCallback(int256=13495950320156226142,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1295,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950320156226142)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1296,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1297,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1298,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251130089496488)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1299,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1300,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1301,
      "function": "uniswapV3SwapCallback(int256=-13493251130089496488,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1302,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1303,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1304,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1305,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1306,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1307,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1308,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1309,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1310,
      "function": "uniswapV3SwapCallback(int256=13495950321946711294,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1311,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950321946711294)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1312,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1313,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1314,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251131879623544)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1315,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1316,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1317,
      "function": "uniswapV3SwapCallback(int256=-13493251131879623544,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1318,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1319,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1320,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1321,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1322,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1323,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1324,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1325,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1326,
      "function": "uniswapV3SwapCallback(int256=13495950323737196447,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1327,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950323737196447)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1328,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1329,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1330,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251133669750600)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1331,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1332,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1333,
      "function": "uniswapV3SwapCallback(int256=-13493251133669750600,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1334,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1335,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1336,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1337,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1338,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1339,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1340,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1341,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1342,
      "function": "uniswapV3SwapCallback(int256=13495950325527681601,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1343,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950325527681601)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1344,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1345,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1346,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251135459877657)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1347,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1348,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1349,
      "function": "uniswapV3SwapCallback(int256=-13493251135459877657,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1350,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1351,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1352,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1353,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1354,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1355,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1356,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1357,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1358,
      "function": "uniswapV3SwapCallback(int256=13495950327318166755,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1359,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950327318166755)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1360,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1361,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1362,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251137250004714)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1363,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1364,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1365,
      "function": "uniswapV3SwapCallback(int256=-13493251137250004714,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1366,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1367,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1368,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1369,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1370,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1371,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1372,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1373,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1374,
      "function": "uniswapV3SwapCallback(int256=13495950329108651909,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1375,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950329108651909)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1376,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1377,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1378,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251139040131771)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1379,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1380,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1381,
      "function": "uniswapV3SwapCallback(int256=-13493251139040131771,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1382,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1383,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1384,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1385,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1386,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1387,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1388,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1389,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1390,
      "function": "uniswapV3SwapCallback(int256=13495950330899137063,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1391,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950330899137063)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1392,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1393,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1394,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251140830258829)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1395,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1396,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1397,
      "function": "uniswapV3SwapCallback(int256=-13493251140830258829,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1398,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1399,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1400,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1401,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1402,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1403,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1404,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1405,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1406,
      "function": "uniswapV3SwapCallback(int256=13495950332689622220,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1407,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950332689622220)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1408,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1409,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1410,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251142620385887)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1411,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1412,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1413,
      "function": "uniswapV3SwapCallback(int256=-13493251142620385887,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1414,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1415,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1416,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1417,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1418,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1419,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1420,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1421,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1422,
      "function": "uniswapV3SwapCallback(int256=13495950334480107375,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1423,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950334480107375)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1424,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1425,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1426,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251144410512946)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1427,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1428,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1429,
      "function": "uniswapV3SwapCallback(int256=-13493251144410512946,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1430,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1431,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1432,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1433,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1434,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1435,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1436,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1437,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1438,
      "function": "uniswapV3SwapCallback(int256=13495950336270592532,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1439,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950336270592532)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1440,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1441,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1442,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251146200640005)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1443,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1444,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1445,
      "function": "uniswapV3SwapCallback(int256=-13493251146200640005,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1446,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1447,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1448,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1449,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1450,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1451,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1452,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1453,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1454,
      "function": "uniswapV3SwapCallback(int256=13495950338061077688,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1455,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950338061077688)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1456,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1457,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1458,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251147990767065)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1459,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1460,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1461,
      "function": "uniswapV3SwapCallback(int256=-13493251147990767065,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1462,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1463,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1464,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1465,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1466,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1467,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1468,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1469,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1470,
      "function": "uniswapV3SwapCallback(int256=13495950339851562845,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1471,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950339851562845)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1472,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1473,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1474,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251149780894125)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1475,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1476,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1477,
      "function": "uniswapV3SwapCallback(int256=-13493251149780894125,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1478,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1479,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1480,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1481,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1482,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1483,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1484,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1485,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1486,
      "function": "uniswapV3SwapCallback(int256=13495950341642048003,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1487,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950341642048003)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1488,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1489,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1490,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251151571021186)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1491,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1492,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1493,
      "function": "uniswapV3SwapCallback(int256=-13493251151571021186,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1494,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1495,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1496,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1497,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1498,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1499,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1500,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1501,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1502,
      "function": "uniswapV3SwapCallback(int256=13495950343432533161,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1503,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950343432533161)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1504,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1505,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1506,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251153361148247)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1507,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1508,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1509,
      "function": "uniswapV3SwapCallback(int256=-13493251153361148247,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1510,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1511,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1512,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1513,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1514,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1515,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1516,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1517,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1518,
      "function": "uniswapV3SwapCallback(int256=13495950345223018319,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1519,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950345223018319)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1520,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1521,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1522,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251155151275309)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1523,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1524,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1525,
      "function": "uniswapV3SwapCallback(int256=-13493251155151275309,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1526,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1527,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1528,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1529,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1530,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1531,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1532,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1533,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1534,
      "function": "uniswapV3SwapCallback(int256=13495950347013503480,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1535,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950347013503480)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1536,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1537,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1538,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251156941402370)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1539,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1540,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1541,
      "function": "uniswapV3SwapCallback(int256=-13493251156941402370,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1542,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1543,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1544,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1545,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1546,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1547,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1548,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1549,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1550,
      "function": "uniswapV3SwapCallback(int256=13495950348803988638,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1551,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950348803988638)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1552,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1553,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1554,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251158731529433)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1555,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1556,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1557,
      "function": "uniswapV3SwapCallback(int256=-13493251158731529433,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1558,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1559,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1560,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1561,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1562,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1563,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1564,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1565,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1566,
      "function": "uniswapV3SwapCallback(int256=13495950350594473798,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1567,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950350594473798)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1568,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1569,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1570,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251160521656495)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1571,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1572,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1573,
      "function": "uniswapV3SwapCallback(int256=-13493251160521656495,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1574,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1575,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1576,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1577,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1578,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1579,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1580,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1581,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1582,
      "function": "uniswapV3SwapCallback(int256=13495950352384958959,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1583,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950352384958959)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1584,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1585,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1586,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251162311783559)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1587,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1588,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1589,
      "function": "uniswapV3SwapCallback(int256=-13493251162311783559,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1590,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1591,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1592,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1593,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1594,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1595,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1596,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1597,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1598,
      "function": "uniswapV3SwapCallback(int256=13495950354175444119,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1599,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950354175444119)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1600,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1601,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1602,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251164101910622)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1603,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1604,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1605,
      "function": "uniswapV3SwapCallback(int256=-13493251164101910622,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1606,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1607,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1608,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1609,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1610,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1611,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1612,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1613,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1614,
      "function": "uniswapV3SwapCallback(int256=13495950355965929282,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1615,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950355965929282)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1616,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1617,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1618,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251165892037687)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1619,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1620,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1621,
      "function": "uniswapV3SwapCallback(int256=-13493251165892037687,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1622,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1623,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1624,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1625,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1626,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1627,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1628,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1629,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1630,
      "function": "uniswapV3SwapCallback(int256=13495950357756414442,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1631,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950357756414442)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1632,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1633,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1634,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251167682164751)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1635,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1636,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1637,
      "function": "uniswapV3SwapCallback(int256=-13493251167682164751,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1638,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1639,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1640,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1641,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1642,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1643,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1644,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1645,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1646,
      "function": "uniswapV3SwapCallback(int256=13495950359546899605,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1647,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950359546899605)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1648,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1649,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1650,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251169472291817)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1651,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1652,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1653,
      "function": "uniswapV3SwapCallback(int256=-13493251169472291817,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1654,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1655,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1656,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1657,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1658,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1659,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1660,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1661,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1662,
      "function": "uniswapV3SwapCallback(int256=13495950361337384767,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1663,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950361337384767)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1664,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1665,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1666,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251171262418882)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1667,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1668,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1669,
      "function": "uniswapV3SwapCallback(int256=-13493251171262418882,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1670,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1671,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1672,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1673,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1674,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1675,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1676,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1677,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1678,
      "function": "uniswapV3SwapCallback(int256=13495950363127869931,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1679,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950363127869931)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1680,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1681,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1682,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251173052545949)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1683,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1684,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1685,
      "function": "uniswapV3SwapCallback(int256=-13493251173052545949,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1686,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1687,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1688,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1689,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1690,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1691,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1692,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1693,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1694,
      "function": "uniswapV3SwapCallback(int256=13495950364918355094,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1695,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950364918355094)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1696,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1697,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1698,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251174842673015)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1699,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1700,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1701,
      "function": "uniswapV3SwapCallback(int256=-13493251174842673015,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1702,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1703,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1704,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1705,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1706,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19400000000000,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1707,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1708,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19400000000000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1709,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1710,
      "function": "uniswapV3SwapCallback(int256=13495950366708840258,int256=-19400000000000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1711,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=13495950366708840258)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1712,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1713,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=19403880776155,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1714,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=13493251176632800082)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1715,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1716,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1717,
      "function": "uniswapV3SwapCallback(int256=-13493251176632800082,int256=19403880776155,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1718,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1719,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=19403880776155)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1720,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1721,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1722,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=false,int256=100000,uint160=1461446703485210103287273052203988822378723970341,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1723,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=2697769803)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1724,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1725,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1726,
      "function": "uniswapV3SwapCallback(int256=-2697769803,int256=100000,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1727,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=100000)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1728,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=100000)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1729,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1730,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1731,
      "function": "getPositionData(uint256=255,uint256=1183215960000000000)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8"
    },
    {
      "trace_index": 1732,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 1733,
      "function": "burn(int24=-196216,int24=-102028,uint128=0)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1734,
      "function": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1736,
      "function": "latestAnswer()",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70"
    },
    {
      "trace_index": 1737,
      "function": "latestAnswer()",
      "from": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70",
      "to": "0x57d2d46fc7ff2a7142d479f2f59e1e3f95447077"
    },
    {
      "trace_index": 1738,
      "function": "latestAnswer()",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b"
    },
    {
      "trace_index": 1739,
      "function": "latestAnswer()",
      "from": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
      "to": "0x0ee7145e1370653533e2f2e824424be2aa95a4aa"
    },
    {
      "trace_index": 1740,
      "function": "decimals()",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70"
    },
    {
      "trace_index": 1741,
      "function": "decimals()",
      "from": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70",
      "to": "0x57d2d46fc7ff2a7142d479f2f59e1e3f95447077"
    },
    {
      "trace_index": 1742,
      "function": "decimals()",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1743,
      "function": "decimals()",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b"
    },
    {
      "trace_index": 1744,
      "function": "decimals()",
      "from": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
      "to": "0x0ee7145e1370653533e2f2e824424be2aa95a4aa"
    },
    {
      "trace_index": 1745,
      "function": "decimals()",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1746,
      "function": "decimals()",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1747,
      "function": "liquidationPenalty()",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d"
    },
    {
      "trace_index": 1748,
      "function": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1749,
      "function": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1750,
      "function": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1751,
      "function": "transfer(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee,uint256=166988030575033714385)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1752,
      "function": "mint(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee"
    },
    {
      "trace_index": 1753,
      "function": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1754,
      "function": "reservesManager()",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x175712cd666fbcfe8b69866a3088d7bf17a47685"
    },
    {
      "trace_index": 1755,
      "function": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1756,
      "function": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1757,
      "function": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1759,
      "function": "ownerOf(uint256=255)",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d"
    },
    {
      "trace_index": 1760,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=201595425653150513986)",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1761,
      "function": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1763,
      "function": "ownerOf(uint256=255)",
      "from": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8"
    },
    {
      "trace_index": 1765,
      "function": "getPositionData(uint256=255,uint256=1183215960000000000)",
      "from": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8"
    },
    {
      "trace_index": 1766,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 1767,
      "function": "burn(int24=-196216,int24=-102028,uint128=0)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1768,
      "function": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1770,
      "function": "latestAnswer()",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70"
    },
    {
      "trace_index": 1771,
      "function": "latestAnswer()",
      "from": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70",
      "to": "0x57d2d46fc7ff2a7142d479f2f59e1e3f95447077"
    },
    {
      "trace_index": 1772,
      "function": "latestAnswer()",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b"
    },
    {
      "trace_index": 1773,
      "function": "latestAnswer()",
      "from": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
      "to": "0x0ee7145e1370653533e2f2e824424be2aa95a4aa"
    },
    {
      "trace_index": 1774,
      "function": "decimals()",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70"
    },
    {
      "trace_index": 1775,
      "function": "decimals()",
      "from": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70",
      "to": "0x57d2d46fc7ff2a7142d479f2f59e1e3f95447077"
    },
    {
      "trace_index": 1776,
      "function": "decimals()",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1777,
      "function": "decimals()",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b"
    },
    {
      "trace_index": 1778,
      "function": "decimals()",
      "from": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
      "to": "0x0ee7145e1370653533e2f2e824424be2aa95a4aa"
    },
    {
      "trace_index": 1779,
      "function": "decimals()",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1780,
      "function": "decimals()",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1781,
      "function": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1782,
      "function": "reinvest(uint256=255,address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8"
    },
    {
      "trace_index": 1784,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 1785,
      "function": "burn(int24=-196216,int24=-102028,uint128=0)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1786,
      "function": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1788,
      "function": "amarettoIdealist()",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8"
    },
    {
      "trace_index": 1789,
      "function": "detectabilityAntiauthoritarianism()",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8"
    },
    {
      "trace_index": 1792,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 1793,
      "function": "slot0()",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1794,
      "function": "collect(address=0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1,int24=-196216,int24=-102028,uint128=3570410595892,uint128=388058868833)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1795,
      "function": "transfer(address=0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1,uint256=3570410595892)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1796,
      "function": "transfer(address=0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1,uint256=388058868833)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1797,
      "function": "transfer(address=0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1,uint256=388058868833)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1799,
      "function": "amarettoIdealist()",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8"
    },
    {
      "trace_index": 1800,
      "function": "detectabilityAntiauthoritarianism()",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8"
    },
    {
      "trace_index": 1802,
      "function": "mint(address=0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8,int24=-196216,int24=-102028,uint128=64324521362657,bytes=0x00000000000000000000000000000000000000000000000000000000000000c80000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1803,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1804,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1805,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1806,
      "function": "uniswapV3MintCallback(uint256=3570410595892,uint256=388058868833,bytes=0x00000000000000000000000000000000000000000000000000000000000000c80000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1"
    },
    {
      "trace_index": 1807,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 1808,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=3570410595892)",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1809,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=388058868833)",
      "from": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1810,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=388058868833)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1811,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1812,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1813,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1814,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 1815,
      "function": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1819,
      "function": "getPositionData(uint256=255,uint256=1183215960000000000)",
      "from": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8"
    },
    {
      "trace_index": 1820,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 1821,
      "function": "burn(int24=-196216,int24=-102028,uint128=0)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1822,
      "function": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1824,
      "function": "latestAnswer()",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70"
    },
    {
      "trace_index": 1825,
      "function": "latestAnswer()",
      "from": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70",
      "to": "0x57d2d46fc7ff2a7142d479f2f59e1e3f95447077"
    },
    {
      "trace_index": 1826,
      "function": "latestAnswer()",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b"
    },
    {
      "trace_index": 1827,
      "function": "latestAnswer()",
      "from": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
      "to": "0x0ee7145e1370653533e2f2e824424be2aa95a4aa"
    },
    {
      "trace_index": 1828,
      "function": "decimals()",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70"
    },
    {
      "trace_index": 1829,
      "function": "decimals()",
      "from": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70",
      "to": "0x57d2d46fc7ff2a7142d479f2f59e1e3f95447077"
    },
    {
      "trace_index": 1830,
      "function": "decimals()",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1831,
      "function": "decimals()",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b"
    },
    {
      "trace_index": 1832,
      "function": "decimals()",
      "from": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
      "to": "0x0ee7145e1370653533e2f2e824424be2aa95a4aa"
    },
    {
      "trace_index": 1833,
      "function": "decimals()",
      "from": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1834,
      "function": "decimals()",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1836,
      "function": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1838,
      "function": "balanceOf(address=0xbc303acda8b2a0dcd3d17f05adddf854edd6da59)",
      "from": "0xbc303acda8b2a0dcd3d17f05adddf854edd6da59",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1839,
      "function": "balanceOf(address=0xbc303acda8b2a0dcd3d17f05adddf854edd6da59)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1841,
      "function": "transfer(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee,uint256=60090323578407036263)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1843,
      "function": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1844,
      "function": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1845,
      "function": "redeem(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=255,uint256=1000000000000000000)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d"
    },
    {
      "trace_index": 1846,
      "function": "safeTransferFrom(address=0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d,address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=255)",
      "from": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8"
    },
    {
      "trace_index": 1847,
      "function": "onERC721Received(address=0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d,address=0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d,uint256=255,bytes=0x)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1850,
      "function": "redeem(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=255)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8"
    },
    {
      "trace_index": 1851,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 1852,
      "function": "burn(int24=-196216,int24=-102028,uint128=3379531519108024)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1853,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=200)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 1854,
      "function": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1855,
      "function": "positions(bytes32=0x620f12dc30fd1c2ea29217f1f6377cc00a7c842dc210f4063f2312bbd74fac2b)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1856,
      "function": "collect(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,int24=-196216,int24=-102028,uint128=270092181037741240,uint128=20388137380709)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1857,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=270092181037741240)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1858,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=20388137380709)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1859,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=20388137380709)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1860,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=14260200223938238,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608"
    },
    {
      "trace_index": 1861,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=999799848)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1862,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=999799848)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1863,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1864,
      "function": "uniswapV3SwapCallback(int256=14260200223938238,int256=-999799848,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1865,
      "function": "transfer(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608,uint256=14260200223938238)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1866,
      "function": "balanceOf(address=0x1c450d7d1fd98a0b04e30decfc83497b33a4f608)",
      "from": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1867,
      "function": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1868,
      "function": "exchangeRate()",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee"
    },
    {
      "trace_index": 1869,
      "function": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee"
    },
    {
      "trace_index": 1870,
      "function": "transfer(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee,uint256=120924566533707506470)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee"
    },
    {
      "trace_index": 1871,
      "function": "redeem(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee"
    },
    {
      "trace_index": 1872,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=60090323578407036262)",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1873,
      "function": "balanceOf(address=0x5d93f216f17c225a8b5ffa34e74b7133436281ee)",
      "from": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1875,
      "function": "getPool(address=0x4200000000000000000000000000000000000006,address=0x833589fcd6edb6e08f4c7c32d4f71b54bda02913,uint24=500)",
      "from": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "to": "0x33128a8fc17869897dce68ed026d694621f6fdfd"
    },
    {
      "trace_index": 1876,
      "function": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1877,
      "function": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1878,
      "function": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1879,
      "function": "swap(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,bool=true,int256=-19760825,uint160=4295128740,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xd0b53d9277642d899df5c87a3966a349a798f224"
    },
    {
      "trace_index": 1880,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19760825)",
      "from": "0xd0b53d9277642d899df5c87a3966a349a798f224",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1881,
      "function": "transfer(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,uint256=19760825)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1882,
      "function": "balanceOf(address=0xd0b53d9277642d899df5c87a3966a349a798f224)",
      "from": "0xd0b53d9277642d899df5c87a3966a349a798f224",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1883,
      "function": "uniswapV3SwapCallback(int256=10921226074968110,int256=-19760825,bytes=0x0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913)",
      "from": "0xd0b53d9277642d899df5c87a3966a349a798f224",
      "to": "0x98e938899902217465f17cf0b76d12b3dca8ce1b"
    },
    {
      "trace_index": 1884,
      "function": "transfer(address=0xd0b53d9277642d899df5c87a3966a349a798f224,uint256=10921226074968110)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1885,
      "function": "balanceOf(address=0xd0b53d9277642d899df5c87a3966a349a798f224)",
      "from": "0xd0b53d9277642d899df5c87a3966a349a798f224",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1886,
      "function": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1887,
      "function": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1888,
      "function": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1889,
      "function": "transferFrom(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb,uint256=22539727986604)",
      "from": "0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1890,
      "function": "transferFrom(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb,uint256=22539727986604)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1891,
      "function": "transferFrom(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b,address=0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb,uint256=10544813644832897955984)",
      "from": "0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1892,
      "function": "amarettoIdealist()",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xd0b53d9277642d899df5c87a3966a349a798f224"
    },
    {
      "trace_index": 1893,
      "function": "detectabilityAntiauthoritarianism()",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0xd0b53d9277642d899df5c87a3966a349a798f224"
    },
    {
      "trace_index": 1894,
      "function": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1895,
      "function": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    },
    {
      "trace_index": 1896,
      "function": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1897,
      "function": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1898,
      "function": "withdraw(uint256=34596457958884485813)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1901,
      "function": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x4200000000000000000000000000000000000006"
    },
    {
      "trace_index": 1902,
      "function": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "to": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
    },
    {
      "trace_index": 1903,
      "function": "balanceOf(address=0x98e938899902217465f17cf0b76d12b3dca8ce1b)",
      "from": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "to": "0x2ce6311ddae708829bc0784c967b7d77d19fd779"
    }
  ],
  "contract_info": {
    "0xe3223f7e3343c2c8079f261d59ee1e513086c7c3": {
      "address": "0xe3223f7e3343c2c8079f261d59ee1e513086c7c3",
      "has_source_code": false,
      "source_code": null,
      "abi": "Contract source code not verified",
      "contract_name": "Unknown",
      "compiler_version": null,
      "optimization_used": null,
      "runs": null,
      "constructor_arguments": null,
      "evm_version": null,
      "library": null,
      "license_type": null,
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1": {
      "address": "0x77eb9ceca49b87cf52d4f0c4e8fc9f86cbdd16c1",
      "has_source_code": true,
      "source_code": "// File: contracts\\interfaces\\IERC20.sol\r\n\r\npragma solidity >=0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n// File: contracts\\libraries\\Math.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n// a library for performing various math operations\r\n// forked from: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/libraries/Math.sol\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\t\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        z = x > y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\libraries\\SafeMath.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\r\n// Subject to the MIT license.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction underflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\extensions\\interfaces\\ITokenizedUniswapV3Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ITokenizedUniswapV3Factory {\r\n\tevent NFTLPCreated(address indexed token0, address indexed token1, address NFTLP, uint);\r\n\tevent NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\tevent NewAdmin(address oldAdmin, address newAdmin);\r\n\tevent NewAcModule(address oldAcModule, address newAcModule);\r\n\t\r\n\tfunction admin() external view returns (address);\r\n\tfunction pendingAdmin() external view returns (address);\r\n\t\r\n\tfunction uniswapV3Factory() external view returns (address);\r\n\tfunction deployer() external view returns (address);\r\n\tfunction oracle() external view returns (address);\r\n\tfunction acModule() external view returns (address);\r\n\t\r\n\tfunction getNFTLP(address tokenA, address tokenB) external view returns (address);\r\n\tfunction allNFTLP(uint) external view returns (address);\r\n\tfunction allNFTLPLength() external view returns (uint);\r\n\t\r\n\tfunction createNFTLP(address tokenA, address tokenB) external returns (address NFTLP);\r\n\t\r\n\tfunction _setPendingAdmin(address newPendingAdmin) external;\r\n\tfunction _acceptAdmin() external;\r\n\tfunction _setAcModule(address newAcModule) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\INFTLP.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface INFTLP {\r\n\tstruct RealXY {\r\n\t\tuint256 realX;\r\n\t\tuint256 realY;\r\n\t}\r\n\t\r\n\tstruct RealXYs {\r\n\t\tRealXY lowestPrice;\r\n\t\tRealXY currentPrice;\r\n\t\tRealXY highestPrice;\r\n\t}\r\n\t\r\n\t// ERC-721\r\n\tfunction ownerOf(uint256 _tokenId) external view returns (address);\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\r\n\t\r\n\t// Global state\r\n\tfunction token0() external view returns (address);\r\n\tfunction token1() external view returns (address);\r\n\t\r\n\t// Position state\r\n\tfunction getPositionData(uint256 _tokenId, uint256 _safetyMarginSqrt) external returns (\r\n\t\tuint256 priceSqrtX96,\r\n\t\tRealXYs memory realXYs\r\n\t);\r\n\t\r\n\t// Interactions\r\n\t\r\n\tfunction split(uint256 tokenId, uint256 percentage) external returns (uint256 newTokenId);\r\n\tfunction join(uint256 tokenId, uint256 tokenToJoin) external;\r\n}\r\n\r\n// File: contracts\\extensions\\interfaces\\ITokenizedUniswapV3Position.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ITokenizedUniswapV3Position {\r\n\t\r\n\t// ERC-721\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\t\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\tfunction nonces(uint256 tokenId) external view returns (uint256);\r\n\t\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction approve(address to, uint256 tokenId) external;\r\n\tfunction setApprovalForAll(address operator, bool approved) external;\r\n\tfunction permit(address spender, uint tokenId, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\t\r\n\t// INFTLP\r\n\t\r\n\tfunction token0() external view returns (address);\r\n\tfunction token1() external view returns (address);\r\n\tfunction getPositionData(uint256 _tokenId, uint256 _safetyMarginSqrt) external returns (\r\n\t\tuint256 priceSqrtX96,\r\n\t\tINFTLP.RealXYs memory realXYs\r\n\t);\r\n\t\r\n\tfunction join(uint256 tokenId, uint256 tokenToJoin) external;\r\n\tfunction split(uint256 tokenId, uint256 percentage) external returns (uint256 newTokenId);\r\n\t\r\n\t// ITokenizedUniswapV3Position\r\n\t\r\n\tstruct Position {\r\n\t\tuint24 fee;\r\n\t\tint24 tickLower;\r\n\t\tint24 tickUpper;\r\n\t\tuint128 liquidity;\r\n\t\tuint256 feeGrowthInside0LastX128;\r\n\t\tuint256 feeGrowthInside1LastX128;\r\n\t\tuint256 unclaimedFees0;\t\r\n\t\tuint256 unclaimedFees1;\t\r\n\t}\r\n\t\r\n\tfunction factory() external view returns (address);\r\n\tfunction uniswapV3Factory() external view returns (address);\r\n\t\r\n\tfunction totalBalance(uint24 fee, int24 tickLower, int24 tickUpper) external view returns (uint256);\r\n\t\r\n\tfunction positions(uint256 tokenId) external view returns (\r\n\t\tuint24 fee,\r\n\t\tint24 tickLower,\r\n\t\tint24 tickUpper,\r\n\t\tuint128 liquidity,\r\n\t\tuint256 feeGrowthInside0LastX128,\r\n\t\tuint256 feeGrowthInside1LastX128,\r\n\t\tuint256 unclaimedFees0,\r\n\t\tuint256 unclaimedFees1\r\n\t);\r\n\tfunction positionsLength() external view returns (uint256);\r\n\t\r\n\tfunction getPool(uint24 fee) external view returns (address pool);\r\n\t\r\n\tfunction oraclePriceSqrtX96() external returns (uint256);\r\n\t\r\n\tevent MintPosition(uint256 indexed tokenId, uint24 fee, int24 tickLower, int24 tickUpper);\r\n\tevent UpdatePositionLiquidity(uint256 indexed tokenId, uint256 liquidity);\r\n\tevent UpdatePositionFeeGrowthInside(uint256 indexed tokenId, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128);\r\n\tevent UpdatePositionUnclaimedFees(uint256 indexed tokenId, uint256 unclaimedFees0, uint256 unclaimedFees1);\r\n\r\n\tfunction _initialize (\r\n\t\taddress _uniswapV3Factory, \r\n\t\taddress _oracle, \r\n\t\taddress _token0, \r\n\t\taddress _token1\r\n\t) external;\r\n\t\r\n\tfunction mint(address to, uint24 fee, int24 tickLower, int24 tickUpper) external  returns (uint256 newTokenId);\r\n\tfunction redeem(address to, uint256 tokenId) external  returns (uint256 amount0, uint256 amount1);\r\n\r\n}\r\n\r\n// File: contracts\\extensions\\interfaces\\IUniswapV3Factory.sol\r\n\r\n// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title The interface for the Uniswap V3 Factory\r\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\r\ninterface IUniswapV3Factory {\r\n    /// @notice Emitted when the owner of the factory is changed\r\n    /// @param oldOwner The owner before the owner was changed\r\n    /// @param newOwner The owner after the owner was changed\r\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\r\n\r\n    /// @notice Emitted when a pool is created\r\n    /// @param token0 The first token of the pool by address sort order\r\n    /// @param token1 The second token of the pool by address sort order\r\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\r\n    /// @param pool The address of the created pool\r\n    event PoolCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        uint24 indexed fee,\r\n        int24 tickSpacing,\r\n        address pool\r\n    );\r\n\r\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\r\n    /// @param fee The enabled fee, denominated in hundredths of a bip\r\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\r\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\r\n\r\n    /// @notice Returns the current owner of the factory\r\n    /// @dev Can be changed by the current owner via setOwner\r\n    /// @return The address of the factory owner\r\n    function owner() external view returns (address);\r\n\r\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\r\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\r\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\r\n    /// @return The tick spacing\r\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\r\n\r\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\r\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\r\n    /// @param tokenA The contract address of either token0 or token1\r\n    /// @param tokenB The contract address of the other token\r\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n    /// @return pool The pool address\r\n    function getPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) external view returns (address pool);\r\n\r\n    /// @notice Creates a pool for the given two tokens and fee\r\n    /// @param tokenA One of the two tokens in the desired pool\r\n    /// @param tokenB The other of the two tokens in the desired pool\r\n    /// @param fee The desired fee for the pool\r\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\r\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\r\n    /// are invalid.\r\n    /// @return pool The address of the newly created pool\r\n    function createPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) external returns (address pool);\r\n\r\n    /// @notice Updates the owner of the factory\r\n    /// @dev Must be called by the current owner\r\n    /// @param _owner The new owner of the factory\r\n    function setOwner(address _owner) external;\r\n\r\n    /// @notice Enables a fee amount with the given tickSpacing\r\n    /// @dev Fee amounts may never be removed once enabled\r\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\r\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\r\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\r\n}\r\n\r\n// File: contracts\\extensions\\interfaces\\IUniswapV3Pool.sol\r\n\r\n// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV3Pool {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function fee() external view returns (uint24);\r\n    function tickSpacing() external view returns (int24);\r\n    function maxLiquidityPerTick() external view returns (uint128);\r\n\t\r\n    function slot0()\r\n        external\r\n        view\r\n        returns (\r\n            uint160 sqrtPriceX96,\r\n            int24 tick,\r\n            uint16 observationIndex,\r\n            uint16 observationCardinality,\r\n            uint16 observationCardinalityNext,\r\n            uint8 feeProtocol,\r\n            bool unlocked\r\n        );\r\n\r\n    function feeGrowthGlobal0X128() external view returns (uint256);\r\n    function feeGrowthGlobal1X128() external view returns (uint256);\r\n    function protocolFees() external view returns (uint128, uint128);\r\n    function liquidity() external view returns (uint128);\r\n\r\n    function ticks(int24 tick)\r\n        external\r\n        view\r\n        returns (\r\n            uint128 liquidityGross,\r\n            int128 liquidityNet,\r\n            uint256 feeGrowthOutside0X128,\r\n            uint256 feeGrowthOutside1X128,\r\n            int56 tickCumulativeOutside,\r\n            uint160 secondsPerLiquidityOutsideX128,\r\n            uint32 secondsOutside,\r\n            bool initialized\r\n        );\r\n\r\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\r\n\r\n    function positions(bytes32 key)\r\n        external\r\n        view\r\n        returns (\r\n            uint128 _liquidity,\r\n            uint256 feeGrowthInside0LastX128,\r\n            uint256 feeGrowthInside1LastX128,\r\n            uint128 tokensOwed0,\r\n            uint128 tokensOwed1\r\n        );\r\n\r\n    function observations(uint256 index)\r\n        external\r\n        view\r\n        returns (\r\n            uint32 blockTimestamp,\r\n            int56 tickCumulative,\r\n            uint160 secondsPerLiquidityCumulativeX128,\r\n            bool initialized\r\n        );\r\n\t\t\r\n    function observe(uint32[] calldata secondsAgos)\r\n        external\r\n        view\r\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\r\n\r\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\r\n        external\r\n        view\r\n        returns (\r\n            int56 tickCumulativeInside,\r\n            uint160 secondsPerLiquidityInsideX128,\r\n            uint32 secondsInside\r\n        );\r\n\t\t\r\n    function initialize(uint160 sqrtPriceX96) external;\r\n\r\n    function mint(\r\n        address recipient,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount,\r\n        bytes calldata data\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function collect(\r\n        address recipient,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount0Requested,\r\n        uint128 amount1Requested\r\n    ) external returns (uint128 amount0, uint128 amount1);\r\n\r\n    function burn(\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        address recipient,\r\n        bool zeroForOne,\r\n        int256 amountSpecified,\r\n        uint160 sqrtPriceLimitX96,\r\n        bytes calldata data\r\n    ) external returns (int256 amount0, int256 amount1);\r\n\t\r\n    function flash(\r\n        address recipient,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\r\n}\r\n\r\n// File: contracts\\extensions\\interfaces\\IUniswapV3AC01.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV3AC01 {\r\n\t\r\n\tfunction uniswapV3Factory() external view returns (address);\r\n\tfunction tokenizedUniswapV3Factory() external view returns (address);\r\n\t\r\n\tfunction MAX_REINVEST_BOUNTY() external view returns (uint256);\r\n\tfunction MAX_BOUNTY_T() external view returns (uint256);\r\n\tfunction PROTOCOL_SHARE() external view returns (uint256);\r\n\t\r\n\tfunction getToCollect(\r\n\t\tITokenizedUniswapV3Position.Position calldata position, \r\n\t\tuint256 tokenId, \r\n\t\tuint256 feeCollected0, \r\n\t\tuint256 feeCollected1\r\n\t) external returns (uint256 collect0, uint256 collect1, bytes memory data);\r\n\t\r\n\tfunction mintLiquidity(\r\n\t\taddress bountyTo, \r\n\t\tbytes calldata data\r\n\t) external returns (uint256 bounty0, uint256 bounty1);\r\n\t\r\n\t/* Reserve Manager */\r\n\t\r\n\tevent NewReservesPendingAdmin(address oldReservesPendingAdmin, address newReservesPendingAdmin);\r\n\tevent NewReservesAdmin(address oldReservesAdmin, address newReservesAdmin);\r\n\tevent NewReservesManager(address oldReservesManager, address newReservesManager);\r\n\t\r\n\tfunction reservesAdmin() external view returns (address);\r\n\tfunction reservesPendingAdmin() external view returns (address);\r\n\tfunction reservesManager() external view returns (address);\r\n\t\r\n\tfunction _setReservesPendingAdmin(address newPendingAdmin) external;\r\n\tfunction _acceptReservesAdmin() external;\r\n\tfunction _setReservesManager(address newReservesManager) external;\r\n\t\r\n\tfunction claimToken(address token) external;\r\n\tfunction claimTokens(address[] calldata tokens) external;\r\n}\r\n\r\n// File: contracts\\extensions\\libraries\\TransferHelper.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity >=0.5.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeApprove: approve failed'\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeTransfer: transfer failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call.value(value)(new bytes(0));\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n}\r\n\r\n// File: contracts\\libraries\\FullMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.0 <0.8.0;\r\n\r\n/// @title Contains 512-bit math functions\r\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\r\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\r\nlibrary FullMath {\r\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n    /// @param a The multiplicand\r\n    /// @param b The multiplier\r\n    /// @param denominator The divisor\r\n    /// @return result The 256-bit result\r\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n    function mulDiv(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        // 512-bit multiply [prod1 prod0] = a * b\r\n        // Compute the product mod 2**256 and mod 2**256 - 1\r\n        // then use the Chinese Remainder Theorem to reconstruct\r\n        // the 512 bit result. The result is stored in two 256\r\n        // variables such that product = prod1 * 2**256 + prod0\r\n        uint256 prod0; // Least significant 256 bits of the product\r\n        uint256 prod1; // Most significant 256 bits of the product\r\n        assembly {\r\n            let mm := mulmod(a, b, not(0))\r\n            prod0 := mul(a, b)\r\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n        }\r\n\r\n        // Handle non-overflow cases, 256 by 256 division\r\n        if (prod1 == 0) {\r\n            require(denominator > 0);\r\n            assembly {\r\n                result := div(prod0, denominator)\r\n            }\r\n            return result;\r\n        }\r\n\r\n        // Make sure the result is less than 2**256.\r\n        // Also prevents denominator == 0\r\n        require(denominator > prod1);\r\n\r\n        ///////////////////////////////////////////////\r\n        // 512 by 256 division.\r\n        ///////////////////////////////////////////////\r\n\r\n        // Make division exact by subtracting the remainder from [prod1 prod0]\r\n        // Compute remainder using mulmod\r\n        uint256 remainder;\r\n        assembly {\r\n            remainder := mulmod(a, b, denominator)\r\n        }\r\n        // Subtract 256 bit number from 512 bit number\r\n        assembly {\r\n            prod1 := sub(prod1, gt(remainder, prod0))\r\n            prod0 := sub(prod0, remainder)\r\n        }\r\n\r\n        // Factor powers of two out of denominator\r\n        // Compute largest power of two divisor of denominator.\r\n        // Always >= 1.\r\n        uint256 twos = -denominator & denominator;\r\n        // Divide denominator by power of two\r\n        assembly {\r\n            denominator := div(denominator, twos)\r\n        }\r\n\r\n        // Divide [prod1 prod0] by the factors of two\r\n        assembly {\r\n            prod0 := div(prod0, twos)\r\n        }\r\n        // Shift in bits from prod1 into prod0. For this we need\r\n        // to flip `twos` such that it is 2**256 / twos.\r\n        // If twos is zero, then it becomes one\r\n        assembly {\r\n            twos := add(div(sub(0, twos), twos), 1)\r\n        }\r\n        prod0 |= prod1 * twos;\r\n\r\n        // Invert denominator mod 2**256\r\n        // Now that denominator is an odd number, it has an inverse\r\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n        // Compute the inverse by starting with a seed that is correct\r\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n        uint256 inv = (3 * denominator) ^ 2;\r\n        // Now use Newton-Raphson iteration to improve the precision.\r\n        // Thanks to Hensel's lifting lemma, this also works in modular\r\n        // arithmetic, doubling the correct bits in each step.\r\n        inv *= 2 - denominator * inv; // inverse mod 2**8\r\n        inv *= 2 - denominator * inv; // inverse mod 2**16\r\n        inv *= 2 - denominator * inv; // inverse mod 2**32\r\n        inv *= 2 - denominator * inv; // inverse mod 2**64\r\n        inv *= 2 - denominator * inv; // inverse mod 2**128\r\n        inv *= 2 - denominator * inv; // inverse mod 2**256\r\n\r\n        // Because the division is now exact we can divide by multiplying\r\n        // with the modular inverse of denominator. This will give us the\r\n        // correct result modulo 2**256. Since the precoditions guarantee\r\n        // that the outcome is less than 2**256, this is the final result.\r\n        // We don't need to compute the high bits of the result and prod1\r\n        // is no longer required.\r\n        result = prod0 * inv;\r\n        return result;\r\n    }\r\n\r\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n    /// @param a The multiplicand\r\n    /// @param b The multiplier\r\n    /// @param denominator The divisor\r\n    /// @return result The 256-bit result\r\n    function mulDivRoundingUp(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        result = mulDiv(a, b, denominator);\r\n        if (mulmod(a, b, denominator) > 0) {\r\n            require(result < uint256(-1));\r\n            result++;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\extensions\\libraries\\LiquidityAmounts.sol\r\n\r\n// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Liquidity amount functions\r\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\r\nlibrary LiquidityAmounts {\r\n    uint constant Q96 = 2**96;\r\n\t\r\n    /// @notice Downcasts uint256 to uint128\r\n    /// @param x The uint258 to be downcasted\r\n    /// @return y The passed value, downcasted to uint128\r\n    function toUint128(uint256 x) private pure returns (uint128 y) {\r\n        require((y = uint128(x)) == x);\r\n    }\r\n\r\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\r\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param amount0 The amount0 being sent in\r\n    /// @return liquidity The amount of returned liquidity\r\n    function getLiquidityForAmount0(\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint256 amount0\r\n    ) internal pure returns (uint128 liquidity) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, Q96);\r\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\r\n    }\r\n\r\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\r\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param amount1 The amount1 being sent in\r\n    /// @return liquidity The amount of returned liquidity\r\n    function getLiquidityForAmount1(\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint256 amount1\r\n    ) internal pure returns (uint128 liquidity) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n        return toUint128(FullMath.mulDiv(amount1, Q96, sqrtRatioBX96 - sqrtRatioAX96));\r\n    }\r\n\r\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\r\n    /// pool prices and the prices at the tick boundaries\r\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param amount0 The amount of token0 being sent in\r\n    /// @param amount1 The amount of token1 being sent in\r\n    /// @return liquidity The maximum amount of liquidity received\r\n    function getLiquidityForAmounts(\r\n        uint160 sqrtRatioX96,\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    ) internal pure returns (uint128 liquidity) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\r\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\r\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\r\n\r\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\r\n        } else {\r\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\r\n        }\r\n    }\r\n\r\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param liquidity The liquidity being valued\r\n    /// @return amount0 The amount of token0\r\n    function getAmount0ForLiquidity(\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint128 liquidity\r\n    ) internal pure returns (uint256 amount0) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n        return\r\n            FullMath.mulDiv(\r\n                uint256(liquidity) << 96,\r\n                sqrtRatioBX96 - sqrtRatioAX96,\r\n                sqrtRatioBX96\r\n            ) / sqrtRatioAX96;\r\n    }\r\n\r\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param liquidity The liquidity being valued\r\n    /// @return amount1 The amount of token1\r\n    function getAmount1ForLiquidity(\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint128 liquidity\r\n    ) internal pure returns (uint256 amount1) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, Q96);\r\n    }\r\n\r\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\r\n    /// pool prices and the prices at the tick boundaries\r\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param liquidity The liquidity being valued\r\n    /// @return amount0 The amount of token0\r\n    /// @return amount1 The amount of token1\r\n    function getAmountsForLiquidity(\r\n        uint160 sqrtRatioX96,\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint128 liquidity\r\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\r\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\r\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\r\n        } else {\r\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\extensions\\libraries\\TickMath.sol\r\n\r\n// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0 <0.8.0;\r\n\r\n/// @title Math library for computing sqrt prices from ticks and vice versa\r\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\r\n/// prices between 2**-128 and 2**128\r\nlibrary TickMath {\r\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\r\n    int24 internal constant MIN_TICK = -887272;\r\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\r\n    int24 internal constant MAX_TICK = -MIN_TICK;\r\n\r\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\r\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\r\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\r\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\r\n\r\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\r\n    /// @dev Throws if |tick| > max tick\r\n    /// @param tick The input tick for the above formula\r\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\r\n    /// at the given tick\r\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\r\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\r\n        require(absTick <= uint256(MAX_TICK), 'TickMath: T');\r\n\r\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\r\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\r\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\r\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\r\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\r\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\r\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\r\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\r\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\r\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\r\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\r\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\r\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\r\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\r\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\r\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\r\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\r\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\r\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\r\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\r\n\r\n        if (tick > 0) ratio = uint256(-1) / ratio;\r\n\r\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\r\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\r\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\r\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\r\n    }\r\n\r\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\r\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\r\n    /// ever return.\r\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\r\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\r\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\r\n        // second inequality must be < because the price can never reach the price at the max tick\r\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'TickMath: R');\r\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\r\n\r\n        uint256 r = ratio;\r\n        uint256 msb = 0;\r\n\r\n        assembly {\r\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(5, gt(r, 0xFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(4, gt(r, 0xFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(3, gt(r, 0xFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(2, gt(r, 0xF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(1, gt(r, 0x3))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := gt(r, 0x1)\r\n            msb := or(msb, f)\r\n        }\r\n\r\n        if (msb >= 128) r = ratio >> (msb - 127);\r\n        else r = ratio << (127 - msb);\r\n\r\n        int256 log_2 = (int256(msb) - 128) << 64;\r\n\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(63, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(62, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(61, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(60, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(59, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(58, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(57, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(56, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(55, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(54, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(53, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(52, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(51, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(50, f))\r\n        }\r\n\r\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\r\n\r\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\r\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\r\n\r\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\r\n    }\r\n}\r\n\r\n// File: contracts\\extensions\\UniswapV3AC01.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract UniswapV3AC01 is IUniswapV3AC01 {\r\n\tusing SafeMath for uint256;\r\n\tusing TickMath for int24;\r\n\t\r\n\taddress public uniswapV3Factory;\r\n\taddress public tokenizedUniswapV3Factory;\r\n\taddress public reservesAdmin;\r\n\taddress public reservesPendingAdmin;\r\n\taddress public reservesManager;\r\n\t\r\n\tconstructor(address _uniswapV3Factory, address _tokenizedUniswapV3Factory, address _reservesAdmin, address _reservesManager) public {\r\n\t\tuniswapV3Factory = _uniswapV3Factory;\r\n\t\ttokenizedUniswapV3Factory = _tokenizedUniswapV3Factory;\r\n\t\treservesAdmin = _reservesAdmin;\r\n\t\treservesManager = _reservesManager;\r\n\t\temit NewReservesAdmin(address(0), _reservesAdmin);\r\n\t\temit NewReservesManager(address(0), _reservesManager);\r\n\t}\r\n\t\r\n\t/*** Autocompounder ***/\r\n\t\r\n\tfunction _checkCaller() internal view returns (address token0, address token1) {\r\n\t\ttoken0 = ITokenizedUniswapV3Position(msg.sender).token0();\r\n\t\ttoken1 = ITokenizedUniswapV3Position(msg.sender).token1();\r\n\t\trequire(\r\n\t\t\tITokenizedUniswapV3Factory(tokenizedUniswapV3Factory).getNFTLP(token0, token1) == msg.sender,\r\n\t\t\t\"UniswapV3AC01: UNAUTHORIZED_CALLER\"\r\n\t\t);\r\n\t}\r\n\t\r\n    uint constant Q96 = 2**96;\r\n\t\t\r\n\tuint256 public constant MAX_REINVEST_BOUNTY = 0.02e18; // 2%\r\n\tuint256 public constant MAX_BOUNTY_T = 7 * 24 * 60 * 60; // 1 week\r\n\tuint256 public constant PROTOCOL_SHARE = 0.5e18; // 50%\r\n\t\r\n\tmapping(address => mapping(uint256 => uint256)) internal lastReinvest;\r\n\t\r\n\tfunction _getBounty(address nftlp, uint256 tokenId) internal returns (uint256) {\r\n\t\tuint timeDelta = block.timestamp - lastReinvest[nftlp][tokenId];\r\n\t\tlastReinvest[nftlp][tokenId] = block.timestamp;\r\n\t\treturn timeDelta > MAX_BOUNTY_T \r\n\t\t\t? MAX_REINVEST_BOUNTY \r\n\t\t\t: MAX_REINVEST_BOUNTY * timeDelta / MAX_BOUNTY_T;\r\n\t}\r\n\t\r\n\tfunction _getReinvestAmounts(\r\n\t\tuint256 liquidity,\r\n\t\tuint256 realX,\r\n\t\tuint256 realY,\r\n\t\tuint256 feeCollected0,\r\n\t\tuint256 feeCollected1\r\n\t) internal pure returns (uint256 newLiquidity, uint256 amount0, uint256 amount1) {\r\n\t\tif (realX == 0) {\r\n\t\t\tamount0 = 0;\r\n\t\t\tamount1 = feeCollected1;\r\n\t\t\tnewLiquidity = liquidity.mul(amount1).div(realY);\r\n\t\t} \r\n\t\telse if (realY == 0) {\r\n\t\t\tamount0 = feeCollected0;\r\n\t\t\tamount1 = 0;\r\n\t\t\tnewLiquidity = liquidity.mul(amount0).div(realX);\r\n\t\t} else {\r\n\t\t\tuint256 ratioX = feeCollected0.mul(1e18).div(realX);\r\n\t\t\tuint256 ratioY = feeCollected1.mul(1e18).div(realY);\r\n\t\t\tif (ratioX < ratioY) {\r\n\t\t\t\tamount0 = feeCollected0;\r\n\t\t\t\tamount1 = feeCollected1.mul(ratioX).div(ratioY);\r\n\t\t\t} else {\r\n\t\t\t\tamount0 = feeCollected0.mul(ratioY).div(ratioX);\r\n\t\t\t\tamount1 = feeCollected1;\r\n\t\t\t}\r\n\t\t\tnewLiquidity = Math.min(liquidity.mul(amount0).div(realX), liquidity.mul(amount1).div(realY));\r\n\t\t}\r\n\t}\r\n\t\r\n\tstruct AutocompoundData {\r\n\t\taddress pool;\r\n\t\tITokenizedUniswapV3Position.Position position;\r\n\t\tuint256 tokenId;\r\n\t\tuint256 collect0; \r\n\t\tuint256 collect1; \r\n\t\tuint256 newLiquidity;\r\n\t}\r\n\t\t\r\n\tfunction getToCollect(\r\n\t\tITokenizedUniswapV3Position.Position calldata position, \r\n\t\tuint256 tokenId, \r\n\t\tuint256 feeCollected0, \r\n\t\tuint256 feeCollected1\r\n\t) external returns (uint256 collect0, uint256 collect1, bytes memory data) {\r\n\t\t_checkCaller();\r\n\t\r\n\t\t// 1. Initialize\r\n\t\taddress pool = ITokenizedUniswapV3Position(msg.sender).getPool(position.fee);\r\n\t\t(uint160 priceSqrtX96,,,,,,) = IUniswapV3Pool(pool).slot0();\r\n\t\tuint256 reinvestBounty = _getBounty(msg.sender, tokenId);\r\n\r\n\t\t// 2. Read position proportion\r\n\t\t(uint256 realX, uint256 realY) = LiquidityAmounts.getAmountsForLiquidity(\r\n\t\t\tpriceSqrtX96, \r\n\t\t\tposition.tickLower.getSqrtRatioAtTick(), \r\n\t\t\tposition.tickUpper.getSqrtRatioAtTick(), \r\n\t\t\tposition.liquidity\r\n\t\t);\r\n\t\t\r\n\t\t// 3. Calculate how much of the earned fee we can compound for each side\r\n\t\tuint256 newLiquidity;\r\n\t\t(newLiquidity, collect0, collect1) = _getReinvestAmounts(position.liquidity, realX, realY, feeCollected0, feeCollected1);\r\n\t\tnewLiquidity = newLiquidity.mul(1e18 - reinvestBounty).div(1e18);\r\n\t\t\r\n\t\tdata = abi.encode(AutocompoundData({\r\n\t\t\tpool: pool,\r\n\t\t\tposition: position,\r\n\t\t\ttokenId: tokenId,\r\n\t\t\tcollect0: collect0,\r\n\t\t\tcollect1: collect1,\r\n\t\t\tnewLiquidity: newLiquidity\r\n\t\t}));\r\n\t}\r\n\t\r\n\tfunction mintLiquidity(\r\n\t\taddress bountyTo, \r\n\t\tbytes calldata data\r\n\t) external returns (uint256 bounty0, uint256 bounty1) {\r\n\t\t(address token0, address token1) = _checkCaller();\r\n\t\tAutocompoundData memory d = abi.decode(data, (AutocompoundData));\r\n\t\t\r\n\t\t(uint256 amount0, uint256 amount1) = IUniswapV3Pool(d.pool).mint(msg.sender, d.position.tickLower, d.position.tickUpper, safe128(d.newLiquidity), abi.encode(d.position.fee, token0, token1));\r\n\r\n\t\tuint256 protocolShare = reservesManager != address(0) ? PROTOCOL_SHARE : 0;\r\n\t\tbounty0 = d.collect0.sub(amount0).mul(1e18 - protocolShare).div(1e18);\r\n\t\tbounty1 = d.collect1.sub(amount1).mul(1e18 - protocolShare).div(1e18);\r\n\t\tif (bounty0 > 0) TransferHelper.safeTransfer(token0, bountyTo, bounty0);\r\n\t\tif (bounty1 > 0) TransferHelper.safeTransfer(token1, bountyTo, bounty1);\r\n\t}\r\n\t\r\n\tfunction uniswapV3MintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes calldata data) external {\t\r\n\t\t(uint24 fee, address token0, address token1) = abi.decode(data, (uint24, address, address));\r\n\t\trequire(\r\n\t\t\tIUniswapV3Factory(uniswapV3Factory).getPool(token0, token1, fee) == msg.sender,\r\n\t\t\t\"UniswapV3AC01: UNAUTHORIZED_CALLER\"\r\n\t\t);\r\n\t\t\r\n\t\tif (amount0Owed > 0) TransferHelper.safeTransfer(token0, msg.sender, amount0Owed);\r\n\t\tif (amount1Owed > 0) TransferHelper.safeTransfer(token1, msg.sender, amount1Owed);\r\n\t}\r\n\t\r\n\t/*** Reserves Manager ***/\r\n\t\r\n\tfunction _setReservesPendingAdmin(address newReservesPendingAdmin) external {\r\n\t\trequire(msg.sender == reservesAdmin, \"TokenizedUniswapV3Factory: UNAUTHORIZED\");\r\n\t\taddress oldReservesPendingAdmin = reservesPendingAdmin;\r\n\t\treservesPendingAdmin = newReservesPendingAdmin;\r\n\t\temit NewReservesPendingAdmin(oldReservesPendingAdmin, newReservesPendingAdmin);\r\n\t}\r\n\r\n\tfunction _acceptReservesAdmin() external {\r\n\t\trequire(msg.sender == reservesPendingAdmin, \"TokenizedUniswapV3Factory: UNAUTHORIZED\");\r\n\t\taddress oldReservesAdmin = reservesAdmin;\r\n\t\taddress oldReservesPendingAdmin = reservesPendingAdmin;\r\n\t\treservesAdmin = reservesPendingAdmin;\r\n\t\treservesPendingAdmin = address(0);\r\n\t\temit NewReservesAdmin(oldReservesAdmin, reservesAdmin);\r\n\t\temit NewReservesPendingAdmin(oldReservesPendingAdmin, address(0));\r\n\t}\r\n\r\n\tfunction _setReservesManager(address newReservesManager) external {\r\n\t\trequire(msg.sender == reservesAdmin, \"TokenizedUniswapV3Factory: UNAUTHORIZED\");\r\n\t\taddress oldReservesManager = reservesManager;\r\n\t\treservesManager = newReservesManager;\r\n\t\temit NewReservesManager(oldReservesManager, newReservesManager);\r\n\t}\r\n\t\r\n\tfunction claimToken(address token) public {\r\n\t\tuint256 amount = IERC20(token).balanceOf(address(this));\r\n\t\tif (amount > 0) TransferHelper.safeTransfer(token, reservesManager, amount);\r\n\t}\r\n\tfunction claimTokens(address[] calldata tokens) external {\r\n\t\tfor (uint i = 0; i < tokens.length; i++) {\r\n\t\t\tclaimToken(tokens[i]);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/*** Utilities ***/\r\n\r\n    function safe128(uint n) internal pure returns (uint128) {\r\n        require(n < 2**128, \"Impermax: SAFE128\");\r\n        return uint128(n);\r\n    }\r\n}",
      "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV3Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenizedUniswapV3Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reservesAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reservesManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldReservesAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReservesAdmin\",\"type\":\"address\"}],\"name\":\"NewReservesAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldReservesManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReservesManager\",\"type\":\"address\"}],\"name\":\"NewReservesManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldReservesPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReservesPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewReservesPendingAdmin\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BOUNTY_T\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_REINVEST_BOUNTY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROTOCOL_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptReservesAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReservesManager\",\"type\":\"address\"}],\"name\":\"_setReservesManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReservesPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setReservesPendingAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedFees0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedFees1\",\"type\":\"uint256\"}],\"internalType\":\"struct ITokenizedUniswapV3Position.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeCollected0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeCollected1\",\"type\":\"uint256\"}],\"name\":\"getToCollect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collect0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collect1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"bountyTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bounty0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bounty1\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservesAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservesManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservesPendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenizedUniswapV3Factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapV3Factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Owed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Owed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3MintCallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "contract_name": "UniswapV3AC01",
      "compiler_version": "v0.5.16+commit.9c3226ce",
      "optimization_used": "1",
      "runs": "999999",
      "constructor_arguments": "00000000000000000000000033128a8fc17869897dce68ed026d694621f6fdfd000000000000000000000000e5d6cf969c01bf8d6c46840ed784d7f209038d7a0000000000000000000000009fd93712400902bff6040efa72b28bf80152f056000000000000000000000000d3080518e5678dc5464b7d4079d1046929985c59",
      "evm_version": "Default",
      "library": "",
      "license_type": "BSL 1.1",
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d": {
      "address": "0xc1d49fa32d150b31c4a5bf1cbf23cf7ac99eaf7d",
      "has_source_code": true,
      "source_code": "// File: contracts\\CStorage.sol\r\n\r\npragma solidity =0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract CStorage {\r\n\taddress public underlying;\r\n\taddress public factory;\r\n\taddress public borrowable0;\r\n\taddress public borrowable1;\r\n\tuint public safetyMarginSqrt = 1.58113883e18; //safetyMargin: 250%\r\n\tuint public liquidationIncentive = 1.02e18; //2%\r\n\tuint public liquidationFee = 0.02e18; //2%\r\n\tmapping(uint => uint) public blockOfLastRestructureOrLiquidation;\t\r\n\t\r\n\tfunction liquidationPenalty() public view returns (uint) {\r\n\t\treturn liquidationIncentive + liquidationFee;\r\n\t}\r\n}\r\n\r\n// File: contracts\\libraries\\SafeMath.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\r\n// Subject to the MIT license.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction underflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\IERC721.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC721 {\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\t\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\tfunction nonces(uint256 tokenId) external view returns (uint256);\r\n\t\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction approve(address to, uint256 tokenId) external;\r\n\tfunction setApprovalForAll(address operator, bool approved) external;\r\n\tfunction permit(address spender, uint tokenId, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\IERC721Receiver.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: contracts\\ImpermaxERC721.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract ImpermaxERC721 is IERC721 {\r\n\tusing SafeMath for uint;\r\n\t\r\n\tstring public name;\r\n\tstring public symbol;\r\n\t\r\n\tmapping(address => uint) public balanceOf;\r\n\tmapping(uint256 => address) internal _ownerOf;\r\n\tmapping(uint256 => address) public getApproved;\r\n\tmapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\t\r\n\tbytes32 public DOMAIN_SEPARATOR;\r\n\tmapping(uint256 => uint) public nonces;\r\n\r\n\tconstructor() public {}\r\n\t\r\n\tfunction _setName(string memory _name, string memory _symbol) internal {\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\t\r\n\t\tuint chainId;\r\n\t\tassembly {\r\n\t\t\tchainId := chainid\r\n\t\t}\r\n\t\tDOMAIN_SEPARATOR = keccak256(\r\n\t\t\tabi.encode(\r\n\t\t\t\tkeccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n\t\t\t\tkeccak256(bytes(_name)),\r\n\t\t\t\tkeccak256(bytes(\"1\")),\r\n\t\t\t\tchainId,\r\n\t\t\t\taddress(this)\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\t\r\n\tfunction _isAuthorized(address owner, address operator, uint256 tokenId) internal view returns (bool) {\r\n\t\treturn operator != address(0) && (owner == operator || isApprovedForAll[owner][operator] || getApproved[tokenId] == operator);\r\n\t}\r\n\r\n\tfunction _checkAuthorized(address owner, address operator, uint256 tokenId) internal view {\r\n\t\trequire(_isAuthorized(owner, operator, tokenId), \"ImpermaxERC721: UNAUTHORIZED\");\r\n\t}\r\n\r\n\tfunction _update(address to, uint256 tokenId, address auth) internal returns (address from) {\r\n\t\tfrom = _ownerOf[tokenId];\r\n\t\tif (auth != address(0)) _checkAuthorized(from, auth, tokenId);\r\n\r\n\t\tif (from != address(0)) {\r\n\t\t\t_approve(address(0), tokenId, address(0));\r\n\t\t\tbalanceOf[from] -= 1;\r\n\t\t}\r\n\r\n\t\tif (to != address(0)) {\r\n\t\t\tbalanceOf[to] += 1;\r\n\t\t}\r\n\r\n\t\t_ownerOf[tokenId] = to;\r\n\t\temit Transfer(from, to, tokenId);\r\n\t}\r\n\t\r\n\tfunction _mint(address to, uint256 tokenId) internal {\r\n\t\trequire(to != address(0), \"ImpermaxERC721: INVALID_RECEIVER\");\r\n\t\taddress previousOwner = _update(to, tokenId, address(0));\r\n\t\trequire(previousOwner == address(0), \"ImpermaxERC721: INVALID_SENDER\");\r\n\t}\r\n\tfunction _safeMint(address to, uint256 tokenId) internal {\r\n\t\t_safeMint(to, tokenId, \"\");\r\n\t}\r\n\tfunction _safeMint(address to, uint256 tokenId, bytes memory data) internal {\r\n\t\t_mint(to, tokenId);\r\n\t\t_checkOnERC721Received(address(0), to, tokenId, data);\r\n\t}\r\n\t\r\n\tfunction _burn(uint256 tokenId) internal {\r\n\t\taddress previousOwner = _update(address(0), tokenId, address(0));\r\n\t\trequire(previousOwner != address(0), \"ImpermaxERC721: NONEXISTENT_TOKEN\");\r\n\t}\r\n\t\r\n\tfunction _transfer(address from, address to, uint256 tokenId, address auth) internal {\r\n\t\trequire(to != address(0), \"ImpermaxERC721: INVALID_RECEIVER\");\r\n\t\taddress previousOwner = _update(to, tokenId, auth);\r\n\t\trequire(previousOwner != address(0), \"ImpermaxERC721: NONEXISTENT_TOKEN\");\r\n\t\trequire(previousOwner == from, \"ImpermaxERC721: INCORRECT_OWNER\");\r\n\t}\r\n\t\r\n\tfunction _safeTransfer(address from, address to, uint256 tokenId, address auth) internal {\r\n\t\t_safeTransfer(from, to, tokenId, \"\", auth);\r\n\t}\r\n\tfunction _safeTransfer(address from, address to, uint256 tokenId, bytes memory data, address auth) internal {\r\n\t\t_transfer(from, to, tokenId, auth);\r\n\t\t_checkOnERC721Received(from, to, tokenId, data);\r\n\t}\r\n\r\n\tfunction _approve(address to, uint256 tokenId, address auth) internal {\r\n\t\taddress owner = _requireOwned(tokenId);\r\n\t\trequire(auth == address(0) || auth == owner || isApprovedForAll[owner][auth], \"ImpermaxERC721: INVALID_APPROVER\");\r\n\t\tgetApproved[tokenId] = to;\r\n\t\temit Approval(owner, to, tokenId);\r\n\t}\r\n\r\n\tfunction _setApprovalForAll(address owner, address operator, bool approved) internal {\r\n\t\trequire(operator != address(0), \"ImpermaxERC721: INVALID_OPERATOR\");\r\n\t\tisApprovedForAll[owner][operator] = approved;\r\n\t\temit ApprovalForAll(owner, operator, approved);\r\n\t}\r\n\t\r\n\tfunction _requireOwned(uint256 tokenId) internal view returns (address) {\r\n\t\taddress owner = _ownerOf[tokenId];\r\n\t\trequire(owner != address(0), \"ImpermaxERC721: NONEXISTENT_TOKEN\");\r\n\t\treturn owner;\r\n\t}\r\n\t\r\n\tfunction _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) internal {\r\n\t\tif (isContract(to)) {\r\n\t\t\tbytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, data);\r\n\t\t\trequire(retval == bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")), \"ImpermaxERC721: INVALID_RECEIVER\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address) {\r\n\t\treturn _requireOwned(tokenId);\r\n\t}\r\n\t\r\n\tfunction approve(address to, uint256 tokenId) external {\r\n\t\t_approve(to, tokenId, msg.sender);\r\n\t}\r\n\t\r\n\tfunction setApprovalForAll(address operator, bool approved) external {\r\n\t\t_setApprovalForAll(msg.sender, operator, approved);\r\n\t}\r\n\t\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external {\r\n\t\t_transfer(from, to, tokenId, msg.sender);\r\n\t}\r\n\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external {\r\n\t\t_safeTransfer(from, to, tokenId, msg.sender);\r\n\t}\r\n\t\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external {\r\n\t\t_safeTransfer(from, to, tokenId, data, msg.sender);\r\n\t}\r\n\t\r\n\tfunction _checkSignature(address spender, uint tokenId, uint deadline, uint8 v, bytes32 r, bytes32 s, bytes32 typehash) internal {\r\n\t\trequire(deadline >= block.timestamp, \"ImpermaxERC721: EXPIRED\");\r\n\t\tbytes32 digest = keccak256(\r\n\t\t\tabi.encodePacked(\r\n\t\t\t\t'\\x19\\x01',\r\n\t\t\t\tDOMAIN_SEPARATOR,\r\n\t\t\t\tkeccak256(abi.encode(typehash, spender, tokenId, nonces[tokenId]++, deadline))\r\n\t\t\t)\r\n\t\t);\r\n\t\taddress owner = _requireOwned(tokenId);\r\n\t\taddress recoveredAddress = ecrecover(digest, v, r, s);\r\n\t\trequire(recoveredAddress == owner, \"ImpermaxERC721: INVALID_SIGNATURE\");\t\r\n\t}\r\n\r\n\t// keccak256(\"Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\");\r\n\tbytes32 public constant PERMIT_TYPEHASH = 0x49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad;\r\n\tfunction permit(address spender, uint tokenId, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n\t\t_checkSignature(spender, tokenId, deadline, v, r, s, PERMIT_TYPEHASH);\r\n\t\t_approve(spender, tokenId, address(0));\r\n\t}\r\n\t\r\n\t/* Utilities */\r\n\tfunction isContract(address _addr) private view returns (bool){\r\n\t\tuint32 size;\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(_addr)\r\n\t\t}\r\n\t\treturn (size > 0);\r\n\t}\r\n}\r\n\r\n// File: contracts\\interfaces\\IFactory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IFactory {\r\n\tevent LendingPoolInitialized(address indexed nftlp, address indexed token0, address indexed token1,\r\n\t\taddress collateral, address borrowable0, address borrowable1, uint lendingPoolId);\r\n\tevent NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\tevent NewAdmin(address oldAdmin, address newAdmin);\r\n\tevent NewReservesPendingAdmin(address oldReservesPendingAdmin, address newReservesPendingAdmin);\r\n\tevent NewReservesAdmin(address oldReservesAdmin, address newReservesAdmin);\r\n\tevent NewReservesManager(address oldReservesManager, address newReservesManager);\r\n\t\r\n\tfunction admin() external view returns (address);\r\n\tfunction pendingAdmin() external view returns (address);\r\n\tfunction reservesAdmin() external view returns (address);\r\n\tfunction reservesPendingAdmin() external view returns (address);\r\n\tfunction reservesManager() external view returns (address);\r\n\r\n\tfunction getLendingPool(address nftlp) external view returns (\r\n\t\tbool initialized, \r\n\t\tuint24 lendingPoolId, \r\n\t\taddress collateral, \r\n\t\taddress borrowable0, \r\n\t\taddress borrowable1\r\n\t);\r\n\tfunction allLendingPools(uint) external view returns (address nftlp);\r\n\tfunction allLendingPoolsLength() external view returns (uint);\r\n\t\r\n\tfunction bDeployer() external view returns (address);\r\n\tfunction cDeployer() external view returns (address);\r\n\r\n\tfunction createCollateral(address nftlp) external returns (address collateral);\r\n\tfunction createBorrowable0(address nftlp) external returns (address borrowable0);\r\n\tfunction createBorrowable1(address nftlp) external returns (address borrowable1);\r\n\tfunction initializeLendingPool(address nftlp) external;\r\n\r\n\tfunction _setPendingAdmin(address newPendingAdmin) external;\r\n\tfunction _acceptAdmin() external;\r\n\tfunction _setReservesPendingAdmin(address newPendingAdmin) external;\r\n\tfunction _acceptReservesAdmin() external;\r\n\tfunction _setReservesManager(address newReservesManager) external;\r\n}\r\n\r\n// File: contracts\\CSetter.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\ncontract CSetter is ImpermaxERC721, CStorage {\r\n\r\n\tuint public constant SAFETY_MARGIN_SQRT_MIN = 1.00e18; //safetyMargin: 100%\r\n\tuint public constant SAFETY_MARGIN_SQRT_MAX = 1.58113884e18; //safetyMargin: 250%\r\n\tuint public constant LIQUIDATION_INCENTIVE_MIN = 1.00e18; //100%\r\n\tuint public constant LIQUIDATION_INCENTIVE_MAX = 1.05e18; //105%\r\n\tuint public constant LIQUIDATION_FEE_MAX = 0.08e18; //8%\r\n\t\r\n\tevent NewSafetyMargin(uint newSafetyMarginSqrt);\r\n\tevent NewLiquidationIncentive(uint newLiquidationIncentive);\r\n\tevent NewLiquidationFee(uint newLiquidationFee);\r\n\r\n\t// called once by the factory\r\n\tfunction _setFactory() external {\r\n\t\trequire(factory == address(0), \"ImpermaxV3Collateral: FACTORY_ALREADY_SET\");\r\n\t\tfactory = msg.sender;\r\n\t}\r\n\t\r\n\tfunction _initialize (\r\n\t\tstring calldata _name,\r\n\t\tstring calldata _symbol,\r\n\t\taddress _underlying, \r\n\t\taddress _borrowable0, \r\n\t\taddress _borrowable1\r\n\t) external {\r\n\t\trequire(msg.sender == factory, \"ImpermaxV3Collateral: UNAUTHORIZED\"); // sufficient check\r\n\t\t_setName(_name, _symbol);\r\n\t\tunderlying = _underlying;\r\n\t\tborrowable0 = _borrowable0;\r\n\t\tborrowable1 = _borrowable1;\r\n\t}\r\n\r\n\tfunction _setSafetyMarginSqrt(uint newSafetyMarginSqrt) external nonReentrant {\r\n\t\t_checkSetting(newSafetyMarginSqrt, SAFETY_MARGIN_SQRT_MIN, SAFETY_MARGIN_SQRT_MAX);\r\n\t\tsafetyMarginSqrt = newSafetyMarginSqrt;\r\n\t\temit NewSafetyMargin(newSafetyMarginSqrt);\r\n\t}\r\n\r\n\tfunction _setLiquidationIncentive(uint newLiquidationIncentive) external nonReentrant {\r\n\t\t_checkSetting(newLiquidationIncentive, LIQUIDATION_INCENTIVE_MIN, LIQUIDATION_INCENTIVE_MAX);\r\n\t\tliquidationIncentive = newLiquidationIncentive;\r\n\t\temit NewLiquidationIncentive(newLiquidationIncentive);\r\n\t}\r\n\r\n\tfunction _setLiquidationFee(uint newLiquidationFee) external nonReentrant {\r\n\t\t_checkSetting(newLiquidationFee, 0, LIQUIDATION_FEE_MAX);\r\n\t\tliquidationFee = newLiquidationFee;\r\n\t\temit NewLiquidationFee(newLiquidationFee);\r\n\t}\r\n\t\r\n\tfunction _checkSetting(uint parameter, uint min, uint max) internal view {\r\n\t\t_checkAdmin();\r\n\t\trequire(parameter >= min, \"ImpermaxV3Collateral: INVALID_SETTING\");\r\n\t\trequire(parameter <= max, \"ImpermaxV3Collateral: INVALID_SETTING\");\r\n\t}\r\n\t\r\n\tfunction _checkAdmin() internal view {\r\n\t\trequire(msg.sender == IFactory(factory).admin(), \"ImpermaxV3Collateral: UNAUTHORIZED\");\r\n\t}\r\n\t\r\n\t/*** Utilities ***/\r\n\t\r\n\t// prevents a contract from calling itself, directly or indirectly.\r\n\tbool internal _notEntered = true;\r\n\tmodifier nonReentrant() {\r\n\t\trequire(_notEntered, \"ImpermaxV3Collateral: REENTERED\");\r\n\t\t_notEntered = false;\r\n\t\t_;\r\n\t\t_notEntered = true;\r\n\t}\r\n}\r\n\r\n// File: contracts\\interfaces\\IBorrowable.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IBorrowable {\r\n\r\n\t/*** Impermax ERC20 ***/\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction totalSupply() external view returns (uint);\r\n\tfunction balanceOf(address owner) external view returns (uint);\r\n\tfunction allowance(address owner, address spender) external view returns (uint);\r\n\tfunction approve(address spender, uint value) external returns (bool);\r\n\tfunction transfer(address to, uint value) external returns (bool);\r\n\tfunction transferFrom(address from, address to, uint value) external returns (bool);\r\n\t\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\tfunction nonces(address owner) external view returns (uint);\r\n\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\t\r\n\t/*** Pool Token ***/\r\n\t\r\n\tevent Mint(address indexed sender, address indexed minter, uint mintAmount, uint mintTokens);\r\n\tevent Redeem(address indexed sender, address indexed redeemer, uint redeemAmount, uint redeemTokens);\r\n\tevent Sync(uint totalBalance);\r\n\t\r\n\tfunction underlying() external view returns (address);\r\n\tfunction factory() external view returns (address);\r\n\tfunction totalBalance() external view returns (uint);\r\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n\tfunction exchangeRate() external returns (uint);\r\n\tfunction mint(address minter) external returns (uint mintTokens);\r\n\tfunction redeem(address redeemer) external returns (uint redeemAmount);\r\n\tfunction skim(address to) external;\r\n\tfunction sync() external;\r\n\t\r\n\tfunction _setFactory() external;\r\n\t\r\n\t/*** Borrowable ***/\r\n\r\n\tevent BorrowApproval(address indexed owner, address indexed spender, uint value);\r\n\tevent Borrow(address indexed sender, uint256 indexed tokenId, address indexed receiver, uint borrowAmount, uint repayAmount, uint accountBorrowsPrior, uint accountBorrows, uint totalBorrows);\r\n\tevent Liquidate(address indexed sender, uint256 indexed tokenId, address indexed liquidator, uint seizeTokenId, uint repayAmount, uint accountBorrowsPrior, uint accountBorrows, uint totalBorrows);\r\n\tevent RestructureDebt(uint256 indexed tokenId, uint reduceToRatio, uint repayAmount, uint accountBorrowsPrior, uint accountBorrows, uint totalBorrows);\r\n\t\r\n\tfunction collateral() external view returns (address);\r\n\tfunction reserveFactor() external view returns (uint);\r\n\tfunction exchangeRateLast() external view returns (uint);\r\n\tfunction borrowIndex() external view returns (uint);\r\n\tfunction totalBorrows() external view returns (uint);\r\n\tfunction borrowAllowance(address owner, address spender) external view returns (uint);\r\n\tfunction borrowBalance(uint tokenId) external view returns (uint);\t\r\n\tfunction currentBorrowBalance(uint tokenId) external returns (uint);\t\r\n\t\r\n\tfunction BORROW_PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\tfunction borrowApprove(address spender, uint256 value) external returns (bool);\r\n\tfunction borrowPermit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\tfunction borrow(uint256 tokenId, address receiver, uint borrowAmount, bytes calldata data) external;\r\n\tfunction liquidate(uint256 tokenId, uint repayAmount, address liquidator, bytes calldata data) external returns (uint seizeTokenId);\r\n\tfunction restructureDebt(uint256 tokenId, uint256 reduceToRatio) external;\r\n\t\r\n\t/*** Borrowable Interest Rate Model ***/\r\n\r\n\tevent AccrueInterest(uint interestAccumulated, uint borrowIndex, uint totalBorrows);\r\n\tevent CalculateKink(uint kinkRate);\r\n\tevent CalculateBorrowRate(uint borrowRate);\r\n\t\r\n\tfunction KINK_BORROW_RATE_MAX() external pure returns (uint);\r\n\tfunction KINK_BORROW_RATE_MIN() external pure returns (uint);\r\n\tfunction KINK_MULTIPLIER() external pure returns (uint);\r\n\tfunction borrowRate() external view returns (uint);\r\n\tfunction kinkBorrowRate() external view returns (uint);\r\n\tfunction kinkUtilizationRate() external view returns (uint);\r\n\tfunction adjustSpeed() external view returns (uint);\r\n\tfunction rateUpdateTimestamp() external view returns (uint32);\r\n\tfunction accrualTimestamp() external view returns (uint32);\r\n\t\r\n\tfunction accrueInterest() external;\r\n\t\r\n\t/*** Borrowable Setter ***/\r\n\r\n\tevent NewReserveFactor(uint newReserveFactor);\r\n\tevent NewKinkUtilizationRate(uint newKinkUtilizationRate);\r\n\tevent NewAdjustSpeed(uint newAdjustSpeed);\r\n\tevent NewDebtCeiling(uint newDebtCeiling);\r\n\r\n\tfunction RESERVE_FACTOR_MAX() external pure returns (uint);\r\n\tfunction KINK_UR_MIN() external pure returns (uint);\r\n\tfunction KINK_UR_MAX() external pure returns (uint);\r\n\tfunction ADJUST_SPEED_MIN() external pure returns (uint);\r\n\tfunction ADJUST_SPEED_MAX() external pure returns (uint);\r\n\t\r\n\tfunction _initialize (\r\n\t\tstring calldata _name, \r\n\t\tstring calldata _symbol,\r\n\t\taddress _underlying, \r\n\t\taddress _collateral\r\n\t) external;\r\n\tfunction _setReserveFactor(uint newReserveFactor) external;\r\n\tfunction _setKinkUtilizationRate(uint newKinkUtilizationRate) external;\r\n\tfunction _setAdjustSpeed(uint newAdjustSpeed) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\ICollateral.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ICollateral {\r\n\t\r\n\t/* ImpermaxERC721 */\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\t\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction approve(address to, uint256 tokenId) external;\r\n\tfunction setApprovalForAll(address operator, bool approved) external;\r\n\tfunction permit(address spender, uint tokenId, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\t\r\n\t/* Collateral */\r\n\t\r\n\tevent Mint(address indexed to, uint tokenId);\r\n\tevent Redeem(address indexed to, uint tokenId, uint percentage, uint redeemTokenId);\r\n\tevent Seize(address indexed to, uint tokenId, uint percentage, uint redeemTokenId);\r\n\tevent RestructureBadDebt(uint tokenId, uint postLiquidationCollateralRatio);\r\n\t\r\n\tfunction underlying() external view returns (address);\r\n\tfunction factory() external view returns (address);\r\n\tfunction borrowable0() external view returns (address);\r\n\tfunction borrowable1() external view returns (address);\r\n\tfunction safetyMarginSqrt() external view returns (uint);\r\n\tfunction liquidationIncentive() external view returns (uint);\r\n\tfunction liquidationFee() external view returns (uint);\r\n\tfunction liquidationPenalty() external view returns (uint);\r\n\r\n\tfunction mint(address to, uint256 tokenId) external;\r\n\tfunction redeem(address to, uint256 tokenId, uint256 percentage, bytes calldata data) external returns (uint redeemTokenId);\r\n\tfunction redeem(address to, uint256 tokenId, uint256 percentage) external returns (uint redeemTokenId);\r\n\tfunction isLiquidatable(uint tokenId) external returns (bool);\r\n\tfunction isUnderwater(uint tokenId) external returns (bool);\r\n\tfunction canBorrow(uint tokenId, address borrowable, uint accountBorrows) external returns (bool);\r\n\tfunction restructureBadDebt(uint tokenId) external;\r\n\tfunction seize(uint tokenId, uint repayAmount, address liquidator, bytes calldata data) external returns (uint seizeTokenId);\r\n\t\r\n\t/* CSetter */\r\n\t\r\n\tevent NewSafetyMargin(uint newSafetyMarginSqrt);\r\n\tevent NewLiquidationIncentive(uint newLiquidationIncentive);\r\n\tevent NewLiquidationFee(uint newLiquidationFee);\r\n\r\n\tfunction SAFETY_MARGIN_SQRT_MIN() external pure returns (uint);\r\n\tfunction SAFETY_MARGIN_SQRT_MAX() external pure returns (uint);\r\n\tfunction LIQUIDATION_INCENTIVE_MIN() external pure returns (uint);\r\n\tfunction LIQUIDATION_INCENTIVE_MAX() external pure returns (uint);\r\n\tfunction LIQUIDATION_FEE_MAX() external pure returns (uint);\r\n\t\r\n\tfunction _setFactory() external;\r\n\tfunction _initialize (\r\n\t\tstring calldata _name,\r\n\t\tstring calldata _symbol,\r\n\t\taddress _underlying, \r\n\t\taddress _borrowable0, \r\n\t\taddress _borrowable1\r\n\t) external;\r\n\tfunction _setSafetyMarginSqrt(uint newSafetyMarginSqrt) external;\r\n\tfunction _setLiquidationIncentive(uint newLiquidationIncentive) external;\r\n\tfunction _setLiquidationFee(uint newLiquidationFee) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\IImpermaxCallee.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IImpermaxCallee {\r\n    function impermaxV3Borrow(address sender, uint256 tokenId, uint borrowAmount, bytes calldata data) external;\r\n    function impermaxV3Redeem(address sender, uint256 tokenId, uint256 redeemTokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\INFTLP.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface INFTLP {\r\n\tstruct RealXY {\r\n\t\tuint256 realX;\r\n\t\tuint256 realY;\r\n\t}\r\n\t\r\n\tstruct RealXYs {\r\n\t\tRealXY lowestPrice;\r\n\t\tRealXY currentPrice;\r\n\t\tRealXY highestPrice;\r\n\t}\r\n\t\r\n\t// ERC-721\r\n\tfunction ownerOf(uint256 _tokenId) external view returns (address);\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\r\n\t\r\n\t// Global state\r\n\tfunction token0() external view returns (address);\r\n\tfunction token1() external view returns (address);\r\n\t\r\n\t// Position state\r\n\tfunction getPositionData(uint256 _tokenId, uint256 _safetyMarginSqrt) external returns (\r\n\t\tuint256 priceSqrtX96,\r\n\t\tRealXYs memory realXYs\r\n\t);\r\n\t\r\n\t// Interactions\r\n\t\r\n\tfunction split(uint256 tokenId, uint256 percentage) external returns (uint256 newTokenId);\r\n\tfunction join(uint256 tokenId, uint256 tokenToJoin) external;\r\n}\r\n\r\n// File: contracts\\libraries\\CollateralMath.sol\r\n\r\npragma solidity =0.5.16;\r\nlibrary CollateralMath {\r\n\tusing SafeMath for uint;\r\n\r\n    uint constant Q64 = 2**64;\r\n    uint constant Q96 = 2**96;\r\n    uint constant Q192 = 2**192;\r\n\t\r\n\tenum Price {LOWEST, CURRENT, HIGHEST}\r\n\r\n\tstruct PositionObject {\r\n\t\tINFTLP.RealXYs realXYs;\r\n\t\tuint priceSqrtX96;\r\n\t\tuint debtX;\r\n\t\tuint debtY;\r\n\t\tuint liquidationPenalty;\r\n\t\tuint safetyMarginSqrt;\r\n\t}\r\n\t\r\n\tfunction newPosition(\r\n\t\tINFTLP.RealXYs memory realXYs,\r\n\t\tuint priceSqrtX96,\r\n\t\tuint debtX,\r\n\t\tuint debtY,\r\n\t\tuint liquidationPenalty,\r\n\t\tuint safetyMarginSqrt\r\n\t) internal pure returns (PositionObject memory) {\r\n\t\treturn PositionObject({\r\n\t\t\trealXYs: realXYs,\r\n\t\t\tpriceSqrtX96: priceSqrtX96,\r\n\t\t\tdebtX: debtX,\r\n\t\t\tdebtY: debtY,\r\n\t\t\tliquidationPenalty: liquidationPenalty,\r\n\t\t\tsafetyMarginSqrt: safetyMarginSqrt\r\n\t\t});\r\n\t}\r\n\t\r\n    function safeInt256(uint256 n) internal pure returns (int256) {\r\n        require(n < 2**255, \"Impermax: SAFE_INT\");\r\n        return int256(n);\r\n    }\r\n\t\r\n\t// price\r\n\tfunction getRelativePriceX(uint priceSqrtX96) internal pure returns (uint) {\r\n\t\treturn priceSqrtX96;\r\n\t}\r\n\t// 1 / price\r\n\tfunction getRelativePriceY(uint priceSqrtX96) internal pure returns (uint) {\r\n\t\treturn Q192.div(priceSqrtX96);\r\n\t}\r\n\t\r\n\t// amountX * priceX + amountY * priceY\r\n\tfunction getValue(PositionObject memory positionObject, Price price, uint amountX, uint amountY) internal pure returns (uint) {\r\n\t\tuint priceSqrtX96 = positionObject.priceSqrtX96;\r\n\t\tif (price == Price.LOWEST) priceSqrtX96 = priceSqrtX96.mul(1e18).div(positionObject.safetyMarginSqrt);\r\n\t\tif (price == Price.HIGHEST) priceSqrtX96 = priceSqrtX96.mul(positionObject.safetyMarginSqrt).div(1e18);\r\n\t\tuint relativePriceX = getRelativePriceX(priceSqrtX96);\r\n\t\tuint relativePriceY = getRelativePriceY(priceSqrtX96);\r\n\t\treturn amountX.mul(relativePriceX).div(Q64).add(amountY.mul(relativePriceY).div(Q64));\r\n\t}\r\n\t\r\n\t// realX * priceX + realY * priceY\r\n\tfunction getCollateralValue(PositionObject memory positionObject, Price price) internal pure returns (uint) {\r\n\t\tINFTLP.RealXY memory realXY = positionObject.realXYs.currentPrice;\r\n\t\tif (price == Price.LOWEST) realXY = positionObject.realXYs.lowestPrice;\r\n\t\tif (price == Price.HIGHEST) realXY = positionObject.realXYs.highestPrice;\r\n\t\treturn getValue(positionObject, price, realXY.realX, realXY.realY);\r\n\t}\r\n\r\n\t// debtX * priceX + realY * debtY\t\r\n\tfunction getDebtValue(PositionObject memory positionObject, Price price) internal pure returns (uint) {\r\n\t\treturn getValue(positionObject, price, positionObject.debtX, positionObject.debtY);\r\n\t}\r\n\t\r\n\t// collateralValue - debtValue * liquidationPenalty\r\n\tfunction getLiquidityPostLiquidation(PositionObject memory positionObject, Price price) internal pure returns (int) {\r\n\t\tuint collateralNeeded = getDebtValue(positionObject, price).mul(positionObject.liquidationPenalty).div(1e18);\r\n\t\tuint collateralValue = getCollateralValue(positionObject, price);\r\n\t\treturn safeInt256(collateralValue) - safeInt256(collateralNeeded);\r\n\t}\r\n\t\r\n\t// collateralValue / (debtValue * liquidationPenalty)\r\n\tfunction getPostLiquidationCollateralRatio(PositionObject memory positionObject) internal pure returns (uint) {\r\n\t\tuint collateralNeeded = getDebtValue(positionObject, Price.CURRENT).mul(positionObject.liquidationPenalty).div(1e18);\r\n\t\tuint collateralValue = getCollateralValue(positionObject, Price.CURRENT);\r\n\t\treturn collateralValue.mul(1e18).div(collateralNeeded, \"ImpermaxV3Collateral: NO_DEBT\");\r\n\t}\r\n\t\r\n\tfunction isLiquidatable(PositionObject memory positionObject) internal pure returns (bool) {\r\n\t\tint a = getLiquidityPostLiquidation(positionObject, Price.LOWEST);\r\n\t\tint b = getLiquidityPostLiquidation(positionObject, Price.HIGHEST);\r\n\t\treturn a < 0 || b < 0;\r\n\t}\r\n\t\r\n\tfunction isUnderwater(PositionObject memory positionObject) internal pure returns (bool) {\r\n\t\tint liquidity = getLiquidityPostLiquidation(positionObject, Price.CURRENT);\r\n\t\treturn liquidity < 0;\r\n\t}\r\n}\r\n\r\n// File: contracts\\ImpermaxV3Collateral.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ImpermaxV3Collateral is ICollateral, CSetter {\t\r\n\tusing CollateralMath for CollateralMath.PositionObject;\r\n\r\n    uint256 internal constant Q192 = 2**192;\r\n\r\n\tconstructor() public {}\r\n\t\r\n\t/*** Collateralization Model ***/\r\n\t\r\n\tfunction _getPositionObjectAmounts(uint tokenId, uint debtX, uint debtY) internal returns (CollateralMath.PositionObject memory positionObject) {\r\n\t\tif (debtX == uint(-1)) debtX = IBorrowable(borrowable0).currentBorrowBalance(tokenId);\r\n\t\tif (debtY == uint(-1)) debtY = IBorrowable(borrowable1).currentBorrowBalance(tokenId);\r\n\t\t\r\n\t\t(uint priceSqrtX96, INFTLP.RealXYs memory realXYs) = \r\n\t\t\tINFTLP(underlying).getPositionData(tokenId, safetyMarginSqrt);\r\n\t\trequire(priceSqrtX96 > 100 && priceSqrtX96 < Q192 / 100, \"ImpermaxV3Collateral: PRICE_CALCULATION_ERROR\");\r\n\t\t\r\n\t\tpositionObject = CollateralMath.newPosition(realXYs, priceSqrtX96, debtX, debtY, liquidationPenalty(), safetyMarginSqrt);\r\n\t}\r\n\t\r\n\tfunction _getPositionObject(uint tokenId) internal returns (CollateralMath.PositionObject memory positionObject) {\r\n\t\treturn _getPositionObjectAmounts(tokenId, uint(-1), uint(-1));\r\n\t}\r\n\t\r\n\t/*** ERC721 Wrapper ***/\r\n\t\r\n\tfunction mint(address to, uint256 tokenId) external nonReentrant {\r\n\t\trequire(_ownerOf[tokenId] == address(0), \"ImpermaxV3Collateral: NFT_ALREADY_MINTED\");\r\n\t\trequire(INFTLP(underlying).ownerOf(tokenId) == address(this), \"ImpermaxV3Collateral: NFT_NOT_RECEIVED\");\r\n\t\t_mint(to, tokenId);\r\n\t\temit Mint(to, tokenId);\r\n\t}\r\n\r\n\tfunction redeem(address to, uint256 tokenId, uint256 percentage, bytes memory data) public nonReentrant returns (uint256 redeemTokenId) {\r\n\t\trequire(percentage <= 1e18, \"ImpermaxV3Collateral: PERCENTAGE_ABOVE_100\");\r\n\t\t_checkAuthorized(_requireOwned(tokenId), msg.sender, tokenId);\r\n\t\t_approve(address(0), tokenId, address(0)); // reset approval\r\n\t\t\t\t\r\n\t\t// optimistically redeem\r\n\t\tif (percentage == 1e18) {\r\n\t\t\tredeemTokenId = tokenId;\r\n\t\t\t_burn(tokenId);\r\n\t\t\tINFTLP(underlying).safeTransferFrom(address(this), to, redeemTokenId);\r\n\t\t\tif (data.length > 0) IImpermaxCallee(to).impermaxV3Redeem(msg.sender, tokenId, redeemTokenId, data);\r\n\t\t\t\r\n\t\t\t// finally check that the position is not left underwater\r\n\t\t\trequire(IBorrowable(borrowable0).borrowBalance(tokenId) == 0, \"ImpermaxV3Collateral: INSUFFICIENT_LIQUIDITY\");\r\n\t\t\trequire(IBorrowable(borrowable1).borrowBalance(tokenId) == 0, \"ImpermaxV3Collateral: INSUFFICIENT_LIQUIDITY\");\r\n\t\t} else {\r\n\t\t\tredeemTokenId = INFTLP(underlying).split(tokenId, percentage);\r\n\t\t\tINFTLP(underlying).safeTransferFrom(address(this), to, redeemTokenId);\r\n\t\t\tif (data.length > 0) IImpermaxCallee(to).impermaxV3Redeem(msg.sender, tokenId, redeemTokenId, data);\r\n\t\t\t\r\n\t\t\t// finally check that the position is not left underwater\r\n\t\t\trequire(!isLiquidatable(tokenId), \"ImpermaxV3Collateral: INSUFFICIENT_LIQUIDITY\");\r\n\t\t}\r\n\t\t\r\n\t\temit Redeem(to, tokenId, percentage, redeemTokenId);\r\n\t}\r\n\tfunction redeem(address to, uint256 tokenId, uint256 percentage) external returns (uint256 redeemTokenId) {\r\n\t\treturn redeem(to, tokenId, percentage, \"\");\r\n\t}\r\n\t\r\n\t/*** Collateral ***/\r\n\t\r\n\tfunction isLiquidatable(uint tokenId) public returns (bool) {\r\n\t\tCollateralMath.PositionObject memory positionObject = _getPositionObject(tokenId);\r\n\t\treturn positionObject.isLiquidatable();\r\n\t}\r\n\t\r\n\tfunction isUnderwater(uint tokenId) public returns (bool) {\r\n\t\tCollateralMath.PositionObject memory positionObject = _getPositionObject(tokenId);\r\n\t\treturn positionObject.isUnderwater();\r\n\t}\r\n\t\r\n\tfunction canBorrow(uint tokenId, address borrowable, uint accountBorrows) public returns (bool) {\r\n\t\taddress _borrowable0 = borrowable0;\r\n\t\taddress _borrowable1 = borrowable1;\r\n\t\trequire(borrowable == _borrowable0 || borrowable == _borrowable1, \"ImpermaxV3Collateral: INVALID_BORROWABLE\");\r\n\t\trequire(INFTLP(underlying).ownerOf(tokenId) == address(this), \"ImpermaxV3Collateral: INVALID_NFTLP_ID\");\r\n\t\t\r\n\t\tuint debtX = borrowable == _borrowable0 ? accountBorrows : uint(-1);\r\n\t\tuint debtY = borrowable == _borrowable1 ? accountBorrows : uint(-1);\r\n\t\t\r\n\t\tCollateralMath.PositionObject memory positionObject = _getPositionObjectAmounts(tokenId, debtX, debtY);\r\n\t\treturn !positionObject.isLiquidatable();\r\n\t}\r\n\t\r\n\tfunction restructureBadDebt(uint tokenId) external nonReentrant {\r\n\t\tCollateralMath.PositionObject memory positionObject = _getPositionObject(tokenId);\r\n\t\tuint postLiquidationCollateralRatio = positionObject.getPostLiquidationCollateralRatio();\r\n\t\trequire(postLiquidationCollateralRatio < 1e18, \"ImpermaxV3Collateral: NOT_UNDERWATER\");\r\n\t\tIBorrowable(borrowable0).restructureDebt(tokenId, postLiquidationCollateralRatio);\r\n\t\tIBorrowable(borrowable1).restructureDebt(tokenId, postLiquidationCollateralRatio);\r\n\t\t\r\n\t\tblockOfLastRestructureOrLiquidation[tokenId] = block.number;\r\n\t\t\r\n\t\temit RestructureBadDebt(tokenId, postLiquidationCollateralRatio);\r\n\t}\r\n\t\r\n\t// this function must be called from borrowable0 or borrowable1\r\n\tfunction seize(uint tokenId, uint repayAmount, address liquidator, bytes calldata data) external nonReentrant returns (uint seizeTokenId) {\r\n\t\trequire(msg.sender == borrowable0 || msg.sender == borrowable1, \"ImpermaxV3Collateral: UNAUTHORIZED\");\r\n\t\t\r\n\t\tuint repayToCollateralRatio;\r\n\t\t{\r\n\t\t\tCollateralMath.PositionObject memory positionObject = _getPositionObject(tokenId);\r\n\t\t\t\r\n\t\t\tif (blockOfLastRestructureOrLiquidation[tokenId] != block.number) {\r\n\t\t\t\trequire(positionObject.isLiquidatable(), \"ImpermaxV3Collateral: INSUFFICIENT_SHORTFALL\");\r\n\t\t\t\trequire(!positionObject.isUnderwater(), \"ImpermaxV3Collateral: CANNOT_LIQUIDATE_UNDERWATER_POSITION\");\r\n\t\t\t\tblockOfLastRestructureOrLiquidation[tokenId] = block.number;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tuint collateralValue = positionObject.getCollateralValue(CollateralMath.Price.CURRENT);\r\n\t\t\tuint repayValue = msg.sender == borrowable0\r\n\t\t\t\t? positionObject.getValue(CollateralMath.Price.CURRENT, repayAmount, 0)\r\n\t\t\t\t: positionObject.getValue(CollateralMath.Price.CURRENT, 0, repayAmount);\r\n\t\t\t\r\n\t\t\trepayToCollateralRatio = repayValue.mul(1e18).div(collateralValue);\r\n\t\t\trequire(repayToCollateralRatio.mul(liquidationPenalty()) <= 1e36, \"ImpermaxV3Collateral: UNEXPECTED_RATIO\");\r\n\t\t}\r\n\t\t\r\n\t\tuint seizePercentage = repayToCollateralRatio.mul(liquidationIncentive).div(1e18);\r\n\t\tseizeTokenId = INFTLP(underlying).split(tokenId, seizePercentage);\r\n\r\n\t\taddress reservesManager = IFactory(factory).reservesManager();\t\t\r\n\t\tif (liquidationFee > 0) {\r\n\t\t\tuint feePercentage = repayToCollateralRatio.mul(liquidationFee).div(uint(1e18).sub(seizePercentage));\t\r\n\t\t\tuint feeTokenId = INFTLP(underlying).split(tokenId, feePercentage);\r\n\t\t\t_mint(reservesManager, feeTokenId); // _safeMint would be unsafe\r\n\t\t\temit Seize(reservesManager, tokenId, feePercentage, feeTokenId);\r\n\t\t}\r\n\t\t\r\n\t\tINFTLP(underlying).safeTransferFrom(address(this), liquidator, seizeTokenId, data);\r\n\t\temit Seize(liquidator, tokenId, seizePercentage, seizeTokenId);\r\n\t}\r\n\t\r\n\tfunction onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external pure returns (bytes4 returnValue) {\r\n\t\toperator; from; tokenId; data;\r\n\t\treturn bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\r\n\t}\r\n}\r\n\r\n// File: contracts\\interfaces\\ICDeployer.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ICDeployer {\r\n\tfunction deployCollateral(address nftlp) external returns (address collateral);\r\n}\r\n\r\n// File: contracts\\CDeployer.sol\r\n\r\npragma solidity =0.5.16;\r\n/*\r\n * This contract is used by the Factory to deploy Collateral(s)\r\n * The bytecode would be too long to fit in the Factory\r\n */\r\n \r\ncontract CDeployer is ICDeployer {\r\n\tconstructor () public {}\r\n\t\r\n\tfunction deployCollateral(address nftlp) external returns (address collateral) {\r\n\t\tbytes memory bytecode = type(ImpermaxV3Collateral).creationCode;\r\n\t\tbytes32 salt = keccak256(abi.encodePacked(msg.sender, nftlp));\r\n\t\tassembly {\r\n\t\t\tcollateral := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n\t\t}\r\n\t}\r\n}",
      "abi": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationFee\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentive\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSafetyMarginSqrt\",\"type\":\"uint256\"}],\"name\":\"NewSafetyMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokenId\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"postLiquidationCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"RestructureBadDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokenId\",\"type\":\"uint256\"}],\"name\":\"Seize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LIQUIDATION_FEE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LIQUIDATION_INCENTIVE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LIQUIDATION_INCENTIVE_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAFETY_MARGIN_SQRT_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAFETY_MARGIN_SQRT_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowable0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowable1\",\"type\":\"address\"}],\"name\":\"_initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_setFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidationFee\",\"type\":\"uint256\"}],\"name\":\"_setLiquidationFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentive\",\"type\":\"uint256\"}],\"name\":\"_setLiquidationIncentive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSafetyMarginSqrt\",\"type\":\"uint256\"}],\"name\":\"_setSafetyMarginSqrt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockOfLastRestructureOrLiquidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowable0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowable1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrowable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"}],\"name\":\"canBorrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isUnderwater\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"returnValue\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemTokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemTokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"restructureBadDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safetyMarginSqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"seize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seizeTokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "contract_name": "ImpermaxV3Collateral",
      "compiler_version": "v0.5.16+commit.9c3226ce",
      "optimization_used": "1",
      "runs": "999999",
      "constructor_arguments": "",
      "evm_version": "Default",
      "library": "",
      "license_type": "BSL 1.1",
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0x175712cd666fbcfe8b69866a3088d7bf17a47685": {
      "address": "0x175712cd666fbcfe8b69866a3088d7bf17a47685",
      "has_source_code": true,
      "source_code": "// File: contracts\\interfaces\\IFactory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IFactory {\r\n\tevent LendingPoolInitialized(address indexed nftlp, address indexed token0, address indexed token1,\r\n\t\taddress collateral, address borrowable0, address borrowable1, uint lendingPoolId);\r\n\tevent NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\tevent NewAdmin(address oldAdmin, address newAdmin);\r\n\tevent NewReservesPendingAdmin(address oldReservesPendingAdmin, address newReservesPendingAdmin);\r\n\tevent NewReservesAdmin(address oldReservesAdmin, address newReservesAdmin);\r\n\tevent NewReservesManager(address oldReservesManager, address newReservesManager);\r\n\t\r\n\tfunction admin() external view returns (address);\r\n\tfunction pendingAdmin() external view returns (address);\r\n\tfunction reservesAdmin() external view returns (address);\r\n\tfunction reservesPendingAdmin() external view returns (address);\r\n\tfunction reservesManager() external view returns (address);\r\n\r\n\tfunction getLendingPool(address nftlp) external view returns (\r\n\t\tbool initialized, \r\n\t\tuint24 lendingPoolId, \r\n\t\taddress collateral, \r\n\t\taddress borrowable0, \r\n\t\taddress borrowable1\r\n\t);\r\n\tfunction allLendingPools(uint) external view returns (address nftlp);\r\n\tfunction allLendingPoolsLength() external view returns (uint);\r\n\t\r\n\tfunction bDeployer() external view returns (address);\r\n\tfunction cDeployer() external view returns (address);\r\n\r\n\tfunction createCollateral(address nftlp) external returns (address collateral);\r\n\tfunction createBorrowable0(address nftlp) external returns (address borrowable0);\r\n\tfunction createBorrowable1(address nftlp) external returns (address borrowable1);\r\n\tfunction initializeLendingPool(address nftlp) external;\r\n\r\n\tfunction _setPendingAdmin(address newPendingAdmin) external;\r\n\tfunction _acceptAdmin() external;\r\n\tfunction _setReservesPendingAdmin(address newPendingAdmin) external;\r\n\tfunction _acceptReservesAdmin() external;\r\n\tfunction _setReservesManager(address newReservesManager) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\IBDeployer.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IBDeployer {\r\n\tfunction deployBorrowable(address nftlp, uint8 index) external returns (address borrowable);\r\n}\r\n\r\n// File: contracts\\interfaces\\IBorrowable.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IBorrowable {\r\n\r\n\t/*** Impermax ERC20 ***/\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction totalSupply() external view returns (uint);\r\n\tfunction balanceOf(address owner) external view returns (uint);\r\n\tfunction allowance(address owner, address spender) external view returns (uint);\r\n\tfunction approve(address spender, uint value) external returns (bool);\r\n\tfunction transfer(address to, uint value) external returns (bool);\r\n\tfunction transferFrom(address from, address to, uint value) external returns (bool);\r\n\t\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\tfunction nonces(address owner) external view returns (uint);\r\n\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\t\r\n\t/*** Pool Token ***/\r\n\t\r\n\tevent Mint(address indexed sender, address indexed minter, uint mintAmount, uint mintTokens);\r\n\tevent Redeem(address indexed sender, address indexed redeemer, uint redeemAmount, uint redeemTokens);\r\n\tevent Sync(uint totalBalance);\r\n\t\r\n\tfunction underlying() external view returns (address);\r\n\tfunction factory() external view returns (address);\r\n\tfunction totalBalance() external view returns (uint);\r\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n\tfunction exchangeRate() external returns (uint);\r\n\tfunction mint(address minter) external returns (uint mintTokens);\r\n\tfunction redeem(address redeemer) external returns (uint redeemAmount);\r\n\tfunction skim(address to) external;\r\n\tfunction sync() external;\r\n\t\r\n\tfunction _setFactory() external;\r\n\t\r\n\t/*** Borrowable ***/\r\n\r\n\tevent BorrowApproval(address indexed owner, address indexed spender, uint value);\r\n\tevent Borrow(address indexed sender, uint256 indexed tokenId, address indexed receiver, uint borrowAmount, uint repayAmount, uint accountBorrowsPrior, uint accountBorrows, uint totalBorrows);\r\n\tevent Liquidate(address indexed sender, uint256 indexed tokenId, address indexed liquidator, uint seizeTokenId, uint repayAmount, uint accountBorrowsPrior, uint accountBorrows, uint totalBorrows);\r\n\tevent RestructureDebt(uint256 indexed tokenId, uint reduceToRatio, uint repayAmount, uint accountBorrowsPrior, uint accountBorrows, uint totalBorrows);\r\n\t\r\n\tfunction collateral() external view returns (address);\r\n\tfunction reserveFactor() external view returns (uint);\r\n\tfunction exchangeRateLast() external view returns (uint);\r\n\tfunction borrowIndex() external view returns (uint);\r\n\tfunction totalBorrows() external view returns (uint);\r\n\tfunction borrowAllowance(address owner, address spender) external view returns (uint);\r\n\tfunction borrowBalance(uint tokenId) external view returns (uint);\t\r\n\tfunction currentBorrowBalance(uint tokenId) external returns (uint);\t\r\n\t\r\n\tfunction BORROW_PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\tfunction borrowApprove(address spender, uint256 value) external returns (bool);\r\n\tfunction borrowPermit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\tfunction borrow(uint256 tokenId, address receiver, uint borrowAmount, bytes calldata data) external;\r\n\tfunction liquidate(uint256 tokenId, uint repayAmount, address liquidator, bytes calldata data) external returns (uint seizeTokenId);\r\n\tfunction restructureDebt(uint256 tokenId, uint256 reduceToRatio) external;\r\n\t\r\n\t/*** Borrowable Interest Rate Model ***/\r\n\r\n\tevent AccrueInterest(uint interestAccumulated, uint borrowIndex, uint totalBorrows);\r\n\tevent CalculateKink(uint kinkRate);\r\n\tevent CalculateBorrowRate(uint borrowRate);\r\n\t\r\n\tfunction KINK_BORROW_RATE_MAX() external pure returns (uint);\r\n\tfunction KINK_BORROW_RATE_MIN() external pure returns (uint);\r\n\tfunction KINK_MULTIPLIER() external pure returns (uint);\r\n\tfunction borrowRate() external view returns (uint);\r\n\tfunction kinkBorrowRate() external view returns (uint);\r\n\tfunction kinkUtilizationRate() external view returns (uint);\r\n\tfunction adjustSpeed() external view returns (uint);\r\n\tfunction rateUpdateTimestamp() external view returns (uint32);\r\n\tfunction accrualTimestamp() external view returns (uint32);\r\n\t\r\n\tfunction accrueInterest() external;\r\n\t\r\n\t/*** Borrowable Setter ***/\r\n\r\n\tevent NewReserveFactor(uint newReserveFactor);\r\n\tevent NewKinkUtilizationRate(uint newKinkUtilizationRate);\r\n\tevent NewAdjustSpeed(uint newAdjustSpeed);\r\n\tevent NewDebtCeiling(uint newDebtCeiling);\r\n\r\n\tfunction RESERVE_FACTOR_MAX() external pure returns (uint);\r\n\tfunction KINK_UR_MIN() external pure returns (uint);\r\n\tfunction KINK_UR_MAX() external pure returns (uint);\r\n\tfunction ADJUST_SPEED_MIN() external pure returns (uint);\r\n\tfunction ADJUST_SPEED_MAX() external pure returns (uint);\r\n\t\r\n\tfunction _initialize (\r\n\t\tstring calldata _name, \r\n\t\tstring calldata _symbol,\r\n\t\taddress _underlying, \r\n\t\taddress _collateral\r\n\t) external;\r\n\tfunction _setReserveFactor(uint newReserveFactor) external;\r\n\tfunction _setKinkUtilizationRate(uint newKinkUtilizationRate) external;\r\n\tfunction _setAdjustSpeed(uint newAdjustSpeed) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\ICDeployer.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ICDeployer {\r\n\tfunction deployCollateral(address nftlp) external returns (address collateral);\r\n}\r\n\r\n// File: contracts\\interfaces\\ICollateral.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ICollateral {\r\n\t\r\n\t/* ImpermaxERC721 */\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\t\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction approve(address to, uint256 tokenId) external;\r\n\tfunction setApprovalForAll(address operator, bool approved) external;\r\n\tfunction permit(address spender, uint tokenId, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\t\r\n\t/* Collateral */\r\n\t\r\n\tevent Mint(address indexed to, uint tokenId);\r\n\tevent Redeem(address indexed to, uint tokenId, uint percentage, uint redeemTokenId);\r\n\tevent Seize(address indexed to, uint tokenId, uint percentage, uint redeemTokenId);\r\n\tevent RestructureBadDebt(uint tokenId, uint postLiquidationCollateralRatio);\r\n\t\r\n\tfunction underlying() external view returns (address);\r\n\tfunction factory() external view returns (address);\r\n\tfunction borrowable0() external view returns (address);\r\n\tfunction borrowable1() external view returns (address);\r\n\tfunction safetyMarginSqrt() external view returns (uint);\r\n\tfunction liquidationIncentive() external view returns (uint);\r\n\tfunction liquidationFee() external view returns (uint);\r\n\tfunction liquidationPenalty() external view returns (uint);\r\n\r\n\tfunction mint(address to, uint256 tokenId) external;\r\n\tfunction redeem(address to, uint256 tokenId, uint256 percentage, bytes calldata data) external returns (uint redeemTokenId);\r\n\tfunction redeem(address to, uint256 tokenId, uint256 percentage) external returns (uint redeemTokenId);\r\n\tfunction isLiquidatable(uint tokenId) external returns (bool);\r\n\tfunction isUnderwater(uint tokenId) external returns (bool);\r\n\tfunction canBorrow(uint tokenId, address borrowable, uint accountBorrows) external returns (bool);\r\n\tfunction restructureBadDebt(uint tokenId) external;\r\n\tfunction seize(uint tokenId, uint repayAmount, address liquidator, bytes calldata data) external returns (uint seizeTokenId);\r\n\t\r\n\t/* CSetter */\r\n\t\r\n\tevent NewSafetyMargin(uint newSafetyMarginSqrt);\r\n\tevent NewLiquidationIncentive(uint newLiquidationIncentive);\r\n\tevent NewLiquidationFee(uint newLiquidationFee);\r\n\r\n\tfunction SAFETY_MARGIN_SQRT_MIN() external pure returns (uint);\r\n\tfunction SAFETY_MARGIN_SQRT_MAX() external pure returns (uint);\r\n\tfunction LIQUIDATION_INCENTIVE_MIN() external pure returns (uint);\r\n\tfunction LIQUIDATION_INCENTIVE_MAX() external pure returns (uint);\r\n\tfunction LIQUIDATION_FEE_MAX() external pure returns (uint);\r\n\t\r\n\tfunction _setFactory() external;\r\n\tfunction _initialize (\r\n\t\tstring calldata _name,\r\n\t\tstring calldata _symbol,\r\n\t\taddress _underlying, \r\n\t\taddress _borrowable0, \r\n\t\taddress _borrowable1\r\n\t) external;\r\n\tfunction _setSafetyMarginSqrt(uint newSafetyMarginSqrt) external;\r\n\tfunction _setLiquidationIncentive(uint newLiquidationIncentive) external;\r\n\tfunction _setLiquidationFee(uint newLiquidationFee) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\INFTLP.sol\r\n\r\npragma solidity >=0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface INFTLP {\r\n\tstruct RealXY {\r\n\t\tuint256 realX;\r\n\t\tuint256 realY;\r\n\t}\r\n\t\r\n\tstruct RealXYs {\r\n\t\tRealXY lowestPrice;\r\n\t\tRealXY currentPrice;\r\n\t\tRealXY highestPrice;\r\n\t}\r\n\t\r\n\t// ERC-721\r\n\tfunction ownerOf(uint256 _tokenId) external view returns (address);\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\r\n\t\r\n\t// Global state\r\n\tfunction token0() external view returns (address);\r\n\tfunction token1() external view returns (address);\r\n\t\r\n\t// Position state\r\n\tfunction getPositionData(uint256 _tokenId, uint256 _safetyMarginSqrt) external returns (\r\n\t\tuint256 priceSqrtX96,\r\n\t\tRealXYs memory realXYs\r\n\t);\r\n\t\r\n\t// Interactions\r\n\t\r\n\tfunction split(uint256 tokenId, uint256 percentage) external returns (uint256 newTokenId);\r\n\tfunction join(uint256 tokenId, uint256 tokenToJoin) external;\r\n}\r\n\r\n// File: contracts\\ImpermaxV3Factory.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract ImpermaxV3Factory is IFactory {\r\n\taddress public admin;\r\n\taddress public pendingAdmin;\r\n\taddress public reservesAdmin;\r\n\taddress public reservesPendingAdmin;\r\n\taddress public reservesManager;\r\n\t\t\r\n\tstruct LendingPool {\r\n\t\tbool initialized;\r\n\t\tuint24 lendingPoolId;\r\n\t\taddress collateral;\r\n\t\taddress borrowable0;\r\n\t\taddress borrowable1;\r\n\t}\r\n\tmapping(address => LendingPool) public getLendingPool; // get by NFTLP\r\n\taddress[] public allLendingPools; // address of the NFTLP\r\n\tfunction allLendingPoolsLength() external view returns (uint) {\r\n\t\treturn allLendingPools.length;\r\n\t}\r\n\t\r\n\tIBDeployer public bDeployer;\r\n\tICDeployer public cDeployer;\r\n\t\r\n\tconstructor(address _admin, address _reservesAdmin, address _reservesManager, IBDeployer _bDeployer, ICDeployer _cDeployer) public {\r\n\t\t_checkReservesManager(_reservesManager);\r\n\t\tadmin = _admin;\r\n\t\treservesAdmin = _reservesAdmin;\r\n\t\treservesManager = _reservesManager;\r\n\t\tbDeployer = _bDeployer;\r\n\t\tcDeployer = _cDeployer;\r\n\t\temit NewAdmin(address(0), _admin);\r\n\t\temit NewReservesAdmin(address(0), _reservesAdmin);\r\n\t\temit NewReservesManager(address(0), _reservesManager);\r\n\t}\r\n\t\r\n\tfunction _getTokens(address nftlp) private view returns (address token0, address token1) {\r\n\t\ttoken0 = INFTLP(nftlp).token0();\r\n\t\ttoken1 = INFTLP(nftlp).token1();\r\n\t}\r\n\t\r\n\tfunction _createLendingPool(address nftlp) private {\r\n\t\tif (getLendingPool[nftlp].lendingPoolId != 0) return;\r\n\t\tallLendingPools.push(nftlp);\t\t\r\n\t\tgetLendingPool[nftlp] = LendingPool(false, uint24(allLendingPools.length), address(0), address(0), address(0));\r\n\t}\r\n\t\r\n\tfunction createCollateral(address nftlp) external returns (address collateral) {\r\n\t\t_getTokens(nftlp);\r\n\t\trequire(getLendingPool[nftlp].collateral == address(0), \"Impermax: ALREADY_EXISTS\");\t\t\r\n\t\tcollateral = cDeployer.deployCollateral(nftlp);\r\n\t\tICollateral(collateral)._setFactory();\r\n\t\t_createLendingPool(nftlp);\r\n\t\tgetLendingPool[nftlp].collateral = collateral;\r\n\t}\r\n\t\r\n\tfunction createBorrowable0(address nftlp) external returns (address borrowable0) {\r\n\t\t_getTokens(nftlp);\r\n\t\trequire(getLendingPool[nftlp].borrowable0 == address(0), \"Impermax: ALREADY_EXISTS\");\t\t\r\n\t\tborrowable0 = bDeployer.deployBorrowable(nftlp, 0);\r\n\t\tIBorrowable(borrowable0)._setFactory();\r\n\t\t_createLendingPool(nftlp);\r\n\t\tgetLendingPool[nftlp].borrowable0 = borrowable0;\r\n\t}\r\n\t\r\n\tfunction createBorrowable1(address nftlp) external returns (address borrowable1) {\r\n\t\t_getTokens(nftlp);\r\n\t\trequire(getLendingPool[nftlp].borrowable1 == address(0), \"Impermax: ALREADY_EXISTS\");\t\t\r\n\t\tborrowable1 = bDeployer.deployBorrowable(nftlp, 1);\r\n\t\tIBorrowable(borrowable1)._setFactory();\r\n\t\t_createLendingPool(nftlp);\r\n\t\tgetLendingPool[nftlp].borrowable1 = borrowable1;\r\n\t}\r\n\t\r\n\tfunction initializeLendingPool(address nftlp) external {\r\n\t\t(address token0, address token1) = _getTokens(nftlp);\r\n\t\tLendingPool memory lPool = getLendingPool[nftlp];\r\n\t\trequire(!lPool.initialized, \"Impermax: ALREADY_INITIALIZED\");\r\n\t\t\r\n\t\trequire(lPool.collateral != address(0), \"Impermax: COLLATERALIZABLE_NOT_CREATED\");\r\n\t\trequire(lPool.borrowable0 != address(0), \"Impermax: BORROWABLE0_NOT_CREATED\");\r\n\t\trequire(lPool.borrowable1 != address(0), \"Impermax: BORROWABLE1_NOT_CREATED\");\r\n\t\t\t\t\r\n\t\tICollateral(lPool.collateral)._initialize(\"Impermax Collateral\", \"imxC\", nftlp, lPool.borrowable0, lPool.borrowable1);\r\n\t\tIBorrowable(lPool.borrowable0)._initialize(\"Impermax Borrowable\", \"imxB\", token0, lPool.collateral);\r\n\t\tIBorrowable(lPool.borrowable1)._initialize(\"Impermax Borrowable\", \"imxB\", token1, lPool.collateral);\r\n\t\t\r\n\t\tgetLendingPool[nftlp].initialized = true;\r\n\t\temit LendingPoolInitialized(nftlp, token0, token1, lPool.collateral, lPool.borrowable0, lPool.borrowable1, lPool.lendingPoolId);\r\n\t}\r\n\t\r\n\tfunction _setPendingAdmin(address newPendingAdmin) external {\r\n\t\trequire(msg.sender == admin, \"Impermax: UNAUTHORIZED\");\r\n\t\taddress oldPendingAdmin = pendingAdmin;\r\n\t\tpendingAdmin = newPendingAdmin;\r\n\t\temit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n\t}\r\n\r\n\tfunction _acceptAdmin() external {\r\n\t\trequire(msg.sender == pendingAdmin, \"Impermax: UNAUTHORIZED\");\r\n\t\taddress oldAdmin = admin;\r\n\t\taddress oldPendingAdmin = pendingAdmin;\r\n\t\tadmin = pendingAdmin;\r\n\t\tpendingAdmin = address(0);\r\n\t\temit NewAdmin(oldAdmin, admin);\r\n\t\temit NewPendingAdmin(oldPendingAdmin, address(0));\r\n\t}\r\n\t\r\n\tfunction _setReservesPendingAdmin(address newReservesPendingAdmin) external {\r\n\t\trequire(msg.sender == reservesAdmin, \"Impermax: UNAUTHORIZED\");\r\n\t\taddress oldReservesPendingAdmin = reservesPendingAdmin;\r\n\t\treservesPendingAdmin = newReservesPendingAdmin;\r\n\t\temit NewReservesPendingAdmin(oldReservesPendingAdmin, newReservesPendingAdmin);\r\n\t}\r\n\r\n\tfunction _acceptReservesAdmin() external {\r\n\t\trequire(msg.sender == reservesPendingAdmin, \"Impermax: UNAUTHORIZED\");\r\n\t\taddress oldReservesAdmin = reservesAdmin;\r\n\t\taddress oldReservesPendingAdmin = reservesPendingAdmin;\r\n\t\treservesAdmin = reservesPendingAdmin;\r\n\t\treservesPendingAdmin = address(0);\r\n\t\temit NewReservesAdmin(oldReservesAdmin, reservesAdmin);\r\n\t\temit NewReservesPendingAdmin(oldReservesPendingAdmin, address(0));\r\n\t}\r\n\r\n\tfunction _checkReservesManager(address newReservesManager) internal {\r\n\t\trequire(newReservesManager != address(0), \"Impermax: INVALID_RESERVES_MANAGER\");\r\n\t}\r\n\tfunction _setReservesManager(address newReservesManager) external {\r\n\t\trequire(msg.sender == reservesAdmin, \"Impermax: UNAUTHORIZED\");\r\n\t\t_checkReservesManager(newReservesManager);\r\n\t\taddress oldReservesManager = reservesManager;\r\n\t\treservesManager = newReservesManager;\r\n\t\temit NewReservesManager(oldReservesManager, newReservesManager);\r\n\t}\r\n}",
      "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reservesAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reservesManager\",\"type\":\"address\"},{\"internalType\":\"contract IBDeployer\",\"name\":\"_bDeployer\",\"type\":\"address\"},{\"internalType\":\"contract ICDeployer\",\"name\":\"_cDeployer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftlp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrowable0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrowable1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lendingPoolId\",\"type\":\"uint256\"}],\"name\":\"LendingPoolInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldReservesAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReservesAdmin\",\"type\":\"address\"}],\"name\":\"NewReservesAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldReservesManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReservesManager\",\"type\":\"address\"}],\"name\":\"NewReservesManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldReservesPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReservesPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewReservesPendingAdmin\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptReservesAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReservesManager\",\"type\":\"address\"}],\"name\":\"_setReservesManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReservesPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setReservesPendingAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allLendingPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allLendingPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bDeployer\",\"outputs\":[{\"internalType\":\"contract IBDeployer\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cDeployer\",\"outputs\":[{\"internalType\":\"contract ICDeployer\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftlp\",\"type\":\"address\"}],\"name\":\"createBorrowable0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"borrowable0\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftlp\",\"type\":\"address\"}],\"name\":\"createBorrowable1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"borrowable1\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftlp\",\"type\":\"address\"}],\"name\":\"createCollateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getLendingPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"lendingPoolId\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowable0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowable1\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftlp\",\"type\":\"address\"}],\"name\":\"initializeLendingPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservesAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservesManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservesPendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "contract_name": "ImpermaxV3Factory",
      "compiler_version": "v0.5.16+commit.9c3226ce",
      "optimization_used": "1",
      "runs": "999999",
      "constructor_arguments": "000000000000000000000000ee5ca68bae98c3e36bfbfeffb104f22e4ff34cf70000000000000000000000009fd93712400902bff6040efa72b28bf80152f056000000000000000000000000d3080518e5678dc5464b7d4079d1046929985c5900000000000000000000000009f6511a1b07d8db4824a4b243e451ccad4daca40000000000000000000000003fecf5c6b193e9ccf83110b8bc0fd7bc5dfe0fd4",
      "evm_version": "Default",
      "library": "",
      "license_type": "BSL 1.1",
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0x5d93f216f17c225a8b5ffa34e74b7133436281ee": {
      "address": "0x5d93f216f17c225a8b5ffa34e74b7133436281ee",
      "has_source_code": true,
      "source_code": "// File: contracts\\libraries\\SafeMath.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\r\n// Subject to the MIT license.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction underflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\IERC20.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n// File: contracts\\ImpermaxERC20.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract ImpermaxERC20 is IERC20 {\r\n\tusing SafeMath for uint;\r\n\t\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals = 18;\r\n\tuint public totalSupply;\r\n\tmapping(address => uint) public balanceOf;\r\n\tmapping(address => mapping(address => uint)) public allowance;\r\n\t\r\n\tbytes32 public DOMAIN_SEPARATOR;\r\n\tmapping(address => uint) public nonces;\r\n\r\n\tconstructor() public {}\t\r\n\t\r\n\tfunction _setName(string memory _name, string memory _symbol) internal {\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\tuint chainId;\r\n\t\tassembly {\r\n\t\t\tchainId := chainid\r\n\t\t}\r\n\t\tDOMAIN_SEPARATOR = keccak256(\r\n\t\t\tabi.encode(\r\n\t\t\t\tkeccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n\t\t\t\tkeccak256(bytes(_name)),\r\n\t\t\t\tkeccak256(bytes(\"1\")),\r\n\t\t\t\tchainId,\r\n\t\t\t\taddress(this)\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _mint(address to, uint value) internal {\r\n\t\ttotalSupply = totalSupply.add(value);\r\n\t\tbalanceOf[to] = balanceOf[to].add(value);\r\n\t\temit Transfer(address(0), to, value);\r\n\t}\r\n\r\n\tfunction _burn(address from, uint value) internal {\r\n\t\tbalanceOf[from] = balanceOf[from].sub(value);\r\n\t\ttotalSupply = totalSupply.sub(value);\r\n\t\temit Transfer(from, address(0), value);\r\n\t}\r\n\r\n\tfunction _approve(address owner, address spender, uint value) private {\r\n\t\tallowance[owner][spender] = value;\r\n\t\temit Approval(owner, spender, value);\r\n\t}\r\n\r\n\tfunction _transfer(address from, address to, uint value) internal {\r\n\t\tbalanceOf[from] = balanceOf[from].sub(value, \"ImpermaxERC20: TRANSFER_TOO_HIGH\");\r\n\t\tbalanceOf[to] = balanceOf[to].add(value);\r\n\t\temit Transfer(from, to, value);\r\n\t}\r\n\r\n\tfunction approve(address spender, uint value) external returns (bool) {\r\n\t\t_approve(msg.sender, spender, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transfer(address to, uint value) external returns (bool) {\r\n\t\t_transfer(msg.sender, to, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address from, address to, uint value) external returns (bool) {\r\n\t\tif (allowance[from][msg.sender] != uint(-1)) {\r\n\t\t\tallowance[from][msg.sender] = allowance[from][msg.sender].sub(value, \"ImpermaxERC20: TRANSFER_NOT_ALLOWED\");\r\n\t\t}\r\n\t\t_transfer(from, to, value);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction _checkSignature(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s, bytes32 typehash) internal {\r\n\t\trequire(deadline >= block.timestamp, \"ImpermaxERC20: EXPIRED\");\r\n\t\tbytes32 digest = keccak256(\r\n\t\t\tabi.encodePacked(\r\n\t\t\t\t'\\x19\\x01',\r\n\t\t\t\tDOMAIN_SEPARATOR,\r\n\t\t\t\tkeccak256(abi.encode(typehash, owner, spender, value, nonces[owner]++, deadline))\r\n\t\t\t)\r\n\t\t);\r\n\t\taddress recoveredAddress = ecrecover(digest, v, r, s);\r\n\t\trequire(recoveredAddress != address(0) && recoveredAddress == owner, \"ImpermaxERC20: INVALID_SIGNATURE\");\t\r\n\t}\r\n\r\n\t// keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\tbytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n\t\t_checkSignature(owner, spender, value, deadline, v, r, s, PERMIT_TYPEHASH);\r\n\t\t_approve(owner, spender, value);\r\n\t}\r\n}\r\n\r\n// File: contracts\\interfaces\\IPoolToken.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IPoolToken {\r\n\r\n\t/*** Impermax ERC20 ***/\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction totalSupply() external view returns (uint);\r\n\tfunction balanceOf(address owner) external view returns (uint);\r\n\tfunction allowance(address owner, address spender) external view returns (uint);\r\n\tfunction approve(address spender, uint value) external returns (bool);\r\n\tfunction transfer(address to, uint value) external returns (bool);\r\n\tfunction transferFrom(address from, address to, uint value) external returns (bool);\r\n\t\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\tfunction nonces(address owner) external view returns (uint);\r\n\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\t\r\n\t/*** Pool Token ***/\r\n\t\r\n\tevent Mint(address indexed sender, address indexed minter, uint mintAmount, uint mintTokens);\r\n\tevent Redeem(address indexed sender, address indexed redeemer, uint redeemAmount, uint redeemTokens);\r\n\tevent Sync(uint totalBalance);\r\n\t\r\n\tfunction underlying() external view returns (address);\r\n\tfunction factory() external view returns (address);\r\n\tfunction totalBalance() external view returns (uint);\r\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n\tfunction exchangeRate() external returns (uint);\r\n\tfunction mint(address minter) external returns (uint mintTokens);\r\n\tfunction redeem(address redeemer) external returns (uint redeemAmount);\r\n\tfunction skim(address to) external;\r\n\tfunction sync() external;\r\n\t\r\n\tfunction _setFactory() external;\r\n}\r\n\r\n// File: contracts\\PoolToken.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract PoolToken is IPoolToken, ImpermaxERC20 {\r\n   \tuint internal constant initialExchangeRate = 1e18;\r\n\taddress public underlying;\r\n\taddress public factory;\r\n\tuint public totalBalance;\r\n\tuint public constant MINIMUM_LIQUIDITY = 1000;\r\n\t\r\n\tevent Mint(address indexed sender, address indexed minter, uint mintAmount, uint mintTokens);\r\n\tevent Redeem(address indexed sender, address indexed redeemer, uint redeemAmount, uint redeemTokens);\r\n\tevent Sync(uint totalBalance);\r\n\t\r\n\t/*** Initialize ***/\r\n\t\r\n\t// called once by the factory\r\n\tfunction _setFactory() external {\r\n\t\trequire(factory == address(0), \"PoolToken: FACTORY_ALREADY_SET\");\r\n\t\tfactory = msg.sender;\r\n\t}\r\n\t\r\n\t/*** PoolToken ***/\r\n\t\r\n\tfunction _update() internal {\r\n\t\ttotalBalance = IERC20(underlying).balanceOf(address(this));\r\n\t\temit Sync(totalBalance);\r\n\t}\r\n\r\n\tfunction exchangeRate() public returns (uint) \r\n\t{\r\n\t\tuint _totalSupply = totalSupply; // gas savings\r\n\t\tuint _totalBalance = totalBalance; // gas savings\r\n\t\tif (_totalSupply == 0 || _totalBalance == 0) return initialExchangeRate;\r\n\t\treturn _totalBalance.mul(1e18).div(_totalSupply);\r\n\t}\r\n\t\r\n\t// this low-level function should be called from another contract\r\n\tfunction mint(address minter) external nonReentrant update returns (uint mintTokens) {\r\n\t\tuint balance = IERC20(underlying).balanceOf(address(this));\r\n\t\tuint mintAmount = balance.sub(totalBalance);\r\n\t\tmintTokens = mintAmount.mul(1e18).div(exchangeRate());\r\n\r\n\t\tif(totalSupply == 0) {\r\n\t\t\t// permanently lock the first MINIMUM_LIQUIDITY tokens\r\n\t\t\tmintTokens = mintTokens.sub(MINIMUM_LIQUIDITY);\r\n\t\t\t_mint(address(0), MINIMUM_LIQUIDITY);\r\n\t\t}\r\n\t\trequire(mintTokens > 0, \"PoolToken: MINT_AMOUNT_ZERO\");\r\n\t\t_mint(minter, mintTokens);\r\n\t\temit Mint(msg.sender, minter, mintAmount, mintTokens);\r\n\t}\r\n\r\n\t// this low-level function should be called from another contract\r\n\tfunction redeem(address redeemer) external nonReentrant update returns (uint redeemAmount) {\r\n\t\tuint redeemTokens = balanceOf[address(this)];\r\n\t\tredeemAmount = redeemTokens.mul(exchangeRate()).div(1e18);\r\n\r\n\t\trequire(redeemAmount > 0, \"PoolToken: REDEEM_AMOUNT_ZERO\");\r\n\t\trequire(redeemAmount <= totalBalance, \"PoolToken: INSUFFICIENT_CASH\");\r\n\t\t_burn(address(this), redeemTokens);\r\n\t\t_safeTransfer(redeemer, redeemAmount);\r\n\t\temit Redeem(msg.sender, redeemer, redeemAmount, redeemTokens);\t\t\r\n\t}\r\n\r\n\t// force real balance to match totalBalance\r\n\tfunction skim(address to) external nonReentrant {\r\n\t\t_safeTransfer(to, IERC20(underlying).balanceOf(address(this)).sub(totalBalance));\r\n\t}\r\n\r\n\t// force totalBalance to match real balance\r\n\tfunction sync() external nonReentrant update {}\r\n\t\r\n\t/*** Utilities ***/\r\n\t\r\n\t// same safe transfer function used by UniSwapV2 (with fixed underlying)\r\n\tbytes4 private constant SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\r\n\tfunction _safeTransfer(address to, uint amount) internal {\r\n\t\trequire(underlying != address(0), \"PoolToken: NOT_INITIALIZED\");\r\n\t\t(bool success, bytes memory data) = underlying.call(abi.encodeWithSelector(SELECTOR, to, amount));\r\n\t\trequire(success && (data.length == 0 || abi.decode(data, (bool))), \"PoolToken: TRANSFER_FAILED\");\r\n\t}\r\n\t\r\n\t// prevents a contract from calling itself, directly or indirectly.\r\n\tbool internal _notEntered = true;\r\n\tmodifier nonReentrant() {\r\n\t\trequire(_notEntered, \"PoolToken: REENTERED\");\r\n\t\t_notEntered = false;\r\n\t\t_;\r\n\t\t_notEntered = true;\r\n\t}\r\n\t\r\n\t// update totalBalance with current balance\r\n\tmodifier update() {\r\n\t\t_;\r\n\t\t_update();\r\n\t}\r\n}\r\n\r\n// File: contracts\\BStorage.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ncontract BStorage {\r\n\r\n\taddress public collateral;\r\n\r\n\tmapping (address => mapping (address => uint256)) public borrowAllowance;\r\n\t\r\n\tstruct BorrowSnapshot {\r\n\t\tuint112 principal;\t\t// amount in underlying when the borrow was last updated\r\n\t\tuint112 interestIndex;\t// borrow index when borrow was last updated\r\n\t}\r\n\tmapping(uint256 => BorrowSnapshot) internal borrowBalances;\t\r\n\r\n\t// use one memory slot\r\n\tuint112 public borrowIndex = 1e18;\r\n\tuint112 public totalBorrows;\r\n\tuint32 public accrualTimestamp = uint32(block.timestamp % 2**32);\t\r\n\r\n\tuint public exchangeRateLast;\r\n\t\t\r\n\t// use one memory slot\r\n\tuint48 public borrowRate;\r\n\tuint48 public kinkBorrowRate = 6.3419584e9; //20% per year\r\n\tuint32 public rateUpdateTimestamp = uint32(block.timestamp % 2**32);\r\n\r\n\tuint public reserveFactor = 0.10e18; //10%\r\n\tuint public kinkUtilizationRate = 0.75e18; //75%\r\n\tuint public adjustSpeed = 5.787037e12; //50% per day\r\n\tuint public debtCeiling = uint(-1);\r\n\r\n    function safe112(uint n) internal pure returns (uint112) {\r\n        require(n < 2**112, \"Impermax: SAFE112\");\r\n        return uint112(n);\r\n    }\r\n}\r\n\r\n// File: contracts\\BAllowance.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract BAllowance is PoolToken, BStorage {\t\r\n\r\n\tevent BorrowApproval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\tfunction _borrowApprove(address owner, address spender, uint256 value) private {\r\n\t\tborrowAllowance[owner][spender] = value;\r\n\t\temit BorrowApproval(owner, spender, value);\r\n\t}\r\n\t\r\n\tfunction borrowApprove(address spender, uint256 value) external returns (bool) {\r\n\t\t_borrowApprove(msg.sender, spender, value);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction _checkBorrowAllowance(address owner, address spender, uint256 value) internal {\r\n\t\tif (spender == owner) return;\r\n\t\tuint _borrowAllowance = borrowAllowance[owner][spender];\r\n\t\tif (_borrowAllowance == uint256(-1)) return;\r\n\t\trequire(_borrowAllowance >= value, \"ImpermaxV3Borrowable: BORROW_NOT_ALLOWED\");\r\n\t\tborrowAllowance[owner][spender] = _borrowAllowance - value;\r\n\t}\r\n\r\n\t// keccak256(\"BorrowPermit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\tbytes32 public constant BORROW_PERMIT_TYPEHASH = 0xf6d86ed606f871fa1a557ac0ba607adce07767acf53f492fb215a1a4db4aea6f;\r\n\tfunction borrowPermit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n\t\t_checkSignature(owner, spender, value, deadline, v, r, s, BORROW_PERMIT_TYPEHASH);\r\n\t\t_borrowApprove(owner, spender, value);\r\n\t}\r\n}\r\n\r\n// File: contracts\\BInterestRateModel.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract BInterestRateModel is PoolToken, BStorage {\r\n\r\n\t// When utilization is 100% borrowRate is kinkBorrowRate * KINK_MULTIPLIER\r\n\t// kinkBorrowRate relative adjustment per second belongs to [1-adjustSpeed, 1+adjustSpeed*(KINK_MULTIPLIER-1)]\r\n\tuint public constant KINK_MULTIPLIER = 2;\r\n\tuint public constant KINK_BORROW_RATE_MAX = 792.744800e9; //2500% per year\r\n\tuint public constant KINK_BORROW_RATE_MIN = 0.31709792e9; //1% per year\r\n\r\n\tevent AccrueInterest(uint interestAccumulated, uint borrowIndex, uint totalBorrows);\r\n\tevent CalculateKinkBorrowRate(uint kinkBorrowRate);\r\n\tevent CalculateBorrowRate(uint borrowRate);\r\n\t\t\r\n\tfunction _calculateBorrowRate() internal {\r\n\t\tuint _kinkUtilizationRate = kinkUtilizationRate;\t\t\r\n\t\tuint _adjustSpeed = adjustSpeed;\r\n\t\tuint _borrowRate = borrowRate;\t\r\n\t\tuint _kinkBorrowRate = kinkBorrowRate;\r\n\t\tuint32 _rateUpdateTimestamp = rateUpdateTimestamp;\t\t\r\n\t\r\n\t\t// update kinkBorrowRate using previous borrowRate\r\n\t\tuint32 timeElapsed = getBlockTimestamp() - _rateUpdateTimestamp; // underflow is desired\r\n\t\tif(timeElapsed > 0) {\r\n\t\t\trateUpdateTimestamp = getBlockTimestamp();\r\n\t\t\tuint adjustFactor;\r\n\t\t\t\r\n\t\t\tif (_borrowRate < _kinkBorrowRate) {\r\n\t\t\t\t// never overflows, _kinkBorrowRate is never 0\r\n\t\t\t\tuint tmp = (_kinkBorrowRate - _borrowRate) * 1e18 / _kinkBorrowRate * _adjustSpeed * timeElapsed / 1e18;\r\n\t\t\t\tadjustFactor = tmp > 1e18 ? 0 : 1e18 - tmp;\r\n\t\t\t} else {\r\n\t\t\t\t// never overflows, _kinkBorrowRate is never 0\r\n\t\t\t\tuint tmp = (_borrowRate - _kinkBorrowRate) * 1e18 / _kinkBorrowRate * _adjustSpeed * timeElapsed / 1e18;\r\n\t\t\t\tadjustFactor = tmp + 1e18;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// never overflows\r\n\t\t\t_kinkBorrowRate = _kinkBorrowRate * adjustFactor / 1e18;\r\n\t\t\tif(_kinkBorrowRate > KINK_BORROW_RATE_MAX) _kinkBorrowRate = KINK_BORROW_RATE_MAX;\r\n\t\t\tif(_kinkBorrowRate < KINK_BORROW_RATE_MIN) _kinkBorrowRate = KINK_BORROW_RATE_MIN;\r\n\r\n\t\t\tkinkBorrowRate = uint48(_kinkBorrowRate);\r\n\t\t\temit CalculateKinkBorrowRate(_kinkBorrowRate);\r\n\t\t}\r\n\t\t\r\n\t\tuint _utilizationRate;\r\n\t\t{ // avoid stack to deep\r\n\t\tuint _totalBorrows = totalBorrows; // gas savings\r\n\t\tuint _actualBalance = totalBalance.add(_totalBorrows);\r\n\t\t_utilizationRate = (_actualBalance == 0) ? 0 : _totalBorrows * 1e18 / _actualBalance;\r\n\t\t}\r\n\t\t\r\n\t\t// update borrowRate using the new kinkBorrowRate\t\r\n\t\tif(_utilizationRate <= _kinkUtilizationRate) {\r\n\t\t\t// never overflows, _kinkUtilizationRate is never 0\r\n\t\t\t_borrowRate = _kinkBorrowRate * _utilizationRate / _kinkUtilizationRate;\r\n\t\t} else {\r\n\t\t\t// never overflows, _kinkUtilizationRate is always < 1e18\r\n\t\t\tuint overUtilization = (_utilizationRate - _kinkUtilizationRate) * 1e18 / (1e18 - _kinkUtilizationRate);\r\n\t\t\t// never overflows\r\n\t\t\t_borrowRate = ((KINK_MULTIPLIER - 1) * overUtilization + 1e18) * _kinkBorrowRate / 1e18;\r\n\t\t}\r\n\t\tborrowRate = uint48(_borrowRate);\r\n\t\temit CalculateBorrowRate(_borrowRate);\r\n\t}\r\n\t\r\n\t// applies accrued interest to total borrows and reserves\r\n\tfunction accrueInterest() public {\r\n\t\tuint _borrowIndex = borrowIndex;\r\n\t\tuint _totalBorrows = totalBorrows;\r\n\t\tuint32 _accrualTimestamp = accrualTimestamp;\r\n\t\t\r\n\t\tuint32 blockTimestamp = getBlockTimestamp();\r\n\t\tif (_accrualTimestamp == blockTimestamp) return;\r\n\t\tuint32 timeElapsed = blockTimestamp - _accrualTimestamp; // underflow is desired\r\n\t\taccrualTimestamp = blockTimestamp;\r\n\t\t\r\n\t\tuint interestFactor = uint(borrowRate).mul(timeElapsed);\t\r\n\t\tuint interestAccumulated = interestFactor.mul(_totalBorrows).div(1e18);\r\n\t\t_totalBorrows = _totalBorrows.add( interestAccumulated );\r\n\t\t_borrowIndex = _borrowIndex.add( interestFactor.mul(_borrowIndex).div(1e18) );\r\n\t\r\n\t\tborrowIndex = safe112(_borrowIndex);\r\n\t\ttotalBorrows = safe112(_totalBorrows);\r\n\t\temit AccrueInterest(interestAccumulated, _borrowIndex, _totalBorrows);\r\n\t}\r\n\t\t\r\n\tfunction getBlockTimestamp() public view returns (uint32) {\r\n\t\treturn uint32(block.timestamp % 2**32);\r\n\t}\r\n}\r\n\r\n// File: contracts\\interfaces\\IFactory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IFactory {\r\n\tevent LendingPoolInitialized(address indexed nftlp, address indexed token0, address indexed token1,\r\n\t\taddress collateral, address borrowable0, address borrowable1, uint lendingPoolId);\r\n\tevent NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\tevent NewAdmin(address oldAdmin, address newAdmin);\r\n\tevent NewReservesPendingAdmin(address oldReservesPendingAdmin, address newReservesPendingAdmin);\r\n\tevent NewReservesAdmin(address oldReservesAdmin, address newReservesAdmin);\r\n\tevent NewReservesManager(address oldReservesManager, address newReservesManager);\r\n\t\r\n\tfunction admin() external view returns (address);\r\n\tfunction pendingAdmin() external view returns (address);\r\n\tfunction reservesAdmin() external view returns (address);\r\n\tfunction reservesPendingAdmin() external view returns (address);\r\n\tfunction reservesManager() external view returns (address);\r\n\r\n\tfunction getLendingPool(address nftlp) external view returns (\r\n\t\tbool initialized, \r\n\t\tuint24 lendingPoolId, \r\n\t\taddress collateral, \r\n\t\taddress borrowable0, \r\n\t\taddress borrowable1\r\n\t);\r\n\tfunction allLendingPools(uint) external view returns (address nftlp);\r\n\tfunction allLendingPoolsLength() external view returns (uint);\r\n\t\r\n\tfunction bDeployer() external view returns (address);\r\n\tfunction cDeployer() external view returns (address);\r\n\r\n\tfunction createCollateral(address nftlp) external returns (address collateral);\r\n\tfunction createBorrowable0(address nftlp) external returns (address borrowable0);\r\n\tfunction createBorrowable1(address nftlp) external returns (address borrowable1);\r\n\tfunction initializeLendingPool(address nftlp) external;\r\n\r\n\tfunction _setPendingAdmin(address newPendingAdmin) external;\r\n\tfunction _acceptAdmin() external;\r\n\tfunction _setReservesPendingAdmin(address newPendingAdmin) external;\r\n\tfunction _acceptReservesAdmin() external;\r\n\tfunction _setReservesManager(address newReservesManager) external;\r\n}\r\n\r\n// File: contracts\\BSetter.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract BSetter is PoolToken, BStorage {\r\n\r\n\tuint public constant RESERVE_FACTOR_MAX = 0.20e18; //20%\r\n\tuint public constant KINK_UR_MIN = 0.50e18; //50%\r\n\tuint public constant KINK_UR_MAX = 0.99e18; //99%\r\n\tuint public constant ADJUST_SPEED_MIN = 0.05787037e12; //0.5% per day\r\n\tuint public constant ADJUST_SPEED_MAX = 57.87037e12; //500% per day\r\n\r\n\tevent NewReserveFactor(uint newReserveFactor);\r\n\tevent NewKinkUtilizationRate(uint newKinkUtilizationRate);\r\n\tevent NewAdjustSpeed(uint newAdjustSpeed);\r\n\tevent NewDebtCeiling(uint newDebtCeiling);\r\n\t\r\n\t// called once by the factory at time of deployment\r\n\tfunction _initialize (\r\n\t\tstring calldata _name, \r\n\t\tstring calldata _symbol,\r\n\t\taddress _underlying, \r\n\t\taddress _collateral\r\n\t) external {\r\n\t\trequire(msg.sender == factory, \"ImpermaxV3Borrowable: UNAUTHORIZED\"); // sufficient check\r\n\t\t_setName(_name, _symbol);\r\n\t\tunderlying = _underlying;\r\n\t\tcollateral = _collateral;\r\n\t\texchangeRateLast = initialExchangeRate;\r\n\t}\r\n\t\r\n\tfunction _setReserveFactor(uint newReserveFactor) external nonReentrant onlyAdmin {\r\n\t\t_checkSetting(newReserveFactor, 0, RESERVE_FACTOR_MAX);\r\n\t\treserveFactor = newReserveFactor;\r\n\t\temit NewReserveFactor(newReserveFactor);\r\n\t}\r\n\r\n\tfunction _setKinkUtilizationRate(uint newKinkUtilizationRate) external nonReentrant onlyAdmin {\r\n\t\t_checkSetting(newKinkUtilizationRate, KINK_UR_MIN, KINK_UR_MAX);\r\n\t\tkinkUtilizationRate = newKinkUtilizationRate;\r\n\t\temit NewKinkUtilizationRate(newKinkUtilizationRate);\r\n\t}\r\n\r\n\tfunction _setAdjustSpeed(uint newAdjustSpeed) external nonReentrant onlyAdmin {\r\n\t\t_checkSetting(newAdjustSpeed, ADJUST_SPEED_MIN, ADJUST_SPEED_MAX);\r\n\t\tadjustSpeed = newAdjustSpeed;\r\n\t\temit NewAdjustSpeed(newAdjustSpeed);\r\n\t}\r\n\r\n\tfunction _setDebtCeiling(uint newDebtCeiling) external nonReentrant onlyAdmin {\r\n\t\tdebtCeiling = newDebtCeiling;\r\n\t\temit NewDebtCeiling(newDebtCeiling);\r\n\t}\r\n\t\r\n\tfunction _checkSetting(uint parameter, uint min, uint max) internal view {\r\n\t\trequire(parameter >= min, \"ImpermaxV3Borrowable: INVALID_SETTING\");\r\n\t\trequire(parameter <= max, \"ImpermaxV3Borrowable: INVALID_SETTING\");\r\n\t}\r\n\r\n\tmodifier onlyAdmin() {\r\n\t\trequire(msg.sender == IFactory(factory).admin(), \"ImpermaxV3Borrowable: UNAUTHORIZED\");\r\n\t\t_;\r\n\t}\r\n}\r\n\r\n// File: contracts\\interfaces\\IBorrowable.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IBorrowable {\r\n\r\n\t/*** Impermax ERC20 ***/\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction totalSupply() external view returns (uint);\r\n\tfunction balanceOf(address owner) external view returns (uint);\r\n\tfunction allowance(address owner, address spender) external view returns (uint);\r\n\tfunction approve(address spender, uint value) external returns (bool);\r\n\tfunction transfer(address to, uint value) external returns (bool);\r\n\tfunction transferFrom(address from, address to, uint value) external returns (bool);\r\n\t\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\tfunction nonces(address owner) external view returns (uint);\r\n\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\t\r\n\t/*** Pool Token ***/\r\n\t\r\n\tevent Mint(address indexed sender, address indexed minter, uint mintAmount, uint mintTokens);\r\n\tevent Redeem(address indexed sender, address indexed redeemer, uint redeemAmount, uint redeemTokens);\r\n\tevent Sync(uint totalBalance);\r\n\t\r\n\tfunction underlying() external view returns (address);\r\n\tfunction factory() external view returns (address);\r\n\tfunction totalBalance() external view returns (uint);\r\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n\tfunction exchangeRate() external returns (uint);\r\n\tfunction mint(address minter) external returns (uint mintTokens);\r\n\tfunction redeem(address redeemer) external returns (uint redeemAmount);\r\n\tfunction skim(address to) external;\r\n\tfunction sync() external;\r\n\t\r\n\tfunction _setFactory() external;\r\n\t\r\n\t/*** Borrowable ***/\r\n\r\n\tevent BorrowApproval(address indexed owner, address indexed spender, uint value);\r\n\tevent Borrow(address indexed sender, uint256 indexed tokenId, address indexed receiver, uint borrowAmount, uint repayAmount, uint accountBorrowsPrior, uint accountBorrows, uint totalBorrows);\r\n\tevent Liquidate(address indexed sender, uint256 indexed tokenId, address indexed liquidator, uint seizeTokenId, uint repayAmount, uint accountBorrowsPrior, uint accountBorrows, uint totalBorrows);\r\n\tevent RestructureDebt(uint256 indexed tokenId, uint reduceToRatio, uint repayAmount, uint accountBorrowsPrior, uint accountBorrows, uint totalBorrows);\r\n\t\r\n\tfunction collateral() external view returns (address);\r\n\tfunction reserveFactor() external view returns (uint);\r\n\tfunction exchangeRateLast() external view returns (uint);\r\n\tfunction borrowIndex() external view returns (uint);\r\n\tfunction totalBorrows() external view returns (uint);\r\n\tfunction borrowAllowance(address owner, address spender) external view returns (uint);\r\n\tfunction borrowBalance(uint tokenId) external view returns (uint);\t\r\n\tfunction currentBorrowBalance(uint tokenId) external returns (uint);\t\r\n\t\r\n\tfunction BORROW_PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\tfunction borrowApprove(address spender, uint256 value) external returns (bool);\r\n\tfunction borrowPermit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\tfunction borrow(uint256 tokenId, address receiver, uint borrowAmount, bytes calldata data) external;\r\n\tfunction liquidate(uint256 tokenId, uint repayAmount, address liquidator, bytes calldata data) external returns (uint seizeTokenId);\r\n\tfunction restructureDebt(uint256 tokenId, uint256 reduceToRatio) external;\r\n\t\r\n\t/*** Borrowable Interest Rate Model ***/\r\n\r\n\tevent AccrueInterest(uint interestAccumulated, uint borrowIndex, uint totalBorrows);\r\n\tevent CalculateKink(uint kinkRate);\r\n\tevent CalculateBorrowRate(uint borrowRate);\r\n\t\r\n\tfunction KINK_BORROW_RATE_MAX() external pure returns (uint);\r\n\tfunction KINK_BORROW_RATE_MIN() external pure returns (uint);\r\n\tfunction KINK_MULTIPLIER() external pure returns (uint);\r\n\tfunction borrowRate() external view returns (uint);\r\n\tfunction kinkBorrowRate() external view returns (uint);\r\n\tfunction kinkUtilizationRate() external view returns (uint);\r\n\tfunction adjustSpeed() external view returns (uint);\r\n\tfunction rateUpdateTimestamp() external view returns (uint32);\r\n\tfunction accrualTimestamp() external view returns (uint32);\r\n\t\r\n\tfunction accrueInterest() external;\r\n\t\r\n\t/*** Borrowable Setter ***/\r\n\r\n\tevent NewReserveFactor(uint newReserveFactor);\r\n\tevent NewKinkUtilizationRate(uint newKinkUtilizationRate);\r\n\tevent NewAdjustSpeed(uint newAdjustSpeed);\r\n\tevent NewDebtCeiling(uint newDebtCeiling);\r\n\r\n\tfunction RESERVE_FACTOR_MAX() external pure returns (uint);\r\n\tfunction KINK_UR_MIN() external pure returns (uint);\r\n\tfunction KINK_UR_MAX() external pure returns (uint);\r\n\tfunction ADJUST_SPEED_MIN() external pure returns (uint);\r\n\tfunction ADJUST_SPEED_MAX() external pure returns (uint);\r\n\t\r\n\tfunction _initialize (\r\n\t\tstring calldata _name, \r\n\t\tstring calldata _symbol,\r\n\t\taddress _underlying, \r\n\t\taddress _collateral\r\n\t) external;\r\n\tfunction _setReserveFactor(uint newReserveFactor) external;\r\n\tfunction _setKinkUtilizationRate(uint newKinkUtilizationRate) external;\r\n\tfunction _setAdjustSpeed(uint newAdjustSpeed) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\ICollateral.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ICollateral {\r\n\t\r\n\t/* ImpermaxERC721 */\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\t\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction approve(address to, uint256 tokenId) external;\r\n\tfunction setApprovalForAll(address operator, bool approved) external;\r\n\tfunction permit(address spender, uint tokenId, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\t\r\n\t/* Collateral */\r\n\t\r\n\tevent Mint(address indexed to, uint tokenId);\r\n\tevent Redeem(address indexed to, uint tokenId, uint percentage, uint redeemTokenId);\r\n\tevent Seize(address indexed to, uint tokenId, uint percentage, uint redeemTokenId);\r\n\tevent RestructureBadDebt(uint tokenId, uint postLiquidationCollateralRatio);\r\n\t\r\n\tfunction underlying() external view returns (address);\r\n\tfunction factory() external view returns (address);\r\n\tfunction borrowable0() external view returns (address);\r\n\tfunction borrowable1() external view returns (address);\r\n\tfunction safetyMarginSqrt() external view returns (uint);\r\n\tfunction liquidationIncentive() external view returns (uint);\r\n\tfunction liquidationFee() external view returns (uint);\r\n\tfunction liquidationPenalty() external view returns (uint);\r\n\r\n\tfunction mint(address to, uint256 tokenId) external;\r\n\tfunction redeem(address to, uint256 tokenId, uint256 percentage, bytes calldata data) external returns (uint redeemTokenId);\r\n\tfunction redeem(address to, uint256 tokenId, uint256 percentage) external returns (uint redeemTokenId);\r\n\tfunction isLiquidatable(uint tokenId) external returns (bool);\r\n\tfunction isUnderwater(uint tokenId) external returns (bool);\r\n\tfunction canBorrow(uint tokenId, address borrowable, uint accountBorrows) external returns (bool);\r\n\tfunction restructureBadDebt(uint tokenId) external;\r\n\tfunction seize(uint tokenId, uint repayAmount, address liquidator, bytes calldata data) external returns (uint seizeTokenId);\r\n\t\r\n\t/* CSetter */\r\n\t\r\n\tevent NewSafetyMargin(uint newSafetyMarginSqrt);\r\n\tevent NewLiquidationIncentive(uint newLiquidationIncentive);\r\n\tevent NewLiquidationFee(uint newLiquidationFee);\r\n\r\n\tfunction SAFETY_MARGIN_SQRT_MIN() external pure returns (uint);\r\n\tfunction SAFETY_MARGIN_SQRT_MAX() external pure returns (uint);\r\n\tfunction LIQUIDATION_INCENTIVE_MIN() external pure returns (uint);\r\n\tfunction LIQUIDATION_INCENTIVE_MAX() external pure returns (uint);\r\n\tfunction LIQUIDATION_FEE_MAX() external pure returns (uint);\r\n\t\r\n\tfunction _setFactory() external;\r\n\tfunction _initialize (\r\n\t\tstring calldata _name,\r\n\t\tstring calldata _symbol,\r\n\t\taddress _underlying, \r\n\t\taddress _borrowable0, \r\n\t\taddress _borrowable1\r\n\t) external;\r\n\tfunction _setSafetyMarginSqrt(uint newSafetyMarginSqrt) external;\r\n\tfunction _setLiquidationIncentive(uint newLiquidationIncentive) external;\r\n\tfunction _setLiquidationFee(uint newLiquidationFee) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\IImpermaxCallee.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IImpermaxCallee {\r\n    function impermaxV3Borrow(address sender, uint256 tokenId, uint borrowAmount, bytes calldata data) external;\r\n    function impermaxV3Redeem(address sender, uint256 tokenId, uint256 redeemTokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\IERC721.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC721 {\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\t\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\tfunction nonces(uint256 tokenId) external view returns (uint256);\r\n\t\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction approve(address to, uint256 tokenId) external;\r\n\tfunction setApprovalForAll(address operator, bool approved) external;\r\n\tfunction permit(address spender, uint tokenId, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n// File: contracts\\libraries\\Math.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n// a library for performing various math operations\r\n// forked from: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/libraries/Math.sol\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\t\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        z = x > y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\ImpermaxV3Borrowable.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract ImpermaxV3Borrowable is IBorrowable, PoolToken, BStorage, BSetter, BInterestRateModel, BAllowance {\r\n\t\t\r\n\tconstructor() public {}\r\n\r\n\t/*** PoolToken ***/\r\n\t\r\n\tfunction _update() internal {\r\n\t\tsuper._update();\r\n\t\t_calculateBorrowRate();\r\n\t}\r\n\t\r\n\tfunction _mintReserves(uint _exchangeRate, uint _totalSupply) internal returns (uint) {\r\n\t\tuint _exchangeRateLast = exchangeRateLast;\r\n\t\tif (_exchangeRate > _exchangeRateLast) {\r\n\t\t\tuint _exchangeRateNew = _exchangeRate.sub( _exchangeRate.sub(_exchangeRateLast).mul(reserveFactor).div(1e18) );\r\n\t\t\tuint liquidity = _totalSupply.mul(_exchangeRate).div(_exchangeRateNew).sub(_totalSupply);\r\n\t\t\tif (liquidity > 0) {\r\n\t\t\t\taddress reservesManager = IFactory(factory).reservesManager();\r\n\t\t\t\t_mint(reservesManager, liquidity);\r\n\t\t\t}\r\n\t\t\texchangeRateLast = _exchangeRateNew;\r\n\t\t\treturn _exchangeRateNew;\r\n\t\t}\r\n\t\telse return _exchangeRate;\r\n\t}\r\n\t\r\n\tfunction exchangeRate() public accrue returns (uint) {\r\n\t\tuint _totalSupply = totalSupply;\r\n\t\tuint _actualBalance = totalBalance.add(totalBorrows);\r\n\t\tif (_totalSupply == 0 || _actualBalance == 0) return initialExchangeRate;\r\n\t\tuint _exchangeRate = _actualBalance.mul(1e18).div(_totalSupply);\r\n\t\treturn _mintReserves(_exchangeRate, _totalSupply);\r\n\t}\r\n\t\r\n\t// force totalBalance to match real balance\r\n\tfunction sync() external nonReentrant update accrue {}\r\n\t\r\n\t/*** Borrowable ***/\r\n\t\r\n\t// this is the stored borrow balance; the current borrow balance may be slightly higher\r\n\tfunction borrowBalance(uint256 tokenId) public view returns (uint) {\r\n\t\tBorrowSnapshot memory borrowSnapshot = borrowBalances[tokenId];\r\n\t\tif (borrowSnapshot.interestIndex == 0) return 0; // not initialized\r\n\t\treturn uint(borrowSnapshot.principal).mul(borrowIndex).div(borrowSnapshot.interestIndex);\r\n\t}\r\n\tfunction currentBorrowBalance(uint256 tokenId) external accrue returns (uint) {\r\n\t\treturn borrowBalance(tokenId);\r\n\t}\r\n\t\r\n\tfunction _updateBorrow(uint256 tokenId, uint borrowAmount, uint repayAmount) private returns (uint accountBorrowsPrior, uint accountBorrows, uint _totalBorrows) {\r\n\t\taccountBorrowsPrior = borrowBalance(tokenId);\r\n\t\tif (borrowAmount == repayAmount) return (accountBorrowsPrior, accountBorrowsPrior, totalBorrows);\r\n\t\tuint112 _borrowIndex = borrowIndex;\r\n\t\tif (borrowAmount > repayAmount) {\r\n\t\t\tBorrowSnapshot storage borrowSnapshot = borrowBalances[tokenId];\r\n\t\t\tuint increaseAmount = borrowAmount - repayAmount;\r\n\t\t\taccountBorrows = accountBorrowsPrior.add(increaseAmount);\r\n\t\t\tborrowSnapshot.principal = safe112(accountBorrows);\r\n\t\t\tborrowSnapshot.interestIndex = _borrowIndex;\r\n\t\t\t_totalBorrows = uint(totalBorrows).add(increaseAmount);\r\n\t\t\ttotalBorrows = safe112(_totalBorrows);\r\n\t\t\trequire(_totalBorrows <= debtCeiling, \"ImpermaxV3Borrowable: TOTAL_BORROWS_ABOVE_DEBT_CEILING\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\tBorrowSnapshot storage borrowSnapshot = borrowBalances[tokenId];\r\n\t\t\tuint decreaseAmount = repayAmount - borrowAmount;\t\t\r\n\t\t\taccountBorrows = accountBorrowsPrior > decreaseAmount ? accountBorrowsPrior - decreaseAmount : 0;\r\n\t\t\tborrowSnapshot.principal = safe112(accountBorrows);\r\n\t\t\tif(accountBorrows == 0) {\r\n\t\t\t\tborrowSnapshot.interestIndex = 0;\r\n\t\t\t} else {\r\n\t\t\t\tborrowSnapshot.interestIndex = _borrowIndex;\r\n\t\t\t}\r\n\t\t\tuint actualDecreaseAmount = accountBorrowsPrior.sub(accountBorrows);\r\n\t\t\t_totalBorrows = totalBorrows; // gas savings\r\n\t\t\t_totalBorrows = _totalBorrows > actualDecreaseAmount ? _totalBorrows - actualDecreaseAmount : 0;\r\n\t\t\ttotalBorrows = safe112(_totalBorrows);\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\t// this low-level function should be called from another contract\r\n\tfunction borrow(uint256 tokenId, address receiver, uint borrowAmount, bytes calldata data) external nonReentrant update accrue {\r\n\t\tuint _totalBalance = totalBalance;\r\n\t\trequire(borrowAmount <= _totalBalance, \"ImpermaxV3Borrowable: INSUFFICIENT_CASH\");\r\n\t\t\r\n\t\tif (borrowAmount > 0) {\r\n\t\t\taddress borrower = IERC721(collateral).ownerOf(tokenId);\r\n\t\t\t_checkBorrowAllowance(borrower, msg.sender, borrowAmount);\r\n\t\t}\r\n\t\t\r\n\t\t// optimistically transfer funds\r\n\t\tif (borrowAmount > 0) _safeTransfer(receiver, borrowAmount);\r\n\t\tif (data.length > 0) IImpermaxCallee(receiver).impermaxV3Borrow(msg.sender, tokenId, borrowAmount, data);\r\n\t\tuint balance = IERC20(underlying).balanceOf(address(this));\r\n\t\t\r\n\t\tuint repayAmount = balance.add(borrowAmount).sub(_totalBalance);\r\n\t\t(uint accountBorrowsPrior, uint accountBorrows, uint _totalBorrows) = _updateBorrow(tokenId, borrowAmount, repayAmount);\r\n\t\t\r\n\t\tif(borrowAmount > repayAmount) require(\r\n\t\t\tICollateral(collateral).canBorrow(tokenId, address(this), accountBorrows),\r\n\t\t\t\"ImpermaxV3Borrowable: INSUFFICIENT_LIQUIDITY\"\r\n\t\t);\r\n\t\t\r\n\t\temit Borrow(msg.sender, tokenId, receiver, borrowAmount, repayAmount, accountBorrowsPrior, accountBorrows, _totalBorrows);\r\n\t}\r\n\r\n\t// this low-level function should be called from another contract\r\n\tfunction liquidate(uint256 tokenId, uint repayAmount, address liquidator, bytes calldata data) external nonReentrant update accrue returns (uint seizeTokenId) {\r\n\t\trepayAmount = Math.min(repayAmount, borrowBalance(tokenId));\r\n\t\tseizeTokenId = ICollateral(collateral).seize(tokenId, repayAmount, liquidator, data);\r\n\t\t\r\n\t\tuint balance = IERC20(underlying).balanceOf(address(this));\r\n\t\trequire(balance.sub(totalBalance) >= repayAmount, \"ImpermaxV3Borrowable: INSUFFICIENT_ACTUAL_REPAY\");\r\n\t\t\r\n\t\t(uint accountBorrowsPrior, uint accountBorrows, uint _totalBorrows) = _updateBorrow(tokenId, 0, repayAmount);\r\n\t\t\r\n\t\temit Liquidate(msg.sender, tokenId, liquidator, seizeTokenId, repayAmount, accountBorrowsPrior, accountBorrows, _totalBorrows);\r\n\t}\r\n\t\r\n\t// this function must be called from collateral\r\n\tfunction restructureDebt(uint tokenId, uint reduceToRatio) public nonReentrant update accrue {\r\n\t\trequire(msg.sender == collateral, \"ImpermaxV3Borrowable: UNAUTHORIZED\");\r\n\t\trequire(reduceToRatio < 1e18, \"ImpermaxV3Borrowable: NOT_UNDERWATER\");\r\n\t\r\n\t\tuint _borrowBalance = borrowBalance(tokenId);\r\n\t\tif (_borrowBalance == 0) return;\r\n\t\tuint repayAmount = _borrowBalance.sub(_borrowBalance.mul(reduceToRatio).div(1e18));\r\n\t\t(uint accountBorrowsPrior, uint accountBorrows, uint _totalBorrows) = _updateBorrow(tokenId, 0, repayAmount);\r\n\t\t\r\n\t\temit RestructureDebt(tokenId, reduceToRatio, repayAmount, accountBorrowsPrior, accountBorrows, _totalBorrows);\r\n\t}\r\n\t\t\r\n\tmodifier accrue() {\r\n\t\taccrueInterest();\r\n\t\t_;\r\n\t}\r\n}\r\n\r\n// File: contracts\\interfaces\\IBDeployer.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IBDeployer {\r\n\tfunction deployBorrowable(address nftlp, uint8 index) external returns (address borrowable);\r\n}\r\n\r\n// File: contracts\\BDeployer.sol\r\n\r\npragma solidity =0.5.16;\r\n/*\r\n * This contract is used by the Factory to deploy Borrowable(s)\r\n * The bytecode would be too long to fit in the Factory\r\n */\r\n\r\ncontract BDeployer is IBDeployer {\r\n\tconstructor () public {}\r\n\t\r\n\tfunction deployBorrowable(address nftlp, uint8 index) external returns (address borrowable) {\r\n\t\tbytes memory bytecode = type(ImpermaxV3Borrowable).creationCode;\r\n\t\tbytes32 salt = keccak256(abi.encodePacked(msg.sender, nftlp, index));\r\n\t\tassembly {\r\n\t\t\tborrowable := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n\t\t}\r\n\t}\r\n}",
      "abi": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAccumulated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"AccrueInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrowsPrior\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BorrowApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"}],\"name\":\"CalculateBorrowRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kinkRate\",\"type\":\"uint256\"}],\"name\":\"CalculateKink\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kinkBorrowRate\",\"type\":\"uint256\"}],\"name\":\"CalculateKinkBorrowRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrowsPrior\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAdjustSpeed\",\"type\":\"uint256\"}],\"name\":\"NewAdjustSpeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebtCeiling\",\"type\":\"uint256\"}],\"name\":\"NewDebtCeiling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newKinkUtilizationRate\",\"type\":\"uint256\"}],\"name\":\"NewKinkUtilizationRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserveFactor\",\"type\":\"uint256\"}],\"name\":\"NewReserveFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reduceToRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrowsPrior\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"RestructureDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADJUST_SPEED_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADJUST_SPEED_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BORROW_PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KINK_BORROW_RATE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KINK_BORROW_RATE_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KINK_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KINK_UR_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KINK_UR_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVE_FACTOR_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"_initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAdjustSpeed\",\"type\":\"uint256\"}],\"name\":\"_setAdjustSpeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDebtCeiling\",\"type\":\"uint256\"}],\"name\":\"_setDebtCeiling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_setFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newKinkUtilizationRate\",\"type\":\"uint256\"}],\"name\":\"_setKinkUtilizationRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReserveFactor\",\"type\":\"uint256\"}],\"name\":\"_setReserveFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accrualTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adjustSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"borrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"borrowApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"borrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"borrowPermit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowRate\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"currentBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRateLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kinkBorrowRate\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kinkUtilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seizeTokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateUpdateTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reduceToRatio\",\"type\":\"uint256\"}],\"name\":\"restructureDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBorrows\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "contract_name": "ImpermaxV3Borrowable",
      "compiler_version": "v0.5.16+commit.9c3226ce",
      "optimization_used": "1",
      "runs": "999999",
      "constructor_arguments": "",
      "evm_version": "Default",
      "library": "",
      "license_type": "BSL 1.1",
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb": {
      "address": "0xbbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb",
      "has_source_code": true,
      "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Morpho.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {\\n    Id,\\n    IMorphoStaticTyping,\\n    IMorphoBase,\\n    MarketParams,\\n    Position,\\n    Market,\\n    Authorization,\\n    Signature\\n} from \\\"./interfaces/IMorpho.sol\\\";\\nimport {\\n    IMorphoLiquidateCallback,\\n    IMorphoRepayCallback,\\n    IMorphoSupplyCallback,\\n    IMorphoSupplyCollateralCallback,\\n    IMorphoFlashLoanCallback\\n} from \\\"./interfaces/IMorphoCallbacks.sol\\\";\\nimport {IIrm} from \\\"./interfaces/IIrm.sol\\\";\\nimport {IERC20} from \\\"./interfaces/IERC20.sol\\\";\\nimport {IOracle} from \\\"./interfaces/IOracle.sol\\\";\\n\\nimport \\\"./libraries/ConstantsLib.sol\\\";\\nimport {UtilsLib} from \\\"./libraries/UtilsLib.sol\\\";\\nimport {EventsLib} from \\\"./libraries/EventsLib.sol\\\";\\nimport {ErrorsLib} from \\\"./libraries/ErrorsLib.sol\\\";\\nimport {MathLib, WAD} from \\\"./libraries/MathLib.sol\\\";\\nimport {SharesMathLib} from \\\"./libraries/SharesMathLib.sol\\\";\\nimport {MarketParamsLib} from \\\"./libraries/MarketParamsLib.sol\\\";\\nimport {SafeTransferLib} from \\\"./libraries/SafeTransferLib.sol\\\";\\n\\n/// @title Morpho\\n/// @author Morpho Labs\\n/// @custom:contact security@morpho.org\\n/// @notice The Morpho contract.\\ncontract Morpho is IMorphoStaticTyping {\\n    using MathLib for uint128;\\n    using MathLib for uint256;\\n    using UtilsLib for uint256;\\n    using SharesMathLib for uint256;\\n    using SafeTransferLib for IERC20;\\n    using MarketParamsLib for MarketParams;\\n\\n    /* IMMUTABLES */\\n\\n    /// @inheritdoc IMorphoBase\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n    /* STORAGE */\\n\\n    /// @inheritdoc IMorphoBase\\n    address public owner;\\n    /// @inheritdoc IMorphoBase\\n    address public feeRecipient;\\n    /// @inheritdoc IMorphoStaticTyping\\n    mapping(Id => mapping(address => Position)) public position;\\n    /// @inheritdoc IMorphoStaticTyping\\n    mapping(Id => Market) public market;\\n    /// @inheritdoc IMorphoBase\\n    mapping(address => bool) public isIrmEnabled;\\n    /// @inheritdoc IMorphoBase\\n    mapping(uint256 => bool) public isLltvEnabled;\\n    /// @inheritdoc IMorphoBase\\n    mapping(address => mapping(address => bool)) public isAuthorized;\\n    /// @inheritdoc IMorphoBase\\n    mapping(address => uint256) public nonce;\\n    /// @inheritdoc IMorphoStaticTyping\\n    mapping(Id => MarketParams) public idToMarketParams;\\n\\n    /* CONSTRUCTOR */\\n\\n    /// @param newOwner The new owner of the contract.\\n    constructor(address newOwner) {\\n        require(newOwner != address(0), ErrorsLib.ZERO_ADDRESS);\\n\\n        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, block.chainid, address(this)));\\n        owner = newOwner;\\n\\n        emit EventsLib.SetOwner(newOwner);\\n    }\\n\\n    /* MODIFIERS */\\n\\n    /// @dev Reverts if the caller is not the owner.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, ErrorsLib.NOT_OWNER);\\n        _;\\n    }\\n\\n    /* ONLY OWNER FUNCTIONS */\\n\\n    /// @inheritdoc IMorphoBase\\n    function setOwner(address newOwner) external onlyOwner {\\n        require(newOwner != owner, ErrorsLib.ALREADY_SET);\\n\\n        owner = newOwner;\\n\\n        emit EventsLib.SetOwner(newOwner);\\n    }\\n\\n    /// @inheritdoc IMorphoBase\\n    function enableIrm(address irm) external onlyOwner {\\n        require(!isIrmEnabled[irm], ErrorsLib.ALREADY_SET);\\n\\n        isIrmEnabled[irm] = true;\\n\\n        emit EventsLib.EnableIrm(irm);\\n    }\\n\\n    /// @inheritdoc IMorphoBase\\n    function enableLltv(uint256 lltv) external onlyOwner {\\n        require(!isLltvEnabled[lltv], ErrorsLib.ALREADY_SET);\\n        require(lltv < WAD, ErrorsLib.MAX_LLTV_EXCEEDED);\\n\\n        isLltvEnabled[lltv] = true;\\n\\n        emit EventsLib.EnableLltv(lltv);\\n    }\\n\\n    /// @inheritdoc IMorphoBase\\n    function setFee(MarketParams memory marketParams, uint256 newFee) external onlyOwner {\\n        Id id = marketParams.id();\\n        require(market[id].lastUpdate != 0, ErrorsLib.MARKET_NOT_CREATED);\\n        require(newFee != market[id].fee, ErrorsLib.ALREADY_SET);\\n        require(newFee <= MAX_FEE, ErrorsLib.MAX_FEE_EXCEEDED);\\n\\n        // Accrue interest using the previous fee set before changing it.\\n        _accrueInterest(marketParams, id);\\n\\n        // Safe \\\"unchecked\\\" cast.\\n        market[id].fee = uint128(newFee);\\n\\n        emit EventsLib.SetFee(id, newFee);\\n    }\\n\\n    /// @inheritdoc IMorphoBase\\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\\n        require(newFeeRecipient != feeRecipient, ErrorsLib.ALREADY_SET);\\n\\n        feeRecipient = newFeeRecipient;\\n\\n        emit EventsLib.SetFeeRecipient(newFeeRecipient);\\n    }\\n\\n    /* MARKET CREATION */\\n\\n    /// @inheritdoc IMorphoBase\\n    function createMarket(MarketParams memory marketParams) external {\\n        Id id = marketParams.id();\\n        require(isIrmEnabled[marketParams.irm], ErrorsLib.IRM_NOT_ENABLED);\\n        require(isLltvEnabled[marketParams.lltv], ErrorsLib.LLTV_NOT_ENABLED);\\n        require(market[id].lastUpdate == 0, ErrorsLib.MARKET_ALREADY_CREATED);\\n\\n        // Safe \\\"unchecked\\\" cast.\\n        market[id].lastUpdate = uint128(block.timestamp);\\n        idToMarketParams[id] = marketParams;\\n\\n        emit EventsLib.CreateMarket(id, marketParams);\\n\\n        // Call to initialize the IRM in case it is stateful.\\n        if (marketParams.irm != address(0)) IIrm(marketParams.irm).borrowRate(marketParams, market[id]);\\n    }\\n\\n    /* SUPPLY MANAGEMENT */\\n\\n    /// @inheritdoc IMorphoBase\\n    function supply(\\n        MarketParams memory marketParams,\\n        uint256 assets,\\n        uint256 shares,\\n        address onBehalf,\\n        bytes calldata data\\n    ) external returns (uint256, uint256) {\\n        Id id = marketParams.id();\\n        require(market[id].lastUpdate != 0, ErrorsLib.MARKET_NOT_CREATED);\\n        require(UtilsLib.exactlyOneZero(assets, shares), ErrorsLib.INCONSISTENT_INPUT);\\n        require(onBehalf != address(0), ErrorsLib.ZERO_ADDRESS);\\n\\n        _accrueInterest(marketParams, id);\\n\\n        if (assets > 0) shares = assets.toSharesDown(market[id].totalSupplyAssets, market[id].totalSupplyShares);\\n        else assets = shares.toAssetsUp(market[id].totalSupplyAssets, market[id].totalSupplyShares);\\n\\n        position[id][onBehalf].supplyShares += shares;\\n        market[id].totalSupplyShares += shares.toUint128();\\n        market[id].totalSupplyAssets += assets.toUint128();\\n\\n        emit EventsLib.Supply(id, msg.sender, onBehalf, assets, shares);\\n\\n        if (data.length > 0) IMorphoSupplyCallback(msg.sender).onMorphoSupply(assets, data);\\n\\n        IERC20(marketParams.loanToken).safeTransferFrom(msg.sender, address(this), assets);\\n\\n        return (assets, shares);\\n    }\\n\\n    /// @inheritdoc IMorphoBase\\n    function withdraw(\\n        MarketParams memory marketParams,\\n        uint256 assets,\\n        uint256 shares,\\n        address onBehalf,\\n        address receiver\\n    ) external returns (uint256, uint256) {\\n        Id id = marketParams.id();\\n        require(market[id].lastUpdate != 0, ErrorsLib.MARKET_NOT_CREATED);\\n        require(UtilsLib.exactlyOneZero(assets, shares), ErrorsLib.INCONSISTENT_INPUT);\\n        require(receiver != address(0), ErrorsLib.ZERO_ADDRESS);\\n        // No need to verify that onBehalf != address(0) thanks to the following authorization check.\\n        require(_isSenderAuthorized(onBehalf), ErrorsLib.UNAUTHORIZED);\\n\\n        _accrueInterest(marketParams, id);\\n\\n        if (assets > 0) shares = assets.toSharesUp(market[id].totalSupplyAssets, market[id].totalSupplyShares);\\n        else assets = shares.toAssetsDown(market[id].totalSupplyAssets, market[id].totalSupplyShares);\\n\\n        position[id][onBehalf].supplyShares -= shares;\\n        market[id].totalSupplyShares -= shares.toUint128();\\n        market[id].totalSupplyAssets -= assets.toUint128();\\n\\n        require(market[id].totalBorrowAssets <= market[id].totalSupplyAssets, ErrorsLib.INSUFFICIENT_LIQUIDITY);\\n\\n        emit EventsLib.Withdraw(id, msg.sender, onBehalf, receiver, assets, shares);\\n\\n        IERC20(marketParams.loanToken).safeTransfer(receiver, assets);\\n\\n        return (assets, shares);\\n    }\\n\\n    /* BORROW MANAGEMENT */\\n\\n    /// @inheritdoc IMorphoBase\\n    function borrow(\\n        MarketParams memory marketParams,\\n        uint256 assets,\\n        uint256 shares,\\n        address onBehalf,\\n        address receiver\\n    ) external returns (uint256, uint256) {\\n        Id id = marketParams.id();\\n        require(market[id].lastUpdate != 0, ErrorsLib.MARKET_NOT_CREATED);\\n        require(UtilsLib.exactlyOneZero(assets, shares), ErrorsLib.INCONSISTENT_INPUT);\\n        require(receiver != address(0), ErrorsLib.ZERO_ADDRESS);\\n        // No need to verify that onBehalf != address(0) thanks to the following authorization check.\\n        require(_isSenderAuthorized(onBehalf), ErrorsLib.UNAUTHORIZED);\\n\\n        _accrueInterest(marketParams, id);\\n\\n        if (assets > 0) shares = assets.toSharesUp(market[id].totalBorrowAssets, market[id].totalBorrowShares);\\n        else assets = shares.toAssetsDown(market[id].totalBorrowAssets, market[id].totalBorrowShares);\\n\\n        position[id][onBehalf].borrowShares += shares.toUint128();\\n        market[id].totalBorrowShares += shares.toUint128();\\n        market[id].totalBorrowAssets += assets.toUint128();\\n\\n        require(_isHealthy(marketParams, id, onBehalf), ErrorsLib.INSUFFICIENT_COLLATERAL);\\n        require(market[id].totalBorrowAssets <= market[id].totalSupplyAssets, ErrorsLib.INSUFFICIENT_LIQUIDITY);\\n\\n        emit EventsLib.Borrow(id, msg.sender, onBehalf, receiver, assets, shares);\\n\\n        IERC20(marketParams.loanToken).safeTransfer(receiver, assets);\\n\\n        return (assets, shares);\\n    }\\n\\n    /// @inheritdoc IMorphoBase\\n    function repay(\\n        MarketParams memory marketParams,\\n        uint256 assets,\\n        uint256 shares,\\n        address onBehalf,\\n        bytes calldata data\\n    ) external returns (uint256, uint256) {\\n        Id id = marketParams.id();\\n        require(market[id].lastUpdate != 0, ErrorsLib.MARKET_NOT_CREATED);\\n        require(UtilsLib.exactlyOneZero(assets, shares), ErrorsLib.INCONSISTENT_INPUT);\\n        require(onBehalf != address(0), ErrorsLib.ZERO_ADDRESS);\\n\\n        _accrueInterest(marketParams, id);\\n\\n        if (assets > 0) shares = assets.toSharesDown(market[id].totalBorrowAssets, market[id].totalBorrowShares);\\n        else assets = shares.toAssetsUp(market[id].totalBorrowAssets, market[id].totalBorrowShares);\\n\\n        position[id][onBehalf].borrowShares -= shares.toUint128();\\n        market[id].totalBorrowShares -= shares.toUint128();\\n        market[id].totalBorrowAssets = UtilsLib.zeroFloorSub(market[id].totalBorrowAssets, assets).toUint128();\\n\\n        // `assets` may be greater than `totalBorrowAssets` by 1.\\n        emit EventsLib.Repay(id, msg.sender, onBehalf, assets, shares);\\n\\n        if (data.length > 0) IMorphoRepayCallback(msg.sender).onMorphoRepay(assets, data);\\n\\n        IERC20(marketParams.loanToken).safeTransferFrom(msg.sender, address(this), assets);\\n\\n        return (assets, shares);\\n    }\\n\\n    /* COLLATERAL MANAGEMENT */\\n\\n    /// @inheritdoc IMorphoBase\\n    function supplyCollateral(MarketParams memory marketParams, uint256 assets, address onBehalf, bytes calldata data)\\n        external\\n    {\\n        Id id = marketParams.id();\\n        require(market[id].lastUpdate != 0, ErrorsLib.MARKET_NOT_CREATED);\\n        require(assets != 0, ErrorsLib.ZERO_ASSETS);\\n        require(onBehalf != address(0), ErrorsLib.ZERO_ADDRESS);\\n\\n        // Don't accrue interest because it's not required and it saves gas.\\n\\n        position[id][onBehalf].collateral += assets.toUint128();\\n\\n        emit EventsLib.SupplyCollateral(id, msg.sender, onBehalf, assets);\\n\\n        if (data.length > 0) IMorphoSupplyCollateralCallback(msg.sender).onMorphoSupplyCollateral(assets, data);\\n\\n        IERC20(marketParams.collateralToken).safeTransferFrom(msg.sender, address(this), assets);\\n    }\\n\\n    /// @inheritdoc IMorphoBase\\n    function withdrawCollateral(MarketParams memory marketParams, uint256 assets, address onBehalf, address receiver)\\n        external\\n    {\\n        Id id = marketParams.id();\\n        require(market[id].lastUpdate != 0, ErrorsLib.MARKET_NOT_CREATED);\\n        require(assets != 0, ErrorsLib.ZERO_ASSETS);\\n        require(receiver != address(0), ErrorsLib.ZERO_ADDRESS);\\n        // No need to verify that onBehalf != address(0) thanks to the following authorization check.\\n        require(_isSenderAuthorized(onBehalf), ErrorsLib.UNAUTHORIZED);\\n\\n        _accrueInterest(marketParams, id);\\n\\n        position[id][onBehalf].collateral -= assets.toUint128();\\n\\n        require(_isHealthy(marketParams, id, onBehalf), ErrorsLib.INSUFFICIENT_COLLATERAL);\\n\\n        emit EventsLib.WithdrawCollateral(id, msg.sender, onBehalf, receiver, assets);\\n\\n        IERC20(marketParams.collateralToken).safeTransfer(receiver, assets);\\n    }\\n\\n    /* LIQUIDATION */\\n\\n    /// @inheritdoc IMorphoBase\\n    function liquidate(\\n        MarketParams memory marketParams,\\n        address borrower,\\n        uint256 seizedAssets,\\n        uint256 repaidShares,\\n        bytes calldata data\\n    ) external returns (uint256, uint256) {\\n        Id id = marketParams.id();\\n        require(market[id].lastUpdate != 0, ErrorsLib.MARKET_NOT_CREATED);\\n        require(UtilsLib.exactlyOneZero(seizedAssets, repaidShares), ErrorsLib.INCONSISTENT_INPUT);\\n\\n        _accrueInterest(marketParams, id);\\n\\n        {\\n            uint256 collateralPrice = IOracle(marketParams.oracle).price();\\n\\n            require(!_isHealthy(marketParams, id, borrower, collateralPrice), ErrorsLib.HEALTHY_POSITION);\\n\\n            // The liquidation incentive factor is min(maxLiquidationIncentiveFactor, 1/(1 - cursor*(1 - lltv))).\\n            uint256 liquidationIncentiveFactor = UtilsLib.min(\\n                MAX_LIQUIDATION_INCENTIVE_FACTOR,\\n                WAD.wDivDown(WAD - LIQUIDATION_CURSOR.wMulDown(WAD - marketParams.lltv))\\n            );\\n\\n            if (seizedAssets > 0) {\\n                uint256 seizedAssetsQuoted = seizedAssets.mulDivUp(collateralPrice, ORACLE_PRICE_SCALE);\\n\\n                repaidShares = seizedAssetsQuoted.wDivUp(liquidationIncentiveFactor).toSharesUp(\\n                    market[id].totalBorrowAssets, market[id].totalBorrowShares\\n                );\\n            } else {\\n                seizedAssets = repaidShares.toAssetsDown(market[id].totalBorrowAssets, market[id].totalBorrowShares)\\n                    .wMulDown(liquidationIncentiveFactor).mulDivDown(ORACLE_PRICE_SCALE, collateralPrice);\\n            }\\n        }\\n        uint256 repaidAssets = repaidShares.toAssetsUp(market[id].totalBorrowAssets, market[id].totalBorrowShares);\\n\\n        position[id][borrower].borrowShares -= repaidShares.toUint128();\\n        market[id].totalBorrowShares -= repaidShares.toUint128();\\n        market[id].totalBorrowAssets = UtilsLib.zeroFloorSub(market[id].totalBorrowAssets, repaidAssets).toUint128();\\n\\n        position[id][borrower].collateral -= seizedAssets.toUint128();\\n\\n        uint256 badDebtShares;\\n        uint256 badDebtAssets;\\n        if (position[id][borrower].collateral == 0) {\\n            badDebtShares = position[id][borrower].borrowShares;\\n            badDebtAssets = UtilsLib.min(\\n                market[id].totalBorrowAssets,\\n                badDebtShares.toAssetsUp(market[id].totalBorrowAssets, market[id].totalBorrowShares)\\n            );\\n\\n            market[id].totalBorrowAssets -= badDebtAssets.toUint128();\\n            market[id].totalSupplyAssets -= badDebtAssets.toUint128();\\n            market[id].totalBorrowShares -= badDebtShares.toUint128();\\n            position[id][borrower].borrowShares = 0;\\n        }\\n\\n        // `repaidAssets` may be greater than `totalBorrowAssets` by 1.\\n        emit EventsLib.Liquidate(\\n            id, msg.sender, borrower, repaidAssets, repaidShares, seizedAssets, badDebtAssets, badDebtShares\\n        );\\n\\n        IERC20(marketParams.collateralToken).safeTransfer(msg.sender, seizedAssets);\\n\\n        if (data.length > 0) IMorphoLiquidateCallback(msg.sender).onMorphoLiquidate(repaidAssets, data);\\n\\n        IERC20(marketParams.loanToken).safeTransferFrom(msg.sender, address(this), repaidAssets);\\n\\n        return (seizedAssets, repaidAssets);\\n    }\\n\\n    /* FLASH LOANS */\\n\\n    /// @inheritdoc IMorphoBase\\n    function flashLoan(address token, uint256 assets, bytes calldata data) external {\\n        require(assets != 0, ErrorsLib.ZERO_ASSETS);\\n\\n        emit EventsLib.FlashLoan(msg.sender, token, assets);\\n\\n        IERC20(token).safeTransfer(msg.sender, assets);\\n\\n        IMorphoFlashLoanCallback(msg.sender).onMorphoFlashLoan(assets, data);\\n\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), assets);\\n    }\\n\\n    /* AUTHORIZATION */\\n\\n    /// @inheritdoc IMorphoBase\\n    function setAuthorization(address authorized, bool newIsAuthorized) external {\\n        require(newIsAuthorized != isAuthorized[msg.sender][authorized], ErrorsLib.ALREADY_SET);\\n\\n        isAuthorized[msg.sender][authorized] = newIsAuthorized;\\n\\n        emit EventsLib.SetAuthorization(msg.sender, msg.sender, authorized, newIsAuthorized);\\n    }\\n\\n    /// @inheritdoc IMorphoBase\\n    function setAuthorizationWithSig(Authorization memory authorization, Signature calldata signature) external {\\n        /// Do not check whether authorization is already set because the nonce increment is a desired side effect.\\n        require(block.timestamp <= authorization.deadline, ErrorsLib.SIGNATURE_EXPIRED);\\n        require(authorization.nonce == nonce[authorization.authorizer]++, ErrorsLib.INVALID_NONCE);\\n\\n        bytes32 hashStruct = keccak256(abi.encode(AUTHORIZATION_TYPEHASH, authorization));\\n        bytes32 digest = keccak256(bytes.concat(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, hashStruct));\\n        address signatory = ecrecover(digest, signature.v, signature.r, signature.s);\\n\\n        require(signatory != address(0) && authorization.authorizer == signatory, ErrorsLib.INVALID_SIGNATURE);\\n\\n        emit EventsLib.IncrementNonce(msg.sender, authorization.authorizer, authorization.nonce);\\n\\n        isAuthorized[authorization.authorizer][authorization.authorized] = authorization.isAuthorized;\\n\\n        emit EventsLib.SetAuthorization(\\n            msg.sender, authorization.authorizer, authorization.authorized, authorization.isAuthorized\\n        );\\n    }\\n\\n    /// @dev Returns whether the sender is authorized to manage `onBehalf`'s positions.\\n    function _isSenderAuthorized(address onBehalf) internal view returns (bool) {\\n        return msg.sender == onBehalf || isAuthorized[onBehalf][msg.sender];\\n    }\\n\\n    /* INTEREST MANAGEMENT */\\n\\n    /// @inheritdoc IMorphoBase\\n    function accrueInterest(MarketParams memory marketParams) external {\\n        Id id = marketParams.id();\\n        require(market[id].lastUpdate != 0, ErrorsLib.MARKET_NOT_CREATED);\\n\\n        _accrueInterest(marketParams, id);\\n    }\\n\\n    /// @dev Accrues interest for the given market `marketParams`.\\n    /// @dev Assumes that the inputs `marketParams` and `id` match.\\n    function _accrueInterest(MarketParams memory marketParams, Id id) internal {\\n        uint256 elapsed = block.timestamp - market[id].lastUpdate;\\n        if (elapsed == 0) return;\\n\\n        if (marketParams.irm != address(0)) {\\n            uint256 borrowRate = IIrm(marketParams.irm).borrowRate(marketParams, market[id]);\\n            uint256 interest = market[id].totalBorrowAssets.wMulDown(borrowRate.wTaylorCompounded(elapsed));\\n            market[id].totalBorrowAssets += interest.toUint128();\\n            market[id].totalSupplyAssets += interest.toUint128();\\n\\n            uint256 feeShares;\\n            if (market[id].fee != 0) {\\n                uint256 feeAmount = interest.wMulDown(market[id].fee);\\n                // The fee amount is subtracted from the total supply in this calculation to compensate for the fact\\n                // that total supply is already increased by the full interest (including the fee amount).\\n                feeShares =\\n                    feeAmount.toSharesDown(market[id].totalSupplyAssets - feeAmount, market[id].totalSupplyShares);\\n                position[id][feeRecipient].supplyShares += feeShares;\\n                market[id].totalSupplyShares += feeShares.toUint128();\\n            }\\n\\n            emit EventsLib.AccrueInterest(id, borrowRate, interest, feeShares);\\n        }\\n\\n        // Safe \\\"unchecked\\\" cast.\\n        market[id].lastUpdate = uint128(block.timestamp);\\n    }\\n\\n    /* HEALTH CHECK */\\n\\n    /// @dev Returns whether the position of `borrower` in the given market `marketParams` is healthy.\\n    /// @dev Assumes that the inputs `marketParams` and `id` match.\\n    function _isHealthy(MarketParams memory marketParams, Id id, address borrower) internal view returns (bool) {\\n        if (position[id][borrower].borrowShares == 0) return true;\\n\\n        uint256 collateralPrice = IOracle(marketParams.oracle).price();\\n\\n        return _isHealthy(marketParams, id, borrower, collateralPrice);\\n    }\\n\\n    /// @dev Returns whether the position of `borrower` in the given market `marketParams` with the given\\n    /// `collateralPrice` is healthy.\\n    /// @dev Assumes that the inputs `marketParams` and `id` match.\\n    /// @dev Rounds in favor of the protocol, so one might not be able to borrow exactly `maxBorrow` but one unit less.\\n    function _isHealthy(MarketParams memory marketParams, Id id, address borrower, uint256 collateralPrice)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint256 borrowed = uint256(position[id][borrower].borrowShares).toAssetsUp(\\n            market[id].totalBorrowAssets, market[id].totalBorrowShares\\n        );\\n        uint256 maxBorrow = uint256(position[id][borrower].collateral).mulDivDown(collateralPrice, ORACLE_PRICE_SCALE)\\n            .wMulDown(marketParams.lltv);\\n\\n        return maxBorrow >= borrowed;\\n    }\\n\\n    /* STORAGE VIEW */\\n\\n    /// @inheritdoc IMorphoBase\\n    function extSloads(bytes32[] calldata slots) external view returns (bytes32[] memory res) {\\n        uint256 nSlots = slots.length;\\n\\n        res = new bytes32[](nSlots);\\n\\n        for (uint256 i; i < nSlots;) {\\n            bytes32 slot = slots[i++];\\n\\n            assembly (\\\"memory-safe\\\") {\\n                mstore(add(res, mul(i, 32)), sload(slot))\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IMorpho.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\ntype Id is bytes32;\\n\\nstruct MarketParams {\\n    address loanToken;\\n    address collateralToken;\\n    address oracle;\\n    address irm;\\n    uint256 lltv;\\n}\\n\\n/// @dev Warning: For `feeRecipient`, `supplyShares` does not contain the accrued shares since the last interest\\n/// accrual.\\nstruct Position {\\n    uint256 supplyShares;\\n    uint128 borrowShares;\\n    uint128 collateral;\\n}\\n\\n/// @dev Warning: `totalSupplyAssets` does not contain the accrued interest since the last interest accrual.\\n/// @dev Warning: `totalBorrowAssets` does not contain the accrued interest since the last interest accrual.\\n/// @dev Warning: `totalSupplyShares` does not contain the additional shares accrued by `feeRecipient` since the last\\n/// interest accrual.\\nstruct Market {\\n    uint128 totalSupplyAssets;\\n    uint128 totalSupplyShares;\\n    uint128 totalBorrowAssets;\\n    uint128 totalBorrowShares;\\n    uint128 lastUpdate;\\n    uint128 fee;\\n}\\n\\nstruct Authorization {\\n    address authorizer;\\n    address authorized;\\n    bool isAuthorized;\\n    uint256 nonce;\\n    uint256 deadline;\\n}\\n\\nstruct Signature {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n}\\n\\n/// @dev This interface is used for factorizing IMorphoStaticTyping and IMorpho.\\n/// @dev Consider using the IMorpho interface instead of this one.\\ninterface IMorphoBase {\\n    /// @notice The EIP-712 domain separator.\\n    /// @dev Warning: Every EIP-712 signed message based on this domain separator can be reused on chains sharing the\\n    /// same chain id and on forks because the domain separator would be the same.\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice The owner of the contract.\\n    /// @dev It has the power to change the owner.\\n    /// @dev It has the power to set fees on markets and set the fee recipient.\\n    /// @dev It has the power to enable but not disable IRMs and LLTVs.\\n    function owner() external view returns (address);\\n\\n    /// @notice The fee recipient of all markets.\\n    /// @dev The recipient receives the fees of a given market through a supply position on that market.\\n    function feeRecipient() external view returns (address);\\n\\n    /// @notice Whether the `irm` is enabled.\\n    function isIrmEnabled(address irm) external view returns (bool);\\n\\n    /// @notice Whether the `lltv` is enabled.\\n    function isLltvEnabled(uint256 lltv) external view returns (bool);\\n\\n    /// @notice Whether `authorized` is authorized to modify `authorizer`'s position on all markets.\\n    /// @dev Anyone is authorized to modify their own positions, regardless of this variable.\\n    function isAuthorized(address authorizer, address authorized) external view returns (bool);\\n\\n    /// @notice The `authorizer`'s current nonce. Used to prevent replay attacks with EIP-712 signatures.\\n    function nonce(address authorizer) external view returns (uint256);\\n\\n    /// @notice Sets `newOwner` as `owner` of the contract.\\n    /// @dev Warning: No two-step transfer ownership.\\n    /// @dev Warning: The owner can be set to the zero address.\\n    function setOwner(address newOwner) external;\\n\\n    /// @notice Enables `irm` as a possible IRM for market creation.\\n    /// @dev Warning: It is not possible to disable an IRM.\\n    function enableIrm(address irm) external;\\n\\n    /// @notice Enables `lltv` as a possible LLTV for market creation.\\n    /// @dev Warning: It is not possible to disable a LLTV.\\n    function enableLltv(uint256 lltv) external;\\n\\n    /// @notice Sets the `newFee` for the given market `marketParams`.\\n    /// @param newFee The new fee, scaled by WAD.\\n    /// @dev Warning: The recipient can be the zero address.\\n    function setFee(MarketParams memory marketParams, uint256 newFee) external;\\n\\n    /// @notice Sets `newFeeRecipient` as `feeRecipient` of the fee.\\n    /// @dev Warning: If the fee recipient is set to the zero address, fees will accrue there and will be lost.\\n    /// @dev Modifying the fee recipient will allow the new recipient to claim any pending fees not yet accrued. To\\n    /// ensure that the current recipient receives all due fees, accrue interest manually prior to making any changes.\\n    function setFeeRecipient(address newFeeRecipient) external;\\n\\n    /// @notice Creates the market `marketParams`.\\n    /// @dev Here is the list of assumptions on the market's dependencies (tokens, IRM and oracle) that guarantees\\n    /// Morpho behaves as expected:\\n    /// - The token should be ERC-20 compliant, except that it can omit return values on `transfer` and `transferFrom`.\\n    /// - The token balance of Morpho should only decrease on `transfer` and `transferFrom`. In particular, tokens with\\n    /// burn functions are not supported.\\n    /// - The token should not re-enter Morpho on `transfer` nor `transferFrom`.\\n    /// - The token balance of the sender (resp. receiver) should decrease (resp. increase) by exactly the given amount\\n    /// on `transfer` and `transferFrom`. In particular, tokens with fees on transfer are not supported.\\n    /// - The IRM should not re-enter Morpho.\\n    /// - The oracle should return a price with the correct scaling.\\n    /// @dev Here is a list of assumptions on the market's dependencies which, if broken, could break Morpho's liveness\\n    /// properties (funds could get stuck):\\n    /// - The token should not revert on `transfer` and `transferFrom` if balances and approvals are right.\\n    /// - The amount of assets supplied and borrowed should not go above ~1e35 (otherwise the computation of\\n    /// `toSharesUp` and `toSharesDown` can overflow).\\n    /// - The IRM should not revert on `borrowRate`.\\n    /// - The IRM should not return a very high borrow rate (otherwise the computation of `interest` in\\n    /// `_accrueInterest` can overflow).\\n    /// - The oracle should not revert `price`.\\n    /// - The oracle should not return a very high price (otherwise the computation of `maxBorrow` in `_isHealthy` or of\\n    /// `assetsRepaid` in `liquidate` can overflow).\\n    /// @dev The borrow share price of a market with less than 1e4 assets borrowed can be decreased by manipulations, to\\n    /// the point where `totalBorrowShares` is very large and borrowing overflows.\\n    function createMarket(MarketParams memory marketParams) external;\\n\\n    /// @notice Supplies `assets` or `shares` on behalf of `onBehalf`, optionally calling back the caller's\\n    /// `onMorphoSupply` function with the given `data`.\\n    /// @dev Either `assets` or `shares` should be zero. Most use cases should rely on `assets` as an input so the\\n    /// caller is guaranteed to have `assets` tokens pulled from their balance, but the possibility to mint a specific\\n    /// amount of shares is given for full compatibility and precision.\\n    /// @dev Supplying a large amount can revert for overflow.\\n    /// @dev Supplying an amount of shares may lead to supply more or fewer assets than expected due to slippage.\\n    /// Consider using the `assets` parameter to avoid this.\\n    /// @param marketParams The market to supply assets to.\\n    /// @param assets The amount of assets to supply.\\n    /// @param shares The amount of shares to mint.\\n    /// @param onBehalf The address that will own the increased supply position.\\n    /// @param data Arbitrary data to pass to the `onMorphoSupply` callback. Pass empty data if not needed.\\n    /// @return assetsSupplied The amount of assets supplied.\\n    /// @return sharesSupplied The amount of shares minted.\\n    function supply(\\n        MarketParams memory marketParams,\\n        uint256 assets,\\n        uint256 shares,\\n        address onBehalf,\\n        bytes memory data\\n    ) external returns (uint256 assetsSupplied, uint256 sharesSupplied);\\n\\n    /// @notice Withdraws `assets` or `shares` on behalf of `onBehalf` and sends the assets to `receiver`.\\n    /// @dev Either `assets` or `shares` should be zero. To withdraw max, pass the `shares`'s balance of `onBehalf`.\\n    /// @dev `msg.sender` must be authorized to manage `onBehalf`'s positions.\\n    /// @dev Withdrawing an amount corresponding to more shares than supplied will revert for underflow.\\n    /// @dev It is advised to use the `shares` input when withdrawing the full position to avoid reverts due to\\n    /// conversion roundings between shares and assets.\\n    /// @param marketParams The market to withdraw assets from.\\n    /// @param assets The amount of assets to withdraw.\\n    /// @param shares The amount of shares to burn.\\n    /// @param onBehalf The address of the owner of the supply position.\\n    /// @param receiver The address that will receive the withdrawn assets.\\n    /// @return assetsWithdrawn The amount of assets withdrawn.\\n    /// @return sharesWithdrawn The amount of shares burned.\\n    function withdraw(\\n        MarketParams memory marketParams,\\n        uint256 assets,\\n        uint256 shares,\\n        address onBehalf,\\n        address receiver\\n    ) external returns (uint256 assetsWithdrawn, uint256 sharesWithdrawn);\\n\\n    /// @notice Borrows `assets` or `shares` on behalf of `onBehalf` and sends the assets to `receiver`.\\n    /// @dev Either `assets` or `shares` should be zero. Most use cases should rely on `assets` as an input so the\\n    /// caller is guaranteed to borrow `assets` of tokens, but the possibility to mint a specific amount of shares is\\n    /// given for full compatibility and precision.\\n    /// @dev `msg.sender` must be authorized to manage `onBehalf`'s positions.\\n    /// @dev Borrowing a large amount can revert for overflow.\\n    /// @dev Borrowing an amount of shares may lead to borrow fewer assets than expected due to slippage.\\n    /// Consider using the `assets` parameter to avoid this.\\n    /// @param marketParams The market to borrow assets from.\\n    /// @param assets The amount of assets to borrow.\\n    /// @param shares The amount of shares to mint.\\n    /// @param onBehalf The address that will own the increased borrow position.\\n    /// @param receiver The address that will receive the borrowed assets.\\n    /// @return assetsBorrowed The amount of assets borrowed.\\n    /// @return sharesBorrowed The amount of shares minted.\\n    function borrow(\\n        MarketParams memory marketParams,\\n        uint256 assets,\\n        uint256 shares,\\n        address onBehalf,\\n        address receiver\\n    ) external returns (uint256 assetsBorrowed, uint256 sharesBorrowed);\\n\\n    /// @notice Repays `assets` or `shares` on behalf of `onBehalf`, optionally calling back the caller's\\n    /// `onMorphoRepay` function with the given `data`.\\n    /// @dev Either `assets` or `shares` should be zero. To repay max, pass the `shares`'s balance of `onBehalf`.\\n    /// @dev Repaying an amount corresponding to more shares than borrowed will revert for underflow.\\n    /// @dev It is advised to use the `shares` input when repaying the full position to avoid reverts due to conversion\\n    /// roundings between shares and assets.\\n    /// @dev An attacker can front-run a repay with a small repay making the transaction revert for underflow.\\n    /// @param marketParams The market to repay assets to.\\n    /// @param assets The amount of assets to repay.\\n    /// @param shares The amount of shares to burn.\\n    /// @param onBehalf The address of the owner of the debt position.\\n    /// @param data Arbitrary data to pass to the `onMorphoRepay` callback. Pass empty data if not needed.\\n    /// @return assetsRepaid The amount of assets repaid.\\n    /// @return sharesRepaid The amount of shares burned.\\n    function repay(\\n        MarketParams memory marketParams,\\n        uint256 assets,\\n        uint256 shares,\\n        address onBehalf,\\n        bytes memory data\\n    ) external returns (uint256 assetsRepaid, uint256 sharesRepaid);\\n\\n    /// @notice Supplies `assets` of collateral on behalf of `onBehalf`, optionally calling back the caller's\\n    /// `onMorphoSupplyCollateral` function with the given `data`.\\n    /// @dev Interest are not accrued since it's not required and it saves gas.\\n    /// @dev Supplying a large amount can revert for overflow.\\n    /// @param marketParams The market to supply collateral to.\\n    /// @param assets The amount of collateral to supply.\\n    /// @param onBehalf The address that will own the increased collateral position.\\n    /// @param data Arbitrary data to pass to the `onMorphoSupplyCollateral` callback. Pass empty data if not needed.\\n    function supplyCollateral(MarketParams memory marketParams, uint256 assets, address onBehalf, bytes memory data)\\n        external;\\n\\n    /// @notice Withdraws `assets` of collateral on behalf of `onBehalf` and sends the assets to `receiver`.\\n    /// @dev `msg.sender` must be authorized to manage `onBehalf`'s positions.\\n    /// @dev Withdrawing an amount corresponding to more collateral than supplied will revert for underflow.\\n    /// @param marketParams The market to withdraw collateral from.\\n    /// @param assets The amount of collateral to withdraw.\\n    /// @param onBehalf The address of the owner of the collateral position.\\n    /// @param receiver The address that will receive the collateral assets.\\n    function withdrawCollateral(MarketParams memory marketParams, uint256 assets, address onBehalf, address receiver)\\n        external;\\n\\n    /// @notice Liquidates the given `repaidShares` of debt asset or seize the given `seizedAssets` of collateral on the\\n    /// given market `marketParams` of the given `borrower`'s position, optionally calling back the caller's\\n    /// `onMorphoLiquidate` function with the given `data`.\\n    /// @dev Either `seizedAssets` or `repaidShares` should be zero.\\n    /// @dev Seizing more than the collateral balance will underflow and revert without any error message.\\n    /// @dev Repaying more than the borrow balance will underflow and revert without any error message.\\n    /// @dev An attacker can front-run a liquidation with a small repay making the transaction revert for underflow.\\n    /// @param marketParams The market of the position.\\n    /// @param borrower The owner of the position.\\n    /// @param seizedAssets The amount of collateral to seize.\\n    /// @param repaidShares The amount of shares to repay.\\n    /// @param data Arbitrary data to pass to the `onMorphoLiquidate` callback. Pass empty data if not needed.\\n    /// @return The amount of assets seized.\\n    /// @return The amount of assets repaid.\\n    function liquidate(\\n        MarketParams memory marketParams,\\n        address borrower,\\n        uint256 seizedAssets,\\n        uint256 repaidShares,\\n        bytes memory data\\n    ) external returns (uint256, uint256);\\n\\n    /// @notice Executes a flash loan.\\n    /// @dev Flash loans have access to the whole balance of the contract (the liquidity and deposited collateral of all\\n    /// markets combined, plus donations).\\n    /// @dev Warning: Not ERC-3156 compliant but compatibility is easily reached:\\n    /// - `flashFee` is zero.\\n    /// - `maxFlashLoan` is the token's balance of this contract.\\n    /// - The receiver of `assets` is the caller.\\n    /// @param token The token to flash loan.\\n    /// @param assets The amount of assets to flash loan.\\n    /// @param data Arbitrary data to pass to the `onMorphoFlashLoan` callback.\\n    function flashLoan(address token, uint256 assets, bytes calldata data) external;\\n\\n    /// @notice Sets the authorization for `authorized` to manage `msg.sender`'s positions.\\n    /// @param authorized The authorized address.\\n    /// @param newIsAuthorized The new authorization status.\\n    function setAuthorization(address authorized, bool newIsAuthorized) external;\\n\\n    /// @notice Sets the authorization for `authorization.authorized` to manage `authorization.authorizer`'s positions.\\n    /// @dev Warning: Reverts if the signature has already been submitted.\\n    /// @dev The signature is malleable, but it has no impact on the security here.\\n    /// @dev The nonce is passed as argument to be able to revert with a different error message.\\n    /// @param authorization The `Authorization` struct.\\n    /// @param signature The signature.\\n    function setAuthorizationWithSig(Authorization calldata authorization, Signature calldata signature) external;\\n\\n    /// @notice Accrues interest for the given market `marketParams`.\\n    function accrueInterest(MarketParams memory marketParams) external;\\n\\n    /// @notice Returns the data stored on the different `slots`.\\n    function extSloads(bytes32[] memory slots) external view returns (bytes32[] memory);\\n}\\n\\n/// @dev This interface is inherited by Morpho so that function signatures are checked by the compiler.\\n/// @dev Consider using the IMorpho interface instead of this one.\\ninterface IMorphoStaticTyping is IMorphoBase {\\n    /// @notice The state of the position of `user` on the market corresponding to `id`.\\n    /// @dev Warning: For `feeRecipient`, `supplyShares` does not contain the accrued shares since the last interest\\n    /// accrual.\\n    function position(Id id, address user)\\n        external\\n        view\\n        returns (uint256 supplyShares, uint128 borrowShares, uint128 collateral);\\n\\n    /// @notice The state of the market corresponding to `id`.\\n    /// @dev Warning: `totalSupplyAssets` does not contain the accrued interest since the last interest accrual.\\n    /// @dev Warning: `totalBorrowAssets` does not contain the accrued interest since the last interest accrual.\\n    /// @dev Warning: `totalSupplyShares` does not contain the accrued shares by `feeRecipient` since the last interest\\n    /// accrual.\\n    function market(Id id)\\n        external\\n        view\\n        returns (\\n            uint128 totalSupplyAssets,\\n            uint128 totalSupplyShares,\\n            uint128 totalBorrowAssets,\\n            uint128 totalBorrowShares,\\n            uint128 lastUpdate,\\n            uint128 fee\\n        );\\n\\n    /// @notice The market params corresponding to `id`.\\n    /// @dev This mapping is not used in Morpho. It is there to enable reducing the cost associated to calldata on layer\\n    /// 2s by creating a wrapper contract with functions that take `id` as input instead of `marketParams`.\\n    function idToMarketParams(Id id)\\n        external\\n        view\\n        returns (address loanToken, address collateralToken, address oracle, address irm, uint256 lltv);\\n}\\n\\n/// @title IMorpho\\n/// @author Morpho Labs\\n/// @custom:contact security@morpho.org\\n/// @dev Use this interface for Morpho to have access to all the functions with the appropriate function signatures.\\ninterface IMorpho is IMorphoBase {\\n    /// @notice The state of the position of `user` on the market corresponding to `id`.\\n    /// @dev Warning: For `feeRecipient`, `p.supplyShares` does not contain the accrued shares since the last interest\\n    /// accrual.\\n    function position(Id id, address user) external view returns (Position memory p);\\n\\n    /// @notice The state of the market corresponding to `id`.\\n    /// @dev Warning: `m.totalSupplyAssets` does not contain the accrued interest since the last interest accrual.\\n    /// @dev Warning: `m.totalBorrowAssets` does not contain the accrued interest since the last interest accrual.\\n    /// @dev Warning: `m.totalSupplyShares` does not contain the accrued shares by `feeRecipient` since the last\\n    /// interest accrual.\\n    function market(Id id) external view returns (Market memory m);\\n\\n    /// @notice The market params corresponding to `id`.\\n    /// @dev This mapping is not used in Morpho. It is there to enable reducing the cost associated to calldata on layer\\n    /// 2s by creating a wrapper contract with functions that take `id` as input instead of `marketParams`.\\n    function idToMarketParams(Id id) external view returns (MarketParams memory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IMorphoCallbacks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title IMorphoLiquidateCallback\\n/// @notice Interface that liquidators willing to use `liquidate`'s callback must implement.\\ninterface IMorphoLiquidateCallback {\\n    /// @notice Callback called when a liquidation occurs.\\n    /// @dev The callback is called only if data is not empty.\\n    /// @param repaidAssets The amount of repaid assets.\\n    /// @param data Arbitrary data passed to the `liquidate` function.\\n    function onMorphoLiquidate(uint256 repaidAssets, bytes calldata data) external;\\n}\\n\\n/// @title IMorphoRepayCallback\\n/// @notice Interface that users willing to use `repay`'s callback must implement.\\ninterface IMorphoRepayCallback {\\n    /// @notice Callback called when a repayment occurs.\\n    /// @dev The callback is called only if data is not empty.\\n    /// @param assets The amount of repaid assets.\\n    /// @param data Arbitrary data passed to the `repay` function.\\n    function onMorphoRepay(uint256 assets, bytes calldata data) external;\\n}\\n\\n/// @title IMorphoSupplyCallback\\n/// @notice Interface that users willing to use `supply`'s callback must implement.\\ninterface IMorphoSupplyCallback {\\n    /// @notice Callback called when a supply occurs.\\n    /// @dev The callback is called only if data is not empty.\\n    /// @param assets The amount of supplied assets.\\n    /// @param data Arbitrary data passed to the `supply` function.\\n    function onMorphoSupply(uint256 assets, bytes calldata data) external;\\n}\\n\\n/// @title IMorphoSupplyCollateralCallback\\n/// @notice Interface that users willing to use `supplyCollateral`'s callback must implement.\\ninterface IMorphoSupplyCollateralCallback {\\n    /// @notice Callback called when a supply of collateral occurs.\\n    /// @dev The callback is called only if data is not empty.\\n    /// @param assets The amount of supplied collateral.\\n    /// @param data Arbitrary data passed to the `supplyCollateral` function.\\n    function onMorphoSupplyCollateral(uint256 assets, bytes calldata data) external;\\n}\\n\\n/// @title IMorphoFlashLoanCallback\\n/// @notice Interface that users willing to use `flashLoan`'s callback must implement.\\ninterface IMorphoFlashLoanCallback {\\n    /// @notice Callback called when a flash loan occurs.\\n    /// @dev The callback is called only if data is not empty.\\n    /// @param assets The amount of assets that was flash loaned.\\n    /// @param data Arbitrary data passed to the `flashLoan` function.\\n    function onMorphoFlashLoan(uint256 assets, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IIrm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport {MarketParams, Market} from \\\"./IMorpho.sol\\\";\\n\\n/// @title IIrm\\n/// @author Morpho Labs\\n/// @custom:contact security@morpho.org\\n/// @notice Interface that Interest Rate Models (IRMs) used by Morpho must implement.\\ninterface IIrm {\\n    /// @notice Returns the borrow rate per second (scaled by WAD) of the market `marketParams`.\\n    /// @dev Assumes that `market` corresponds to `marketParams`.\\n    function borrowRate(MarketParams memory marketParams, Market memory market) external returns (uint256);\\n\\n    /// @notice Returns the borrow rate per second (scaled by WAD) of the market `marketParams` without modifying any\\n    /// storage.\\n    /// @dev Assumes that `market` corresponds to `marketParams`.\\n    function borrowRateView(MarketParams memory marketParams, Market memory market) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title IERC20\\n/// @author Morpho Labs\\n/// @custom:contact security@morpho.org\\n/// @dev Empty because we only call library functions. It prevents calling transfer (transferFrom) instead of\\n/// safeTransfer (safeTransferFrom).\\ninterface IERC20 {}\\n\"\r\n    },\r\n    \"src/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title IOracle\\n/// @author Morpho Labs\\n/// @custom:contact security@morpho.org\\n/// @notice Interface that oracles used by Morpho must implement.\\n/// @dev It is the user's responsibility to select markets with safe oracles.\\ninterface IOracle {\\n    /// @notice Returns the price of 1 asset of collateral token quoted in 1 asset of loan token, scaled by 1e36.\\n    /// @dev It corresponds to the price of 10**(collateral token decimals) assets of collateral token quoted in\\n    /// 10**(loan token decimals) assets of loan token with `36 + loan token decimals - collateral token decimals`\\n    /// decimals of precision.\\n    function price() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/libraries/ConstantsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @dev The maximum fee a market can have (25%).\\nuint256 constant MAX_FEE = 0.25e18;\\n\\n/// @dev Oracle price scale.\\nuint256 constant ORACLE_PRICE_SCALE = 1e36;\\n\\n/// @dev Liquidation cursor.\\nuint256 constant LIQUIDATION_CURSOR = 0.3e18;\\n\\n/// @dev Max liquidation incentive factor.\\nuint256 constant MAX_LIQUIDATION_INCENTIVE_FACTOR = 1.15e18;\\n\\n/// @dev The EIP-712 typeHash for EIP712Domain.\\nbytes32 constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\");\\n\\n/// @dev The EIP-712 typeHash for Authorization.\\nbytes32 constant AUTHORIZATION_TYPEHASH =\\n    keccak256(\\\"Authorization(address authorizer,address authorized,bool isAuthorized,uint256 nonce,uint256 deadline)\\\");\\n\"\r\n    },\r\n    \"src/libraries/UtilsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {ErrorsLib} from \\\"../libraries/ErrorsLib.sol\\\";\\n\\n/// @title UtilsLib\\n/// @author Morpho Labs\\n/// @custom:contact security@morpho.org\\n/// @notice Library exposing helpers.\\n/// @dev Inspired by https://github.com/morpho-org/morpho-utils.\\nlibrary UtilsLib {\\n    /// @dev Returns true if there is exactly one zero among `x` and `y`.\\n    function exactlyOneZero(uint256 x, uint256 y) internal pure returns (bool z) {\\n        assembly {\\n            z := xor(iszero(x), iszero(y))\\n        }\\n    }\\n\\n    /// @dev Returns the min of `x` and `y`.\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := xor(x, mul(xor(x, y), lt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns `x` safely cast to uint128.\\n    function toUint128(uint256 x) internal pure returns (uint128) {\\n        require(x <= type(uint128).max, ErrorsLib.MAX_UINT128_EXCEEDED);\\n        return uint128(x);\\n    }\\n\\n    /// @dev Returns max(0, x - y).\\n    function zeroFloorSub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := mul(gt(x, y), sub(x, y))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/EventsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {Id, MarketParams} from \\\"../interfaces/IMorpho.sol\\\";\\n\\n/// @title EventsLib\\n/// @author Morpho Labs\\n/// @custom:contact security@morpho.org\\n/// @notice Library exposing events.\\nlibrary EventsLib {\\n    /// @notice Emitted when setting a new owner.\\n    /// @param newOwner The new owner of the contract.\\n    event SetOwner(address indexed newOwner);\\n\\n    /// @notice Emitted when setting a new fee.\\n    /// @param id The market id.\\n    /// @param newFee The new fee.\\n    event SetFee(Id indexed id, uint256 newFee);\\n\\n    /// @notice Emitted when setting a new fee recipient.\\n    /// @param newFeeRecipient The new fee recipient.\\n    event SetFeeRecipient(address indexed newFeeRecipient);\\n\\n    /// @notice Emitted when enabling an IRM.\\n    /// @param irm The IRM that was enabled.\\n    event EnableIrm(address indexed irm);\\n\\n    /// @notice Emitted when enabling an LLTV.\\n    /// @param lltv The LLTV that was enabled.\\n    event EnableLltv(uint256 lltv);\\n\\n    /// @notice Emitted when creating a market.\\n    /// @param id The market id.\\n    /// @param marketParams The market that was created.\\n    event CreateMarket(Id indexed id, MarketParams marketParams);\\n\\n    /// @notice Emitted on supply of assets.\\n    /// @dev Warning: `feeRecipient` receives some shares during interest accrual without any supply event emitted.\\n    /// @param id The market id.\\n    /// @param caller The caller.\\n    /// @param onBehalf The owner of the modified position.\\n    /// @param assets The amount of assets supplied.\\n    /// @param shares The amount of shares minted.\\n    event Supply(Id indexed id, address indexed caller, address indexed onBehalf, uint256 assets, uint256 shares);\\n\\n    /// @notice Emitted on withdrawal of assets.\\n    /// @param id The market id.\\n    /// @param caller The caller.\\n    /// @param onBehalf The owner of the modified position.\\n    /// @param receiver The address that received the withdrawn assets.\\n    /// @param assets The amount of assets withdrawn.\\n    /// @param shares The amount of shares burned.\\n    event Withdraw(\\n        Id indexed id,\\n        address caller,\\n        address indexed onBehalf,\\n        address indexed receiver,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /// @notice Emitted on borrow of assets.\\n    /// @param id The market id.\\n    /// @param caller The caller.\\n    /// @param onBehalf The owner of the modified position.\\n    /// @param receiver The address that received the borrowed assets.\\n    /// @param assets The amount of assets borrowed.\\n    /// @param shares The amount of shares minted.\\n    event Borrow(\\n        Id indexed id,\\n        address caller,\\n        address indexed onBehalf,\\n        address indexed receiver,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /// @notice Emitted on repayment of assets.\\n    /// @param id The market id.\\n    /// @param caller The caller.\\n    /// @param onBehalf The owner of the modified position.\\n    /// @param assets The amount of assets repaid. May be 1 over the corresponding market's `totalBorrowAssets`.\\n    /// @param shares The amount of shares burned.\\n    event Repay(Id indexed id, address indexed caller, address indexed onBehalf, uint256 assets, uint256 shares);\\n\\n    /// @notice Emitted on supply of collateral.\\n    /// @param id The market id.\\n    /// @param caller The caller.\\n    /// @param onBehalf The owner of the modified position.\\n    /// @param assets The amount of collateral supplied.\\n    event SupplyCollateral(Id indexed id, address indexed caller, address indexed onBehalf, uint256 assets);\\n\\n    /// @notice Emitted on withdrawal of collateral.\\n    /// @param id The market id.\\n    /// @param caller The caller.\\n    /// @param onBehalf The owner of the modified position.\\n    /// @param receiver The address that received the withdrawn collateral.\\n    /// @param assets The amount of collateral withdrawn.\\n    event WithdrawCollateral(\\n        Id indexed id, address caller, address indexed onBehalf, address indexed receiver, uint256 assets\\n    );\\n\\n    /// @notice Emitted on liquidation of a position.\\n    /// @param id The market id.\\n    /// @param caller The caller.\\n    /// @param borrower The borrower of the position.\\n    /// @param repaidAssets The amount of assets repaid. May be 1 over the corresponding market's `totalBorrowAssets`.\\n    /// @param repaidShares The amount of shares burned.\\n    /// @param seizedAssets The amount of collateral seized.\\n    /// @param badDebtAssets The amount of assets of bad debt realized.\\n    /// @param badDebtShares The amount of borrow shares of bad debt realized.\\n    event Liquidate(\\n        Id indexed id,\\n        address indexed caller,\\n        address indexed borrower,\\n        uint256 repaidAssets,\\n        uint256 repaidShares,\\n        uint256 seizedAssets,\\n        uint256 badDebtAssets,\\n        uint256 badDebtShares\\n    );\\n\\n    /// @notice Emitted on flash loan.\\n    /// @param caller The caller.\\n    /// @param token The token that was flash loaned.\\n    /// @param assets The amount that was flash loaned.\\n    event FlashLoan(address indexed caller, address indexed token, uint256 assets);\\n\\n    /// @notice Emitted when setting an authorization.\\n    /// @param caller The caller.\\n    /// @param authorizer The authorizer address.\\n    /// @param authorized The authorized address.\\n    /// @param newIsAuthorized The new authorization status.\\n    event SetAuthorization(\\n        address indexed caller, address indexed authorizer, address indexed authorized, bool newIsAuthorized\\n    );\\n\\n    /// @notice Emitted when setting an authorization with a signature.\\n    /// @param caller The caller.\\n    /// @param authorizer The authorizer address.\\n    /// @param usedNonce The nonce that was used.\\n    event IncrementNonce(address indexed caller, address indexed authorizer, uint256 usedNonce);\\n\\n    /// @notice Emitted when accruing interest.\\n    /// @param id The market id.\\n    /// @param prevBorrowRate The previous borrow rate.\\n    /// @param interest The amount of interest accrued.\\n    /// @param feeShares The amount of shares minted as fee.\\n    event AccrueInterest(Id indexed id, uint256 prevBorrowRate, uint256 interest, uint256 feeShares);\\n}\\n\"\r\n    },\r\n    \"src/libraries/ErrorsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title ErrorsLib\\n/// @author Morpho Labs\\n/// @custom:contact security@morpho.org\\n/// @notice Library exposing error messages.\\nlibrary ErrorsLib {\\n    /// @notice Thrown when the caller is not the owner.\\n    string internal constant NOT_OWNER = \\\"not owner\\\";\\n\\n    /// @notice Thrown when the LLTV to enable exceeds the maximum LLTV.\\n    string internal constant MAX_LLTV_EXCEEDED = \\\"max LLTV exceeded\\\";\\n\\n    /// @notice Thrown when the fee to set exceeds the maximum fee.\\n    string internal constant MAX_FEE_EXCEEDED = \\\"max fee exceeded\\\";\\n\\n    /// @notice Thrown when the value is already set.\\n    string internal constant ALREADY_SET = \\\"already set\\\";\\n\\n    /// @notice Thrown when the IRM is not enabled at market creation.\\n    string internal constant IRM_NOT_ENABLED = \\\"IRM not enabled\\\";\\n\\n    /// @notice Thrown when the LLTV is not enabled at market creation.\\n    string internal constant LLTV_NOT_ENABLED = \\\"LLTV not enabled\\\";\\n\\n    /// @notice Thrown when the market is already created.\\n    string internal constant MARKET_ALREADY_CREATED = \\\"market already created\\\";\\n\\n    /// @notice Thrown when a token to transfer doesn't have code.\\n    string internal constant NO_CODE = \\\"no code\\\";\\n\\n    /// @notice Thrown when the market is not created.\\n    string internal constant MARKET_NOT_CREATED = \\\"market not created\\\";\\n\\n    /// @notice Thrown when not exactly one of the input amount is zero.\\n    string internal constant INCONSISTENT_INPUT = \\\"inconsistent input\\\";\\n\\n    /// @notice Thrown when zero assets is passed as input.\\n    string internal constant ZERO_ASSETS = \\\"zero assets\\\";\\n\\n    /// @notice Thrown when a zero address is passed as input.\\n    string internal constant ZERO_ADDRESS = \\\"zero address\\\";\\n\\n    /// @notice Thrown when the caller is not authorized to conduct an action.\\n    string internal constant UNAUTHORIZED = \\\"unauthorized\\\";\\n\\n    /// @notice Thrown when the collateral is insufficient to `borrow` or `withdrawCollateral`.\\n    string internal constant INSUFFICIENT_COLLATERAL = \\\"insufficient collateral\\\";\\n\\n    /// @notice Thrown when the liquidity is insufficient to `withdraw` or `borrow`.\\n    string internal constant INSUFFICIENT_LIQUIDITY = \\\"insufficient liquidity\\\";\\n\\n    /// @notice Thrown when the position to liquidate is healthy.\\n    string internal constant HEALTHY_POSITION = \\\"position is healthy\\\";\\n\\n    /// @notice Thrown when the authorization signature is invalid.\\n    string internal constant INVALID_SIGNATURE = \\\"invalid signature\\\";\\n\\n    /// @notice Thrown when the authorization signature is expired.\\n    string internal constant SIGNATURE_EXPIRED = \\\"signature expired\\\";\\n\\n    /// @notice Thrown when the nonce is invalid.\\n    string internal constant INVALID_NONCE = \\\"invalid nonce\\\";\\n\\n    /// @notice Thrown when a token transfer reverted.\\n    string internal constant TRANSFER_REVERTED = \\\"transfer reverted\\\";\\n\\n    /// @notice Thrown when a token transfer returned false.\\n    string internal constant TRANSFER_RETURNED_FALSE = \\\"transfer returned false\\\";\\n\\n    /// @notice Thrown when a token transferFrom reverted.\\n    string internal constant TRANSFER_FROM_REVERTED = \\\"transferFrom reverted\\\";\\n\\n    /// @notice Thrown when a token transferFrom returned false\\n    string internal constant TRANSFER_FROM_RETURNED_FALSE = \\\"transferFrom returned false\\\";\\n\\n    /// @notice Thrown when the maximum uint128 is exceeded.\\n    string internal constant MAX_UINT128_EXCEEDED = \\\"max uint128 exceeded\\\";\\n}\\n\"\r\n    },\r\n    \"src/libraries/MathLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nuint256 constant WAD = 1e18;\\n\\n/// @title MathLib\\n/// @author Morpho Labs\\n/// @custom:contact security@morpho.org\\n/// @notice Library to manage fixed-point arithmetic.\\nlibrary MathLib {\\n    /// @dev Returns (`x` * `y`) / `WAD` rounded down.\\n    function wMulDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD);\\n    }\\n\\n    /// @dev Returns (`x` * `WAD`) / `y` rounded down.\\n    function wDivDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y);\\n    }\\n\\n    /// @dev Returns (`x` * `WAD`) / `y` rounded up.\\n    function wDivUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y);\\n    }\\n\\n    /// @dev Returns (`x` * `y`) / `d` rounded down.\\n    function mulDivDown(uint256 x, uint256 y, uint256 d) internal pure returns (uint256) {\\n        return (x * y) / d;\\n    }\\n\\n    /// @dev Returns (`x` * `y`) / `d` rounded up.\\n    function mulDivUp(uint256 x, uint256 y, uint256 d) internal pure returns (uint256) {\\n        return (x * y + (d - 1)) / d;\\n    }\\n\\n    /// @dev Returns the sum of the first three non-zero terms of a Taylor expansion of e^(nx) - 1, to approximate a\\n    /// continuous compound interest rate.\\n    function wTaylorCompounded(uint256 x, uint256 n) internal pure returns (uint256) {\\n        uint256 firstTerm = x * n;\\n        uint256 secondTerm = mulDivDown(firstTerm, firstTerm, 2 * WAD);\\n        uint256 thirdTerm = mulDivDown(secondTerm, firstTerm, 3 * WAD);\\n\\n        return firstTerm + secondTerm + thirdTerm;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/SharesMathLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {MathLib} from \\\"./MathLib.sol\\\";\\n\\n/// @title SharesMathLib\\n/// @author Morpho Labs\\n/// @custom:contact security@morpho.org\\n/// @notice Shares management library.\\n/// @dev This implementation mitigates share price manipulations, using OpenZeppelin's method of virtual shares:\\n/// https://docs.openzeppelin.com/contracts/4.x/erc4626#inflation-attack.\\nlibrary SharesMathLib {\\n    using MathLib for uint256;\\n\\n    /// @dev The number of virtual shares has been chosen low enough to prevent overflows, and high enough to ensure\\n    /// high precision computations.\\n    /// @dev Virtual shares can never be redeemed for the assets they are entitled to, but it is assumed the share price\\n    /// stays low enough not to inflate these assets to a significant value.\\n    /// @dev Warning: The assets to which virtual borrow shares are entitled behave like unrealizable bad debt.\\n    uint256 internal constant VIRTUAL_SHARES = 1e6;\\n\\n    /// @dev A number of virtual assets of 1 enforces a conversion rate between shares and assets when a market is\\n    /// empty.\\n    uint256 internal constant VIRTUAL_ASSETS = 1;\\n\\n    /// @dev Calculates the value of `assets` quoted in shares, rounding down.\\n    function toSharesDown(uint256 assets, uint256 totalAssets, uint256 totalShares) internal pure returns (uint256) {\\n        return assets.mulDivDown(totalShares + VIRTUAL_SHARES, totalAssets + VIRTUAL_ASSETS);\\n    }\\n\\n    /// @dev Calculates the value of `shares` quoted in assets, rounding down.\\n    function toAssetsDown(uint256 shares, uint256 totalAssets, uint256 totalShares) internal pure returns (uint256) {\\n        return shares.mulDivDown(totalAssets + VIRTUAL_ASSETS, totalShares + VIRTUAL_SHARES);\\n    }\\n\\n    /// @dev Calculates the value of `assets` quoted in shares, rounding up.\\n    function toSharesUp(uint256 assets, uint256 totalAssets, uint256 totalShares) internal pure returns (uint256) {\\n        return assets.mulDivUp(totalShares + VIRTUAL_SHARES, totalAssets + VIRTUAL_ASSETS);\\n    }\\n\\n    /// @dev Calculates the value of `shares` quoted in assets, rounding up.\\n    function toAssetsUp(uint256 shares, uint256 totalAssets, uint256 totalShares) internal pure returns (uint256) {\\n        return shares.mulDivUp(totalAssets + VIRTUAL_ASSETS, totalShares + VIRTUAL_SHARES);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/MarketParamsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {Id, MarketParams} from \\\"../interfaces/IMorpho.sol\\\";\\n\\n/// @title MarketParamsLib\\n/// @author Morpho Labs\\n/// @custom:contact security@morpho.org\\n/// @notice Library to convert a market to its id.\\nlibrary MarketParamsLib {\\n    /// @notice The length of the data used to compute the id of a market.\\n    /// @dev The length is 5 * 32 because `MarketParams` has 5 variables of 32 bytes each.\\n    uint256 internal constant MARKET_PARAMS_BYTES_LENGTH = 5 * 32;\\n\\n    /// @notice Returns the id of the market `marketParams`.\\n    function id(MarketParams memory marketParams) internal pure returns (Id marketParamsId) {\\n        assembly (\\\"memory-safe\\\") {\\n            marketParamsId := keccak256(marketParams, MARKET_PARAMS_BYTES_LENGTH)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\nimport {ErrorsLib} from \\\"../libraries/ErrorsLib.sol\\\";\\n\\ninterface IERC20Internal {\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\\n/// @title SafeTransferLib\\n/// @author Morpho Labs\\n/// @custom:contact security@morpho.org\\n/// @notice Library to manage transfers of tokens, even if calls to the transfer or transferFrom functions are not\\n/// returning a boolean.\\nlibrary SafeTransferLib {\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        require(address(token).code.length > 0, ErrorsLib.NO_CODE);\\n\\n        (bool success, bytes memory returndata) =\\n            address(token).call(abi.encodeCall(IERC20Internal.transfer, (to, value)));\\n        require(success, ErrorsLib.TRANSFER_REVERTED);\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), ErrorsLib.TRANSFER_RETURNED_FALSE);\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        require(address(token).code.length > 0, ErrorsLib.NO_CODE);\\n\\n        (bool success, bytes memory returndata) =\\n            address(token).call(abi.encodeCall(IERC20Internal.transferFrom, (from, to, value)));\\n        require(success, ErrorsLib.TRANSFER_FROM_REVERTED);\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), ErrorsLib.TRANSFER_FROM_RETURNED_FALSE);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"halmos-cheatcodes/=lib/halmos-cheatcodes/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}",
      "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"irm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lltv\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketParams\",\"name\":\"marketParams\",\"type\":\"tuple\"}],\"name\":\"accrueInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"irm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lltv\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketParams\",\"name\":\"marketParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"irm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lltv\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketParams\",\"name\":\"marketParams\",\"type\":\"tuple\"}],\"name\":\"createMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"irm\",\"type\":\"address\"}],\"name\":\"enableIrm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lltv\",\"type\":\"uint256\"}],\"name\":\"enableLltv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"slots\",\"type\":\"bytes32[]\"}],\"name\":\"extSloads\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"res\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Id\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"idToMarketParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"irm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lltv\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isIrmEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isLltvEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"irm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lltv\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketParams\",\"name\":\"marketParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizedAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaidShares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Id\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"market\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"totalSupplyAssets\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalSupplyShares\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalBorrowAssets\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalBorrowShares\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastUpdate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Id\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"position\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supplyShares\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"borrowShares\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"collateral\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"irm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lltv\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketParams\",\"name\":\"marketParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalf\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorized\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newIsAuthorized\",\"type\":\"bool\"}],\"name\":\"setAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorized\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAuthorized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct Authorization\",\"name\":\"authorization\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"setAuthorizationWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"irm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lltv\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketParams\",\"name\":\"marketParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"irm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lltv\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketParams\",\"name\":\"marketParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalf\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"irm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lltv\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketParams\",\"name\":\"marketParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalf\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"supplyCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"irm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lltv\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketParams\",\"name\":\"marketParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"irm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lltv\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketParams\",\"name\":\"marketParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "contract_name": "Morpho",
      "compiler_version": "v0.8.19+commit.7dd6d404",
      "optimization_used": "1",
      "runs": "999999",
      "constructor_arguments": "000000000000000000000000937ce2d6c488b361825d2db5e8a70e26d48afed5",
      "evm_version": "paris",
      "library": "",
      "license_type": "",
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0x0ee7145e1370653533e2f2e824424be2aa95a4aa": {
      "address": "0x0ee7145e1370653533e2f2e824424be2aa95a4aa",
      "has_source_code": true,
      "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contract/AccessControlledOffchainAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./OffchainAggregator.sol\\\";\\nimport \\\"./SimpleReadAccessController.sol\\\";\\n\\n/**\\n * @notice Wrapper of OffchainAggregator which checks read access on Aggregator-interface methods\\n */\\ncontract AccessControlledOffchainAggregator is OffchainAggregator, SimpleReadAccessController {\\n\\n  constructor(\\n    uint32 _maximumGasPrice,\\n    uint32 _reasonableGasPrice,\\n    uint32 _microLinkPerEth,\\n    uint32 _linkGweiPerObservation,\\n    uint32 _linkGweiPerTransmission,\\n    LinkTokenInterface _link,\\n    int192 _minAnswer,\\n    int192 _maxAnswer,\\n    AccessControllerInterface _billingAccessController,\\n    AccessControllerInterface _requesterAccessController,\\n    uint8 _decimals,\\n    string memory description\\n  )\\n    OffchainAggregator(\\n      _maximumGasPrice,\\n      _reasonableGasPrice,\\n      _microLinkPerEth,\\n      _linkGweiPerObservation,\\n      _linkGweiPerTransmission,\\n      _link,\\n      _minAnswer,\\n      _maxAnswer,\\n      _billingAccessController,\\n      _requesterAccessController,\\n      _decimals,\\n      description\\n    ) {\\n    }\\n\\n  /*\\n   * Versioning\\n   */\\n\\n  function typeAndVersion()\\n    external\\n    override\\n    pure\\n    virtual\\n    returns (string memory)\\n  {\\n    return \\\"AccessControlledOffchainAggregator 4.0.0\\\";\\n  }\\n\\n\\n  /*\\n   * v2 Aggregator interface\\n   */\\n\\n  /// @inheritdoc OffchainAggregator\\n  function latestAnswer()\\n    public\\n    override\\n    view\\n    checkAccess()\\n    returns (int256)\\n  {\\n    return super.latestAnswer();\\n  }\\n\\n  /// @inheritdoc OffchainAggregator\\n  function latestTimestamp()\\n    public\\n    override\\n    view\\n    checkAccess()\\n    returns (uint256)\\n  {\\n    return super.latestTimestamp();\\n  }\\n\\n  /// @inheritdoc OffchainAggregator\\n  function latestRound()\\n    public\\n    override\\n    view\\n    checkAccess()\\n    returns (uint256)\\n  {\\n    return super.latestRound();\\n  }\\n\\n  /// @inheritdoc OffchainAggregator\\n  function getAnswer(uint256 _roundId)\\n    public\\n    override\\n    view\\n    checkAccess()\\n    returns (int256)\\n  {\\n    return super.getAnswer(_roundId);\\n  }\\n\\n  /// @inheritdoc OffchainAggregator\\n  function getTimestamp(uint256 _roundId)\\n    public\\n    override\\n    view\\n    checkAccess()\\n    returns (uint256)\\n  {\\n    return super.getTimestamp(_roundId);\\n  }\\n\\n  /*\\n   * v3 Aggregator interface\\n   */\\n\\n  /// @inheritdoc OffchainAggregator\\n  function description()\\n    public\\n    override\\n    view\\n    checkAccess()\\n    returns (string memory)\\n  {\\n    return super.description();\\n  }\\n\\n  /// @inheritdoc OffchainAggregator\\n  function getRoundData(uint80 _roundId)\\n    public\\n    override\\n    view\\n    checkAccess()\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return super.getRoundData(_roundId);\\n  }\\n\\n  /// @inheritdoc OffchainAggregator\\n  function latestRoundData()\\n    public\\n    override\\n    view\\n    checkAccess()\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return super.latestRoundData();\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contract/AccessControllerInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AccessControllerInterface {\\n  function hasAccess(address user, bytes calldata data) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contract/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n  function latestTimestamp() external view returns (uint256);\\n  function latestRound() external view returns (uint256);\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    },\r\n    \"contract/AggregatorV2V3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\\n{\\n}\"\r\n    },\r\n    \"contract/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"contract/AggregatorValidatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorValidatorInterface {\\n  function validate(\\n    uint256 previousRoundId,\\n    int256 previousAnswer,\\n    uint256 currentRoundId,\\n    int256 currentAnswer\\n  ) external returns (bool);\\n}\"\r\n    },\r\n    \"contract/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"contract/OffchainAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./AccessControllerInterface.sol\\\";\\nimport \\\"./AggregatorV2V3Interface.sol\\\";\\nimport \\\"./AggregatorValidatorInterface.sol\\\";\\nimport \\\"./LinkTokenInterface.sol\\\";\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./OffchainAggregatorBilling.sol\\\";\\nimport \\\"./TypeAndVersionInterface.sol\\\";\\n\\n/**\\n  * @notice Onchain verification of reports from the offchain reporting protocol\\n\\n  * @dev For details on its operation, see the offchain reporting protocol design\\n  * @dev doc, which refers to this contract as simply the \\\"contract\\\".\\n*/\\ncontract OffchainAggregator is Owned, OffchainAggregatorBilling, AggregatorV2V3Interface, TypeAndVersionInterface {\\n\\n  uint256 constant private maxUint32 = (1 << 32) - 1;\\n\\n  // Storing these fields used on the hot path in a HotVars variable reduces the\\n  // retrieval of all of them to a single SLOAD. If any further fields are\\n  // added, make sure that storage of the struct still takes at most 32 bytes.\\n  struct HotVars {\\n    // Provides 128 bits of security against 2nd pre-image attacks, but only\\n    // 64 bits against collisions. This is acceptable, since a malicious owner has\\n    // easier way of messing up the protocol than to find hash collisions.\\n    bytes16 latestConfigDigest;\\n    uint40 latestEpochAndRound; // 32 most sig bits for epoch, 8 least sig bits for round\\n    // Current bound assumed on number of faulty/dishonest oracles participating\\n    // in the protocol, this value is referred to as f in the design\\n    uint8 threshold;\\n    // Chainlink Aggregators expose a roundId to consumers. The offchain reporting\\n    // protocol does not use this id anywhere. We increment it whenever a new\\n    // transmission is made to provide callers with contiguous ids for successive\\n    // reports.\\n    uint32 latestAggregatorRoundId;\\n  }\\n  HotVars internal s_hotVars;\\n\\n  // Transmission records the median answer from the transmit transaction at\\n  // time timestamp\\n  struct Transmission {\\n    int192 answer; // 192 bits ought to be enough for anyone\\n    uint64 timestamp;\\n  }\\n  mapping(uint32 /* aggregator round ID */ => Transmission) internal s_transmissions;\\n\\n  // incremented each time a new config is posted. This count is incorporated\\n  // into the config digest, to prevent replay attacks.\\n  uint32 internal s_configCount;\\n  uint32 internal s_latestConfigBlockNumber; // makes it easier for offchain systems\\n                                             // to extract config from logs.\\n\\n  // Lowest answer the system is allowed to report in response to transmissions\\n  int192 immutable public minAnswer;\\n  // Highest answer the system is allowed to report in response to transmissions\\n  int192 immutable public maxAnswer;\\n\\n  /*\\n   * @param _maximumGasPrice highest gas price for which transmitter will be compensated\\n   * @param _reasonableGasPrice transmitter will receive reward for gas prices under this value\\n   * @param _microLinkPerEth reimbursement per ETH of gas cost, in 1e-6LINK units\\n   * @param _linkGweiPerObservation reward to oracle for contributing an observation to a successfully transmitted report, in 1e-9LINK units\\n   * @param _linkGweiPerTransmission reward to transmitter of a successful report, in 1e-9LINK units\\n   * @param _link address of the LINK contract\\n   * @param _minAnswer lowest answer the median of a report is allowed to be\\n   * @param _maxAnswer highest answer the median of a report is allowed to be\\n   * @param _billingAccessController access controller for billing admin functions\\n   * @param _requesterAccessController access controller for requesting new rounds\\n   * @param _decimals answers are stored in fixed-point format, with this many digits of precision\\n   * @param _description short human-readable description of observable this contract's answers pertain to\\n   */\\n  constructor(\\n    uint32 _maximumGasPrice,\\n    uint32 _reasonableGasPrice,\\n    uint32 _microLinkPerEth,\\n    uint32 _linkGweiPerObservation,\\n    uint32 _linkGweiPerTransmission,\\n    LinkTokenInterface _link,\\n    int192 _minAnswer,\\n    int192 _maxAnswer,\\n    AccessControllerInterface _billingAccessController,\\n    AccessControllerInterface _requesterAccessController,\\n    uint8 _decimals,\\n    string memory _description\\n  )\\n    OffchainAggregatorBilling(_maximumGasPrice, _reasonableGasPrice, _microLinkPerEth,\\n      _linkGweiPerObservation, _linkGweiPerTransmission, _link,\\n      _billingAccessController\\n    )\\n  {\\n    decimals = _decimals;\\n    s_description = _description;\\n    setRequesterAccessController(_requesterAccessController);\\n    setValidatorConfig(AggregatorValidatorInterface(0x0), 0);\\n    minAnswer = _minAnswer;\\n    maxAnswer = _maxAnswer;\\n  }\\n\\n  /*\\n   * Versioning\\n   */\\n  function typeAndVersion()\\n    external\\n    override\\n    pure\\n    virtual\\n    returns (string memory)\\n  {\\n    return \\\"OffchainAggregator 4.0.0\\\";\\n  }\\n\\n  /*\\n   * Config logic\\n   */\\n\\n  /**\\n   * @notice triggers a new run of the offchain reporting protocol\\n   * @param previousConfigBlockNumber block in which the previous config was set, to simplify historic analysis\\n   * @param configCount ordinal number of this config setting among all config settings over the life of this contract\\n   * @param signers ith element is address ith oracle uses to sign a report\\n   * @param transmitters ith element is address ith oracle uses to transmit a report via the transmit method\\n   * @param threshold maximum number of faulty/dishonest oracles the protocol can tolerate while still working correctly\\n   * @param encodedConfigVersion version of the serialization format used for \\\"encoded\\\" parameter\\n   * @param encoded serialized data used by oracles to configure their offchain operation\\n   */\\n  event ConfigSet(\\n    uint32 previousConfigBlockNumber,\\n    uint64 configCount,\\n    address[] signers,\\n    address[] transmitters,\\n    uint8 threshold,\\n    uint64 encodedConfigVersion,\\n    bytes encoded\\n  );\\n\\n  // Reverts transaction if config args are invalid\\n  modifier checkConfigValid (\\n    uint256 _numSigners, uint256 _numTransmitters, uint256 _threshold\\n  ) {\\n    require(_numSigners <= maxNumOracles, \\\"too many signers\\\");\\n    require(_threshold > 0, \\\"threshold must be positive\\\");\\n    require(\\n      _numSigners == _numTransmitters,\\n      \\\"oracle addresses out of registration\\\"\\n    );\\n    require(_numSigners > 3*_threshold, \\\"faulty-oracle threshold too high\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice sets offchain reporting protocol configuration incl. participating oracles\\n   * @param _signers addresses with which oracles sign the reports\\n   * @param _transmitters addresses oracles use to transmit the reports\\n   * @param _threshold number of faulty oracles the system can tolerate\\n   * @param _encodedConfigVersion version number for offchainEncoding schema\\n   * @param _encoded encoded off-chain oracle configuration\\n   */\\n  function setConfig(\\n    address[] calldata _signers,\\n    address[] calldata _transmitters,\\n    uint8 _threshold,\\n    uint64 _encodedConfigVersion,\\n    bytes calldata _encoded\\n  )\\n    external\\n    checkConfigValid(_signers.length, _transmitters.length, _threshold)\\n    onlyOwner()\\n  {\\n    while (s_signers.length != 0) { // remove any old signer/transmitter addresses\\n      uint lastIdx = s_signers.length - 1;\\n      address signer = s_signers[lastIdx];\\n      address transmitter = s_transmitters[lastIdx];\\n      payOracle(transmitter);\\n      delete s_oracles[signer];\\n      delete s_oracles[transmitter];\\n      s_signers.pop();\\n      s_transmitters.pop();\\n    }\\n\\n    for (uint i = 0; i < _signers.length; i++) { // add new signer/transmitter addresses\\n      require(\\n        s_oracles[_signers[i]].role == Role.Unset,\\n        \\\"repeated signer address\\\"\\n      );\\n      s_oracles[_signers[i]] = Oracle(uint8(i), Role.Signer);\\n      require(s_payees[_transmitters[i]] != address(0), \\\"payee must be set\\\");\\n      require(\\n        s_oracles[_transmitters[i]].role == Role.Unset,\\n        \\\"repeated transmitter address\\\"\\n      );\\n      s_oracles[_transmitters[i]] = Oracle(uint8(i), Role.Transmitter);\\n      s_signers.push(_signers[i]);\\n      s_transmitters.push(_transmitters[i]);\\n    }\\n    s_hotVars.threshold = _threshold;\\n    uint32 previousConfigBlockNumber = s_latestConfigBlockNumber;\\n    s_latestConfigBlockNumber = uint32(block.number);\\n    s_configCount += 1;\\n    uint64 configCount = s_configCount;\\n    {\\n      s_hotVars.latestConfigDigest = configDigestFromConfigData(\\n        address(this),\\n        configCount,\\n        _signers,\\n        _transmitters,\\n        _threshold,\\n        _encodedConfigVersion,\\n        _encoded\\n      );\\n      s_hotVars.latestEpochAndRound = 0;\\n    }\\n    emit ConfigSet(\\n      previousConfigBlockNumber,\\n      configCount,\\n      _signers,\\n      _transmitters,\\n      _threshold,\\n      _encodedConfigVersion,\\n      _encoded\\n    );\\n  }\\n\\n  function configDigestFromConfigData(\\n    address _contractAddress,\\n    uint64 _configCount,\\n    address[] calldata _signers,\\n    address[] calldata _transmitters,\\n    uint8 _threshold,\\n    uint64 _encodedConfigVersion,\\n    bytes calldata _encodedConfig\\n  ) internal pure returns (bytes16) {\\n    return bytes16(keccak256(abi.encode(_contractAddress, _configCount,\\n      _signers, _transmitters, _threshold, _encodedConfigVersion, _encodedConfig\\n    )));\\n  }\\n\\n  /**\\n   * @notice information about current offchain reporting protocol configuration\\n\\n   * @return configCount ordinal number of current config, out of all configs applied to this contract so far\\n   * @return blockNumber block at which this config was set\\n   * @return configDigest domain-separation tag for current config (see configDigestFromConfigData)\\n   */\\n  function latestConfigDetails()\\n    external\\n    view\\n    returns (\\n      uint32 configCount,\\n      uint32 blockNumber,\\n      bytes16 configDigest\\n    )\\n  {\\n    return (s_configCount, s_latestConfigBlockNumber, s_hotVars.latestConfigDigest);\\n  }\\n\\n  /**\\n   * @return list of addresses permitted to transmit reports to this contract\\n\\n   * @dev The list will match the order used to specify the transmitter during setConfig\\n   */\\n  function transmitters()\\n    external\\n    view\\n    returns(address[] memory)\\n  {\\n      return s_transmitters;\\n  }\\n\\n  /*\\n   * On-chain validation logc\\n   */\\n\\n  // Configuration for validator\\n  struct ValidatorConfig {\\n    AggregatorValidatorInterface validator;\\n    uint32 gasLimit;\\n  }\\n  ValidatorConfig private s_validatorConfig;\\n\\n  /**\\n   * @notice indicates that the validator configuration has been set\\n   * @param previousValidator previous validator contract\\n   * @param previousGasLimit previous gas limit for validate calls\\n   * @param currentValidator current validator contract\\n   * @param currentGasLimit current gas limit for validate calls\\n   */\\n  event ValidatorConfigSet(\\n    AggregatorValidatorInterface indexed previousValidator,\\n    uint32 previousGasLimit,\\n    AggregatorValidatorInterface indexed currentValidator,\\n    uint32 currentGasLimit\\n  );\\n\\n  /**\\n   * @notice validator configuration\\n   * @return validator validator contract\\n   * @return gasLimit gas limit for validate calls\\n   */\\n  function validatorConfig()\\n    external\\n    view\\n    returns (AggregatorValidatorInterface validator, uint32 gasLimit)\\n  {\\n    ValidatorConfig memory vc = s_validatorConfig;\\n    return (vc.validator, vc.gasLimit);\\n  }\\n\\n  /**\\n   * @notice sets validator configuration\\n   * @dev set _newValidator to 0x0 to disable validate calls\\n   * @param _newValidator address of the new validator contract\\n   * @param _newGasLimit new gas limit for validate calls\\n   */\\n  function setValidatorConfig(AggregatorValidatorInterface _newValidator, uint32 _newGasLimit)\\n    public\\n    onlyOwner()\\n  {\\n    ValidatorConfig memory previous = s_validatorConfig;\\n\\n    if (previous.validator != _newValidator || previous.gasLimit != _newGasLimit) {\\n      s_validatorConfig = ValidatorConfig({\\n        validator: _newValidator,\\n        gasLimit: _newGasLimit\\n      });\\n\\n      emit ValidatorConfigSet(previous.validator, previous.gasLimit, _newValidator, _newGasLimit);\\n    }\\n  }\\n\\n  function validateAnswer(\\n    uint32 _aggregatorRoundId,\\n    int256 _answer\\n  )\\n    private\\n  {\\n    ValidatorConfig memory vc = s_validatorConfig;\\n\\n    if (address(vc.validator) == address(0)) {\\n      return;\\n    }\\n\\n    uint32 prevAggregatorRoundId = _aggregatorRoundId - 1;\\n    int256 prevAggregatorRoundAnswer = s_transmissions[prevAggregatorRoundId].answer;\\n    require(\\n      callWithExactGasEvenIfTargetIsNoContract(\\n        vc.gasLimit,\\n        address(vc.validator),\\n        abi.encodeWithSignature(\\n          \\\"validate(uint256,int256,uint256,int256)\\\",\\n          uint256(prevAggregatorRoundId),\\n          prevAggregatorRoundAnswer,\\n          uint256(_aggregatorRoundId),\\n          _answer\\n        )\\n      ),\\n      \\\"insufficient gas\\\"\\n    );\\n  }\\n\\n  uint256 private constant CALL_WITH_EXACT_GAS_CUSHION = 5_000;\\n\\n  /**\\n   * @dev calls target address with exactly gasAmount gas and data as calldata\\n   * or reverts if at least gasAmount gas is not available.\\n   */\\n  function callWithExactGasEvenIfTargetIsNoContract(\\n    uint256 _gasAmount,\\n    address _target,\\n    bytes memory _data\\n  )\\n    private\\n    returns (bool sufficientGas)\\n  {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let g := gas()\\n      // Compute g -= CALL_WITH_EXACT_GAS_CUSHION and check for underflow. We\\n      // need the cushion since the logic following the above call to gas also\\n      // costs gas which we cannot account for exactly. So cushion is a\\n      // conservative upper bound for the cost of this logic.\\n      if iszero(lt(g, CALL_WITH_EXACT_GAS_CUSHION)) {\\n        g := sub(g, CALL_WITH_EXACT_GAS_CUSHION)\\n        // If g - g//64 <= _gasAmount, we don't have enough gas. (We subtract g//64\\n        // because of EIP-150.)\\n        if gt(sub(g, div(g, 64)), _gasAmount) {\\n          // Call and ignore success/return data. Note that we did not check\\n          // whether a contract actually exists at the _target address.\\n          pop(call(_gasAmount, _target, 0, add(_data, 0x20), mload(_data), 0, 0))\\n          sufficientGas := true\\n        }\\n      }\\n    }\\n  }\\n\\n  /*\\n   * requestNewRound logic\\n   */\\n\\n  AccessControllerInterface internal s_requesterAccessController;\\n\\n  /**\\n   * @notice emitted when a new requester access controller contract is set\\n   * @param old the address prior to the current setting\\n   * @param current the address of the new access controller contract\\n   */\\n  event RequesterAccessControllerSet(AccessControllerInterface old, AccessControllerInterface current);\\n\\n  /**\\n   * @notice emitted to immediately request a new round\\n   * @param requester the address of the requester\\n   * @param configDigest the latest transmission's configDigest\\n   * @param epoch the latest transmission's epoch\\n   * @param round the latest transmission's round\\n   */\\n  event RoundRequested(address indexed requester, bytes16 configDigest, uint32 epoch, uint8 round);\\n\\n  /**\\n   * @notice address of the requester access controller contract\\n   * @return requester access controller address\\n   */\\n  function requesterAccessController()\\n    external\\n    view\\n    returns (AccessControllerInterface)\\n  {\\n    return s_requesterAccessController;\\n  }\\n\\n  /**\\n   * @notice sets the requester access controller\\n   * @param _requesterAccessController designates the address of the new requester access controller\\n   */\\n  function setRequesterAccessController(AccessControllerInterface _requesterAccessController)\\n    public\\n    onlyOwner()\\n  {\\n    AccessControllerInterface oldController = s_requesterAccessController;\\n    if (_requesterAccessController != oldController) {\\n      s_requesterAccessController = AccessControllerInterface(_requesterAccessController);\\n      emit RequesterAccessControllerSet(oldController, _requesterAccessController);\\n    }\\n  }\\n\\n  /**\\n   * @notice immediately requests a new round\\n   * @return the aggregatorRoundId of the next round. Note: The report for this round may have been\\n   * transmitted (but not yet mined) *before* requestNewRound() was even called. There is *no*\\n   * guarantee of causality between the request and the report at aggregatorRoundId.\\n   */\\n  function requestNewRound() external returns (uint80) {\\n    require(msg.sender == owner || s_requesterAccessController.hasAccess(msg.sender, msg.data),\\n      \\\"Only owner&requester can call\\\");\\n\\n    HotVars memory hotVars = s_hotVars;\\n\\n    emit RoundRequested(\\n      msg.sender,\\n      hotVars.latestConfigDigest,\\n      uint32(s_hotVars.latestEpochAndRound >> 8),\\n      uint8(s_hotVars.latestEpochAndRound)\\n    );\\n    return hotVars.latestAggregatorRoundId + 1;\\n  }\\n\\n  /*\\n   * Transmission logic\\n   */\\n\\n  /**\\n   * @notice indicates that a new report was transmitted\\n   * @param aggregatorRoundId the round to which this report was assigned\\n   * @param answer median of the observations attached this report\\n   * @param transmitter address from which the report was transmitted\\n   * @param observations observations transmitted with this report\\n   * @param rawReportContext signature-replay-prevention domain-separation tag\\n   */\\n  event NewTransmission(\\n    uint32 indexed aggregatorRoundId,\\n    int192 answer,\\n    address transmitter,\\n    int192[] observations,\\n    bytes observers,\\n    bytes32 rawReportContext\\n  );\\n\\n  // decodeReport is used to check that the solidity and go code are using the\\n  // same format. See TestOffchainAggregator.testDecodeReport and TestReportParsing\\n  function decodeReport(bytes memory _report)\\n    internal\\n    pure\\n    returns (\\n      bytes32 rawReportContext,\\n      bytes32 rawObservers,\\n      int192[] memory observations\\n    )\\n  {\\n    (rawReportContext, rawObservers, observations) = abi.decode(_report,\\n      (bytes32, bytes32, int192[]));\\n  }\\n\\n  // Used to relieve stack pressure in transmit\\n  struct ReportData {\\n    HotVars hotVars; // Only read from storage once\\n    bytes observers; // ith element is the index of the ith observer\\n    int192[] observations; // ith element is the ith observation\\n    bytes vs; // jth element is the v component of the jth signature\\n    bytes32 rawReportContext;\\n  }\\n\\n  /*\\n   * @notice details about the most recent report\\n\\n   * @return configDigest domain separation tag for the latest report\\n   * @return epoch epoch in which the latest report was generated\\n   * @return round OCR round in which the latest report was generated\\n   * @return latestAnswer median value from latest report\\n   * @return latestTimestamp when the latest report was transmitted\\n   */\\n  function latestTransmissionDetails()\\n    external\\n    view\\n    returns (\\n      bytes16 configDigest,\\n      uint32 epoch,\\n      uint8 round,\\n      int192 latestAnswer,\\n      uint64 latestTimestamp\\n    )\\n  {\\n    require(msg.sender == tx.origin, \\\"Only callable by EOA\\\");\\n    return (\\n      s_hotVars.latestConfigDigest,\\n      uint32(s_hotVars.latestEpochAndRound >> 8),\\n      uint8(s_hotVars.latestEpochAndRound),\\n      s_transmissions[s_hotVars.latestAggregatorRoundId].answer,\\n      s_transmissions[s_hotVars.latestAggregatorRoundId].timestamp\\n    );\\n  }\\n\\n  // The constant-length components of the msg.data sent to transmit.\\n  // See the \\\"If we wanted to call sam\\\" example on for example reasoning\\n  // https://solidity.readthedocs.io/en/v0.7.2/abi-spec.html\\n  uint16 private constant TRANSMIT_MSGDATA_CONSTANT_LENGTH_COMPONENT =\\n    4 + // function selector\\n    32 + // word containing start location of abiencoded _report value\\n    32 + // word containing location start of abiencoded  _rs value\\n    32 + // word containing start location of abiencoded _ss value\\n    32 + // _rawVs value\\n    32 + // word containing length of _report\\n    32 + // word containing length _rs\\n    32 + // word containing length of _ss\\n    0; // placeholder\\n\\n  function expectedMsgDataLength(\\n    bytes calldata _report, bytes32[] calldata _rs, bytes32[] calldata _ss\\n  ) private pure returns (uint256 length)\\n  {\\n    // calldata will never be big enough to make this overflow\\n    return uint256(TRANSMIT_MSGDATA_CONSTANT_LENGTH_COMPONENT) +\\n      _report.length + // one byte pure entry in _report\\n      _rs.length * 32 + // 32 bytes per entry in _rs\\n      _ss.length * 32 + // 32 bytes per entry in _ss\\n      0; // placeholder\\n  }\\n\\n  /**\\n   * @notice transmit is called to post a new report to the contract\\n   * @param _report serialized report, which the signatures are signing. See parsing code below for format. The ith element of the observers component must be the index in s_signers of the address for the ith signature\\n   * @param _rs ith element is the R components of the ith signature on report. Must have at most maxNumOracles entries\\n   * @param _ss ith element is the S components of the ith signature on report. Must have at most maxNumOracles entries\\n   * @param _rawVs ith element is the the V component of the ith signature\\n   */\\n  function transmit(\\n    // NOTE: If these parameters are changed, expectedMsgDataLength and/or\\n    // TRANSMIT_MSGDATA_CONSTANT_LENGTH_COMPONENT need to be changed accordingly\\n    bytes calldata _report,\\n    bytes32[] calldata _rs, bytes32[] calldata _ss, bytes32 _rawVs // signatures\\n  )\\n    external\\n  {\\n    uint256 initialGas = gasleft(); // This line must come first\\n    // Make sure the transmit message-length matches the inputs. Otherwise, the\\n    // transmitter could append an arbitrarily long (up to gas-block limit)\\n    // string of 0 bytes, which we would reimburse at a rate of 16 gas/byte, but\\n    // which would only cost the transmitter 4 gas/byte. (Appendix G of the\\n    // yellow paper, p. 25, for G_txdatazero and EIP 2028 for G_txdatanonzero.)\\n    // This could amount to reimbursement profit of 36 million gas, given a 3MB\\n    // zero tail.\\n    require(msg.data.length == expectedMsgDataLength(_report, _rs, _ss),\\n      \\\"transmit message too long\\\");\\n    ReportData memory r; // Relieves stack pressure\\n    {\\n      r.hotVars = s_hotVars; // cache read from storage\\n\\n      bytes32 rawObservers;\\n      (r.rawReportContext, rawObservers, r.observations) = abi.decode(\\n        _report, (bytes32, bytes32, int192[])\\n      );\\n\\n      // rawReportContext consists of:\\n      // 11-byte zero padding\\n      // 16-byte configDigest\\n      // 4-byte epoch\\n      // 1-byte round\\n\\n      bytes16 configDigest = bytes16(r.rawReportContext << 88);\\n      require(\\n        r.hotVars.latestConfigDigest == configDigest,\\n        \\\"configDigest mismatch\\\"\\n      );\\n\\n      uint40 epochAndRound = uint40(uint256(r.rawReportContext));\\n\\n      // direct numerical comparison works here, because\\n      //\\n      //   ((e,r) <= (e',r')) implies (epochAndRound <= epochAndRound')\\n      //\\n      // because alphabetic ordering implies e <= e', and if e = e', then r<=r',\\n      // so e*256+r <= e'*256+r', because r, r' < 256\\n      require(r.hotVars.latestEpochAndRound < epochAndRound, \\\"stale report\\\");\\n\\n      require(_rs.length > r.hotVars.threshold, \\\"not enough signatures\\\");\\n      require(_rs.length <= maxNumOracles, \\\"too many signatures\\\");\\n      require(_ss.length == _rs.length, \\\"signatures out of registration\\\");\\n      require(r.observations.length <= maxNumOracles,\\n              \\\"num observations out of bounds\\\");\\n      require(r.observations.length > 2 * r.hotVars.threshold,\\n              \\\"too few values to trust median\\\");\\n\\n      // Copy signature parities in bytes32 _rawVs to bytes r.v\\n      r.vs = new bytes(_rs.length);\\n      for (uint8 i = 0; i < _rs.length; i++) {\\n        r.vs[i] = _rawVs[i];\\n      }\\n\\n      // Copy observer identities in bytes32 rawObservers to bytes r.observers\\n      r.observers = new bytes(r.observations.length);\\n      bool[maxNumOracles] memory seen;\\n      for (uint8 i = 0; i < r.observations.length; i++) {\\n        uint8 observerIdx = uint8(rawObservers[i]);\\n        require(!seen[observerIdx], \\\"observer index repeated\\\");\\n        seen[observerIdx] = true;\\n        r.observers[i] = rawObservers[i];\\n      }\\n\\n      Oracle memory transmitter = s_oracles[msg.sender];\\n      require( // Check that sender is authorized to report\\n        transmitter.role == Role.Transmitter &&\\n        msg.sender == s_transmitters[transmitter.index],\\n        \\\"unauthorized transmitter\\\"\\n      );\\n      // record epochAndRound here, so that we don't have to carry the local\\n      // variable in transmit. The change is reverted if something fails later.\\n      r.hotVars.latestEpochAndRound = epochAndRound;\\n    }\\n\\n    { // Verify signatures attached to report\\n      bytes32 h = keccak256(_report);\\n      bool[maxNumOracles] memory signed;\\n\\n      Oracle memory o;\\n      for (uint i = 0; i < _rs.length; i++) {\\n        address signer = ecrecover(h, uint8(r.vs[i])+27, _rs[i], _ss[i]);\\n        o = s_oracles[signer];\\n        require(o.role == Role.Signer, \\\"address not authorized to sign\\\");\\n        require(!signed[o.index], \\\"non-unique signature\\\");\\n        signed[o.index] = true;\\n      }\\n    }\\n\\n    { // Check the report contents, and record the result\\n      for (uint i = 0; i < r.observations.length - 1; i++) {\\n        bool inOrder = r.observations[i] <= r.observations[i+1];\\n        require(inOrder, \\\"observations not sorted\\\");\\n      }\\n\\n      int192 median = r.observations[r.observations.length/2];\\n      require(minAnswer <= median && median <= maxAnswer, \\\"median is out of min-max range\\\");\\n      r.hotVars.latestAggregatorRoundId++;\\n      s_transmissions[r.hotVars.latestAggregatorRoundId] =\\n        Transmission(median, uint64(block.timestamp));\\n\\n      emit NewTransmission(\\n        r.hotVars.latestAggregatorRoundId,\\n        median,\\n        msg.sender,\\n        r.observations,\\n        r.observers,\\n        r.rawReportContext\\n      );\\n      // Emit these for backwards compatability with offchain consumers\\n      // that only support legacy events\\n      emit NewRound(\\n        r.hotVars.latestAggregatorRoundId,\\n        address(0x0), // use zero address since we don't have anybody \\\"starting\\\" the round here\\n        block.timestamp\\n      );\\n      emit AnswerUpdated(\\n        median,\\n        r.hotVars.latestAggregatorRoundId,\\n        block.timestamp\\n      );\\n\\n      validateAnswer(r.hotVars.latestAggregatorRoundId, median);\\n    }\\n    s_hotVars = r.hotVars;\\n    assert(initialGas < maxUint32);\\n    reimburseAndRewardOracles(uint32(initialGas), r.observers);\\n  }\\n\\n  /*\\n   * v2 Aggregator interface\\n   */\\n\\n  /**\\n   * @notice median from the most recent report\\n   */\\n  function latestAnswer()\\n    public\\n    override\\n    view\\n    virtual\\n    returns (int256)\\n  {\\n    return s_transmissions[s_hotVars.latestAggregatorRoundId].answer;\\n  }\\n\\n  /**\\n   * @notice timestamp of block in which last report was transmitted\\n   */\\n  function latestTimestamp()\\n    public\\n    override\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    return s_transmissions[s_hotVars.latestAggregatorRoundId].timestamp;\\n  }\\n\\n  /**\\n   * @notice Aggregator round (NOT OCR round) in which last report was transmitted\\n   */\\n  function latestRound()\\n    public\\n    override\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    return s_hotVars.latestAggregatorRoundId;\\n  }\\n\\n  /**\\n   * @notice median of report from given aggregator round (NOT OCR round)\\n   * @param _roundId the aggregator round of the target report\\n   */\\n  function getAnswer(uint256 _roundId)\\n    public\\n    override\\n    view\\n    virtual\\n    returns (int256)\\n  {\\n    if (_roundId > 0xFFFFFFFF) { return 0; }\\n    return s_transmissions[uint32(_roundId)].answer;\\n  }\\n\\n  /**\\n   * @notice timestamp of block in which report from given aggregator round was transmitted\\n   * @param _roundId aggregator round (NOT OCR round) of target report\\n   */\\n  function getTimestamp(uint256 _roundId)\\n    public\\n    override\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    if (_roundId > 0xFFFFFFFF) { return 0; }\\n    return s_transmissions[uint32(_roundId)].timestamp;\\n  }\\n\\n  /*\\n   * v3 Aggregator interface\\n   */\\n\\n  string constant private V3_NO_DATA_ERROR = \\\"No data present\\\";\\n\\n  /**\\n   * @return answers are stored in fixed-point format, with this many digits of precision\\n   */\\n  uint8 immutable public override decimals;\\n\\n  /**\\n   * @notice aggregator contract version\\n   */\\n  uint256 constant public override version = 4;\\n\\n  string internal s_description;\\n\\n  /**\\n   * @notice human-readable description of observable this contract is reporting on\\n   */\\n  function description()\\n    public\\n    override\\n    view\\n    virtual\\n    returns (string memory)\\n  {\\n    return s_description;\\n  }\\n\\n  /**\\n   * @notice details for the given aggregator round\\n   * @param _roundId target aggregator round (NOT OCR round). Must fit in uint32\\n   * @return roundId _roundId\\n   * @return answer median of report from given _roundId\\n   * @return startedAt timestamp of block in which report from given _roundId was transmitted\\n   * @return updatedAt timestamp of block in which report from given _roundId was transmitted\\n   * @return answeredInRound _roundId\\n   */\\n  function getRoundData(uint80 _roundId)\\n    public\\n    override\\n    view\\n    virtual\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    require(_roundId <= 0xFFFFFFFF, V3_NO_DATA_ERROR);\\n    Transmission memory transmission = s_transmissions[uint32(_roundId)];\\n    return (\\n      _roundId,\\n      transmission.answer,\\n      transmission.timestamp,\\n      transmission.timestamp,\\n      _roundId\\n    );\\n  }\\n\\n  /**\\n   * @notice aggregator details for the most recently transmitted report\\n   * @return roundId aggregator round of latest report (NOT OCR round)\\n   * @return answer median of latest report\\n   * @return startedAt timestamp of block containing latest report\\n   * @return updatedAt timestamp of block containing latest report\\n   * @return answeredInRound aggregator round of latest report\\n   */\\n  function latestRoundData()\\n    public\\n    override\\n    view\\n    virtual\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    roundId = s_hotVars.latestAggregatorRoundId;\\n\\n    // Skipped for compatability with existing FluxAggregator in which latestRoundData never reverts.\\n    // require(roundId != 0, V3_NO_DATA_ERROR);\\n\\n    Transmission memory transmission = s_transmissions[uint32(roundId)];\\n    return (\\n      roundId,\\n      transmission.answer,\\n      transmission.timestamp,\\n      transmission.timestamp,\\n      roundId\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"contract/OffchainAggregatorBilling.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./AccessControllerInterface.sol\\\";\\nimport \\\"./LinkTokenInterface.sol\\\";\\nimport \\\"./Owned.sol\\\";\\n\\n/**\\n * @notice tracks administration of oracle-reward and gas-reimbursement parameters.\\n\\n * @dev\\n * If you read or change this, be sure to read or adjust the comments. They\\n * track the units of the values under consideration, and are crucial to\\n * the readability of the operations it specifies.\\n\\n * @notice\\n * Trust Model:\\n\\n * Nothing in this contract prevents a billing admin from setting insane\\n * values for the billing parameters in setBilling. Oracles\\n * participating in this contract should regularly check that the\\n * parameters make sense. Similarly, the outstanding obligations of this\\n * contract to the oracles can exceed the funds held by the contract.\\n * Oracles participating in this contract should regularly check that it\\n * holds sufficient funds and stop interacting with it if funding runs\\n * out.\\n\\n * This still leaves oracles with some risk due to TOCTOU issues.\\n * However, since the sums involved are pretty small (Ethereum\\n * transactions aren't that expensive in the end) and an oracle would\\n * likely stop participating in a contract it repeatedly lost money on,\\n * this risk is deemed acceptable. Oracles should also regularly\\n * withdraw any funds in the contract to prevent issues where the\\n * contract becomes underfunded at a later time, and different oracles\\n * are competing for the left-over funds.\\n\\n * Finally, note that any change to the set of oracles or to the billing\\n * parameters will trigger payout of all oracles first (using the old\\n * parameters), a billing admin cannot take away funds that are already\\n * marked for payment.\\n*/\\ncontract OffchainAggregatorBilling is Owned {\\n\\n  // Maximum number of oracles the offchain reporting protocol is designed for\\n  uint256 constant internal maxNumOracles = 31;\\n\\n  // Parameters for oracle payments\\n  struct Billing {\\n\\n    // Highest compensated gas price, in ETH-gwei uints\\n    uint32 maximumGasPrice;\\n\\n    // If gas price is less (in ETH-gwei units), transmitter gets half the savings\\n    uint32 reasonableGasPrice;\\n\\n    // Pay transmitter back this much LINK per unit eth spent on gas\\n    // (1e-6LINK/ETH units)\\n    uint32 microLinkPerEth;\\n\\n    // Fixed LINK reward for each observer, in LINK-gwei units\\n    uint32 linkGweiPerObservation;\\n\\n    // Fixed reward for transmitter, in linkGweiPerObservation units\\n    uint32 linkGweiPerTransmission;\\n  }\\n  Billing internal s_billing;\\n\\n  // We assume that the token contract is correct. This contract is not written\\n  // to handle misbehaving ERC20 tokens!\\n  LinkTokenInterface internal s_linkToken;\\n\\n  AccessControllerInterface internal s_billingAccessController;\\n\\n  // ith element is number of observation rewards due to ith process, plus one.\\n  // This is expected to saturate after an oracle has submitted 65,535\\n  // observations, or about 65535/(3*24*20) = 45 days, given a transmission\\n  // every 3 minutes.\\n  //\\n  // This is always one greater than the actual value, so that when the value is\\n  // reset to zero, we don't end up with a zero value in storage (which would\\n  // result in a higher gas cost, the next time the value is incremented.)\\n  // Calculations using this variable need to take that offset into account.\\n  uint16[maxNumOracles] internal s_oracleObservationsCounts;\\n\\n  // Addresses at which oracles want to receive payments, by transmitter address\\n  mapping (address /* transmitter */ => address /* payment address */)\\n    internal\\n    s_payees;\\n\\n  // Payee addresses which must be approved by the owner\\n  mapping (address /* transmitter */ => address /* payment address */)\\n    internal\\n    s_proposedPayees;\\n\\n  // LINK-wei-denominated reimbursements for gas used by transmitters.\\n  //\\n  // This is always one greater than the actual value, so that when the value is\\n  // reset to zero, we don't end up with a zero value in storage (which would\\n  // result in a higher gas cost, the next time the value is incremented.)\\n  // Calculations using this variable need to take that offset into account.\\n  //\\n  // Argument for overflow safety:\\n  // We have the following maximum intermediate values:\\n  // - 2**40 additions to this variable (epochAndRound is a uint40)\\n  // - 2**32 gas price in ethgwei/gas\\n  // - 1e9 ethwei/ethgwei\\n  // - 2**32 gas since the block gas limit is at ~20 million\\n  // - 2**32 (microlink/eth)\\n  // And we have 2**40 * 2**32 * 1e9 * 2**32 * 2**32 < 2**166\\n  // (we also divide in some places, but that only makes the value smaller)\\n  // We can thus safely use uint256 intermediate values for the computation\\n  // updating this variable.\\n  uint256[maxNumOracles] internal s_gasReimbursementsLinkWei;\\n\\n  // Used for s_oracles[a].role, where a is an address, to track the purpose\\n  // of the address, or to indicate that the address is unset.\\n  enum Role {\\n    // No oracle role has been set for address a\\n    Unset,\\n    // Signing address for the s_oracles[a].index'th oracle. I.e., report\\n    // signatures from this oracle should ecrecover back to address a.\\n    Signer,\\n    // Transmission address for the s_oracles[a].index'th oracle. I.e., if a\\n    // report is received by OffchainAggregator.transmit in which msg.sender is\\n    // a, it is attributed to the s_oracles[a].index'th oracle.\\n    Transmitter\\n  }\\n\\n  struct Oracle {\\n    uint8 index; // Index of oracle in s_signers/s_transmitters\\n    Role role;   // Role of the address which mapped to this struct\\n  }\\n\\n  mapping (address /* signer OR transmitter address */ => Oracle)\\n    internal s_oracles;\\n\\n  // s_signers contains the signing address of each oracle\\n  address[] internal s_signers;\\n\\n  // s_transmitters contains the transmission address of each oracle,\\n  // i.e. the address the oracle actually sends transactions to the contract from\\n  address[] internal s_transmitters;\\n\\n  uint256 constant private  maxUint16 = (1 << 16) - 1;\\n  uint256 constant internal maxUint128 = (1 << 128) - 1;\\n\\n  constructor(\\n    uint32 _maximumGasPrice,\\n    uint32 _reasonableGasPrice,\\n    uint32 _microLinkPerEth,\\n    uint32 _linkGweiPerObservation,\\n    uint32 _linkGweiPerTransmission,\\n    LinkTokenInterface _link,\\n    AccessControllerInterface _billingAccessController\\n  )\\n  {\\n    setBillingInternal(_maximumGasPrice, _reasonableGasPrice, _microLinkPerEth,\\n      _linkGweiPerObservation, _linkGweiPerTransmission);\\n    s_linkToken = _link;\\n    emit LinkTokenSet(LinkTokenInterface(address(0)), _link);\\n    setBillingAccessControllerInternal(_billingAccessController);\\n    uint16[maxNumOracles] memory counts; // See s_oracleObservationsCounts docstring\\n    uint256[maxNumOracles] memory gas; // see s_gasReimbursementsLinkWei docstring\\n    for (uint8 i = 0; i < maxNumOracles; i++) {\\n      counts[i] = 1;\\n      gas[i] = 1;\\n    }\\n    s_oracleObservationsCounts = counts;\\n    s_gasReimbursementsLinkWei = gas;\\n  }\\n\\n  /*\\n   * @notice emitted when the LINK token contract is set\\n   * @param _oldLinkToken the address of the old LINK token contract\\n   * @param _newLinkToken the address of the new LINK token contract\\n   */\\n  event LinkTokenSet(\\n    LinkTokenInterface indexed _oldLinkToken,\\n    LinkTokenInterface indexed _newLinkToken\\n  );\\n\\n  /*\\n   * @notice sets the LINK token contract used for paying oracles\\n   * @param _linkToken the address of the LINK token contract\\n   * @param _recipient remaining funds from the previous token contract are transfered\\n   * here\\n   * @dev this function will return early (without an error) without changing any state\\n   * if _linkToken equals getLinkToken().\\n   * @dev this will trigger a payout so that a malicious owner cannot take from oracles\\n   * what is already owed to them.\\n   * @dev we assume that the token contract is correct. This contract is not written\\n   * to handle misbehaving ERC20 tokens!\\n   */\\n  function setLinkToken(\\n    LinkTokenInterface _linkToken,\\n    address _recipient\\n  ) external\\n    onlyOwner()\\n  {\\n    LinkTokenInterface oldLinkToken = s_linkToken;\\n    if (_linkToken == oldLinkToken) {\\n      // No change, nothing to be done\\n      return;\\n    }\\n    // call balanceOf as a sanity check on whether we're talking to a token\\n    // contract\\n    _linkToken.balanceOf(address(this));\\n    // we break CEI here, but that's okay because we're dealing with a correct\\n    // token contract (by assumption).\\n    payOracles();\\n    uint256 remainingBalance = oldLinkToken.balanceOf(address(this));\\n    require(oldLinkToken.transfer(_recipient, remainingBalance), \\\"transfer remaining funds failed\\\");\\n    s_linkToken = _linkToken;\\n    emit LinkTokenSet(oldLinkToken, _linkToken);\\n  }\\n\\n  /*\\n   * @notice gets the LINK token contract used for paying oracles\\n   * @return linkToken the address of the LINK token contract\\n   */\\n  function getLinkToken()\\n    external\\n    view\\n    returns(LinkTokenInterface linkToken)\\n  {\\n    return s_linkToken;\\n  }\\n\\n  /**\\n   * @notice emitted when billing parameters are set\\n   * @param maximumGasPrice highest gas price for which transmitter will be compensated\\n   * @param reasonableGasPrice transmitter will receive reward for gas prices under this value\\n   * @param microLinkPerEth reimbursement per ETH of gas cost, in 1e-6LINK units\\n   * @param linkGweiPerObservation reward to oracle for contributing an observation to a successfully transmitted report, in 1e-9LINK units\\n   * @param linkGweiPerTransmission reward to transmitter of a successful report, in 1e-9LINK units\\n   */\\n  event BillingSet(\\n    uint32 maximumGasPrice,\\n    uint32 reasonableGasPrice,\\n    uint32 microLinkPerEth,\\n    uint32 linkGweiPerObservation,\\n    uint32 linkGweiPerTransmission\\n  );\\n\\n  function setBillingInternal(\\n    uint32 _maximumGasPrice,\\n    uint32 _reasonableGasPrice,\\n    uint32 _microLinkPerEth,\\n    uint32 _linkGweiPerObservation,\\n    uint32 _linkGweiPerTransmission\\n  )\\n    internal\\n  {\\n    s_billing = Billing(_maximumGasPrice, _reasonableGasPrice, _microLinkPerEth,\\n      _linkGweiPerObservation, _linkGweiPerTransmission);\\n    emit BillingSet(_maximumGasPrice, _reasonableGasPrice, _microLinkPerEth,\\n      _linkGweiPerObservation, _linkGweiPerTransmission);\\n  }\\n\\n  /**\\n   * @notice sets billing parameters\\n   * @param _maximumGasPrice highest gas price for which transmitter will be compensated\\n   * @param _reasonableGasPrice transmitter will receive reward for gas prices under this value\\n   * @param _microLinkPerEth reimbursement per ETH of gas cost, in 1e-6LINK units\\n   * @param _linkGweiPerObservation reward to oracle for contributing an observation to a successfully transmitted report, in 1e-9LINK units\\n   * @param _linkGweiPerTransmission reward to transmitter of a successful report, in 1e-9LINK units\\n   * @dev access control provided by billingAccessController\\n   */\\n  function setBilling(\\n    uint32 _maximumGasPrice,\\n    uint32 _reasonableGasPrice,\\n    uint32 _microLinkPerEth,\\n    uint32 _linkGweiPerObservation,\\n    uint32 _linkGweiPerTransmission\\n  )\\n    external\\n  {\\n    AccessControllerInterface access = s_billingAccessController;\\n    require(msg.sender == owner || access.hasAccess(msg.sender, msg.data),\\n      \\\"Only owner&billingAdmin can call\\\");\\n    payOracles();\\n    setBillingInternal(_maximumGasPrice, _reasonableGasPrice, _microLinkPerEth,\\n      _linkGweiPerObservation, _linkGweiPerTransmission);\\n  }\\n\\n  /**\\n   * @notice gets billing parameters\\n   * @param maximumGasPrice highest gas price for which transmitter will be compensated\\n   * @param reasonableGasPrice transmitter will receive reward for gas prices under this value\\n   * @param microLinkPerEth reimbursement per ETH of gas cost, in 1e-6LINK units\\n   * @param linkGweiPerObservation reward to oracle for contributing an observation to a successfully transmitted report, in 1e-9LINK units\\n   * @param linkGweiPerTransmission reward to transmitter of a successful report, in 1e-9LINK units\\n   */\\n  function getBilling()\\n    external\\n    view\\n    returns (\\n      uint32 maximumGasPrice,\\n      uint32 reasonableGasPrice,\\n      uint32 microLinkPerEth,\\n      uint32 linkGweiPerObservation,\\n      uint32 linkGweiPerTransmission\\n    )\\n  {\\n    Billing memory billing = s_billing;\\n    return (\\n      billing.maximumGasPrice,\\n      billing.reasonableGasPrice,\\n      billing.microLinkPerEth,\\n      billing.linkGweiPerObservation,\\n      billing.linkGweiPerTransmission\\n    );\\n  }\\n\\n  /**\\n   * @notice emitted when a new access-control contract is set\\n   * @param old the address prior to the current setting\\n   * @param current the address of the new access-control contract\\n   */\\n  event BillingAccessControllerSet(AccessControllerInterface old, AccessControllerInterface current);\\n\\n  function setBillingAccessControllerInternal(AccessControllerInterface _billingAccessController)\\n    internal\\n  {\\n    AccessControllerInterface oldController = s_billingAccessController;\\n    if (_billingAccessController != oldController) {\\n      s_billingAccessController = _billingAccessController;\\n      emit BillingAccessControllerSet(\\n        oldController,\\n        _billingAccessController\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice sets billingAccessController\\n   * @param _billingAccessController new billingAccessController contract address\\n   * @dev only owner can call this\\n   */\\n  function setBillingAccessController(AccessControllerInterface _billingAccessController)\\n    external\\n    onlyOwner\\n  {\\n    setBillingAccessControllerInternal(_billingAccessController);\\n  }\\n\\n  /**\\n   * @notice gets billingAccessController\\n   * @return address of billingAccessController contract\\n   */\\n  function billingAccessController()\\n    external\\n    view\\n    returns (AccessControllerInterface)\\n  {\\n    return s_billingAccessController;\\n  }\\n\\n  /**\\n   * @notice withdraws an oracle's payment from the contract\\n   * @param _transmitter the transmitter address of the oracle\\n   * @dev must be called by oracle's payee address\\n   */\\n  function withdrawPayment(address _transmitter)\\n    external\\n  {\\n    require(msg.sender == s_payees[_transmitter], \\\"Only payee can withdraw\\\");\\n    payOracle(_transmitter);\\n  }\\n\\n  /**\\n   * @notice query an oracle's payment amount\\n   * @param _transmitter the transmitter address of the oracle\\n   */\\n  function owedPayment(address _transmitter)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    Oracle memory oracle = s_oracles[_transmitter];\\n    if (oracle.role == Role.Unset) { return 0; }\\n    Billing memory billing = s_billing;\\n    uint256 linkWeiAmount =\\n      uint256(s_oracleObservationsCounts[oracle.index] - 1) *\\n      uint256(billing.linkGweiPerObservation) *\\n      (1 gwei);\\n    linkWeiAmount += s_gasReimbursementsLinkWei[oracle.index] - 1;\\n    return linkWeiAmount;\\n  }\\n\\n  /**\\n   * @notice emitted when an oracle has been paid LINK\\n   * @param transmitter address from which the oracle sends reports to the transmit method\\n   * @param payee address to which the payment is sent\\n   * @param amount amount of LINK sent\\n   * @param linkToken address of the LINK token contract\\n   */\\n  event OraclePaid(\\n    address indexed transmitter,\\n    address indexed payee,\\n    uint256 amount,\\n    LinkTokenInterface indexed linkToken\\n  );\\n\\n  // payOracle pays out _transmitter's balance to the corresponding payee, and zeros it out\\n  function payOracle(address _transmitter)\\n    internal\\n  {\\n    Oracle memory oracle = s_oracles[_transmitter];\\n    uint256 linkWeiAmount = owedPayment(_transmitter);\\n    if (linkWeiAmount > 0) {\\n      address payee = s_payees[_transmitter];\\n      // Poses no re-entrancy issues, because LINK.transfer does not yield\\n      // control flow.\\n      require(s_linkToken.transfer(payee, linkWeiAmount), \\\"insufficient funds\\\");\\n      s_oracleObservationsCounts[oracle.index] = 1; // \\\"zero\\\" the counts. see var's docstring\\n      s_gasReimbursementsLinkWei[oracle.index] = 1; // \\\"zero\\\" the counts. see var's docstring\\n      emit OraclePaid(_transmitter, payee, linkWeiAmount, s_linkToken);\\n    }\\n  }\\n\\n  // payOracles pays out all transmitters, and zeros out their balances.\\n  //\\n  // It's much more gas-efficient to do this as a single operation, to avoid\\n  // hitting storage too much.\\n  function payOracles()\\n    internal\\n  {\\n    Billing memory billing = s_billing;\\n    LinkTokenInterface linkToken = s_linkToken;\\n    uint16[maxNumOracles] memory observationsCounts = s_oracleObservationsCounts;\\n    uint256[maxNumOracles] memory gasReimbursementsLinkWei =\\n      s_gasReimbursementsLinkWei;\\n    address[] memory transmitters = s_transmitters;\\n    for (uint transmitteridx = 0; transmitteridx < transmitters.length; transmitteridx++) {\\n      uint256 reimbursementAmountLinkWei = gasReimbursementsLinkWei[transmitteridx] - 1;\\n      uint256 obsCount = observationsCounts[transmitteridx] - 1;\\n      uint256 linkWeiAmount =\\n        obsCount * uint256(billing.linkGweiPerObservation) * (1 gwei) + reimbursementAmountLinkWei;\\n      if (linkWeiAmount > 0) {\\n          address payee = s_payees[transmitters[transmitteridx]];\\n          // Poses no re-entrancy issues, because LINK.transfer does not yield\\n          // control flow.\\n          require(linkToken.transfer(payee, linkWeiAmount), \\\"insufficient funds\\\");\\n          observationsCounts[transmitteridx] = 1;       // \\\"zero\\\" the counts.\\n          gasReimbursementsLinkWei[transmitteridx] = 1; // \\\"zero\\\" the counts.\\n          emit OraclePaid(transmitters[transmitteridx], payee, linkWeiAmount, linkToken);\\n        }\\n    }\\n    // \\\"Zero\\\" the accounting storage variables\\n    s_oracleObservationsCounts = observationsCounts;\\n    s_gasReimbursementsLinkWei = gasReimbursementsLinkWei;\\n  }\\n\\n  function oracleRewards(\\n    bytes memory observers,\\n    uint16[maxNumOracles] memory observations\\n  )\\n    internal\\n    pure\\n    returns (uint16[maxNumOracles] memory)\\n  {\\n    // reward each observer-participant with the observer reward\\n    for (uint obsIdx = 0; obsIdx < observers.length; obsIdx++) {\\n      uint8 observer = uint8(observers[obsIdx]);\\n      observations[observer] = saturatingAddUint16(observations[observer], 1);\\n    }\\n    return observations;\\n  }\\n\\n  // This value needs to change if maxNumOracles is increased, or the accounting\\n  // calculations at the bottom of reimburseAndRewardOracles change.\\n  //\\n  // To recalculate it, run the profiler as described in\\n  // ../../profile/README.md, and add up the gas-usage values reported for the\\n  // lines in reimburseAndRewardOracles following the \\\"gasLeft = gasleft()\\\"\\n  // line. E.g., you will see output like this:\\n  //\\n  //      7        uint256 gasLeft = gasleft();\\n  //     29        uint256 gasCostEthWei = transmitterGasCostEthWei(\\n  //      9          uint256(initialGas),\\n  //      3          gasPrice,\\n  //      3          callDataGasCost,\\n  //      3          gasLeft\\n  //      .\\n  //      .\\n  //      .\\n  //     59        uint256 gasCostLinkWei = (gasCostEthWei * billing.microLinkPerEth)/ 1e6;\\n  //      .\\n  //      .\\n  //      .\\n  //   5047        s_gasReimbursementsLinkWei[txOracle.index] =\\n  //    856          s_gasReimbursementsLinkWei[txOracle.index] + gasCostLinkWei +\\n  //     26          uint256(billing.linkGweiPerTransmission) * (1 gwei);\\n  //\\n  // If those were the only lines to be accounted for, you would add up\\n  // 29+9+3+3+3+59+5047+856+26=6035.\\n  uint256 internal constant accountingGasCost = 6035;\\n\\n  // Uncomment the following declaration to compute the remaining gas cost after\\n  // above gasleft(). (This must exist in a base class to OffchainAggregator, so\\n  // it can't go in TestOffchainAggregator.)\\n  //\\n  // uint256 public gasUsedInAccounting;\\n\\n  // Gas price at which the transmitter should be reimbursed, in ETH-gwei/gas\\n  function impliedGasPrice(\\n    uint256 txGasPrice,         // ETH-gwei/gas units\\n    uint256 reasonableGasPrice, // ETH-gwei/gas units\\n    uint256 maximumGasPrice     // ETH-gwei/gas units\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    // Reward the transmitter for choosing an efficient gas price: if they manage\\n    // to come in lower than considered reasonable, give them half the savings.\\n    //\\n    // The following calculations are all in units of gwei/gas, i.e. 1e-9ETH/gas\\n    uint256 gasPrice = txGasPrice;\\n    if (txGasPrice < reasonableGasPrice) {\\n      // Give transmitter half the savings for coming in under the reasonable gas price\\n      gasPrice += (reasonableGasPrice - txGasPrice) / 2;\\n    }\\n    // Don't reimburse a gas price higher than maximumGasPrice\\n    return min(gasPrice, maximumGasPrice);\\n  }\\n\\n  // gas reimbursement due the transmitter, in ETH-wei\\n  //\\n  // If this function is changed, accountingGasCost needs to change, too. See\\n  // its docstring\\n  function transmitterGasCostEthWei(\\n    uint256 initialGas,\\n    uint256 gasPrice, // ETH-gwei/gas units\\n    uint256 callDataCost, // gas units\\n    uint256 gasLeft\\n  )\\n    internal\\n    pure\\n    returns (uint128 gasCostEthWei)\\n  {\\n    require(initialGas >= gasLeft, \\\"gasLeft cannot exceed initialGas\\\");\\n    uint256 gasUsed = // gas units\\n      initialGas - gasLeft + // observed gas usage\\n      callDataCost + accountingGasCost; // estimated gas usage\\n    // gasUsed is in gas units, gasPrice is in ETH-gwei/gas units; convert to ETH-wei\\n    uint256 fullGasCostEthWei = gasUsed * gasPrice * (1 gwei);\\n    assert(fullGasCostEthWei < maxUint128); // the entire ETH supply fits in a uint128...\\n    return uint128(fullGasCostEthWei);\\n  }\\n\\n  /**\\n   * @notice withdraw any available funds left in the contract, up to _amount, after accounting for the funds due to participants in past reports\\n   * @param _recipient address to send funds to\\n   * @param _amount maximum amount to withdraw, denominated in LINK-wei.\\n   * @dev access control provided by billingAccessController\\n   */\\n  function withdrawFunds(address _recipient, uint256 _amount)\\n    external\\n  {\\n    require(msg.sender == owner || s_billingAccessController.hasAccess(msg.sender, msg.data),\\n      \\\"Only owner&billingAdmin can call\\\");\\n    uint256 linkDue = totalLINKDue();\\n    uint256 linkBalance = s_linkToken.balanceOf(address(this));\\n    require(linkBalance >= linkDue, \\\"insufficient balance\\\");\\n    require(s_linkToken.transfer(_recipient, min(linkBalance - linkDue, _amount)), \\\"insufficient funds\\\");\\n  }\\n\\n  // Total LINK due to participants in past reports.\\n  function totalLINKDue()\\n    internal\\n    view\\n    returns (uint256 linkDue)\\n  {\\n    // Argument for overflow safety: We do all computations in\\n    // uint256s. The inputs to linkDue are:\\n    // - the <= 31 observation rewards each of which has less than\\n    //   64 bits (32 bits for billing.linkGweiPerObservation, 32 bits\\n    //   for wei/gwei conversion). Hence 69 bits are sufficient for this part.\\n    // - the <= 31 gas reimbursements, each of which consists of at most 166\\n    //   bits (see s_gasReimbursementsLinkWei docstring). Hence 171 bits are\\n    //   sufficient for this part\\n    // In total, 172 bits are enough.\\n    uint16[maxNumOracles] memory observationCounts = s_oracleObservationsCounts;\\n    for (uint i = 0; i < maxNumOracles; i++) {\\n      linkDue += observationCounts[i] - 1; // Stored value is one greater than actual value\\n    }\\n    Billing memory billing = s_billing;\\n    // Convert linkGweiPerObservation to uint256, or this overflows!\\n    linkDue *= uint256(billing.linkGweiPerObservation) * (1 gwei);\\n    address[] memory transmitters = s_transmitters;\\n    uint256[maxNumOracles] memory gasReimbursementsLinkWei =\\n      s_gasReimbursementsLinkWei;\\n    for (uint i = 0; i < transmitters.length; i++) {\\n      linkDue += uint256(gasReimbursementsLinkWei[i]-1); // Stored value is one greater than actual value\\n    }\\n  }\\n\\n  /**\\n   * @notice allows oracles to check that sufficient LINK balance is available\\n   * @return availableBalance LINK available on this contract, after accounting for outstanding obligations. can become negative\\n   */\\n  function linkAvailableForPayment()\\n    external\\n    view\\n    returns (int256 availableBalance)\\n  {\\n    // there are at most one billion LINK, so this cast is safe\\n    int256 balance = int256(s_linkToken.balanceOf(address(this)));\\n    // according to the argument in the definition of totalLINKDue,\\n    // totalLINKDue is never greater than 2**172, so this cast is safe\\n    int256 due = int256(totalLINKDue());\\n    // safe from overflow according to above sizes\\n    return int256(balance) - int256(due);\\n  }\\n\\n  /**\\n   * @notice number of observations oracle is due to be reimbursed for\\n   * @param _signerOrTransmitter address used by oracle for signing or transmitting reports\\n   */\\n  function oracleObservationCount(address _signerOrTransmitter)\\n    external\\n    view\\n    returns (uint16)\\n  {\\n    Oracle memory oracle = s_oracles[_signerOrTransmitter];\\n    if (oracle.role == Role.Unset) { return 0; }\\n    return s_oracleObservationsCounts[oracle.index] - 1;\\n  }\\n\\n\\n  function reimburseAndRewardOracles(\\n    uint32 initialGas,\\n    bytes memory observers\\n  )\\n    internal\\n  {\\n    Oracle memory txOracle = s_oracles[msg.sender];\\n    Billing memory billing = s_billing;\\n    // Reward oracles for providing observations. Oracles are not rewarded\\n    // for providing signatures, because signing is essentially free.\\n    s_oracleObservationsCounts =\\n      oracleRewards(observers, s_oracleObservationsCounts);\\n    // Reimburse transmitter of the report for gas usage\\n    require(txOracle.role == Role.Transmitter,\\n      \\\"sent by undesignated transmitter\\\"\\n    );\\n    uint256 gasPrice = impliedGasPrice(\\n      tx.gasprice / (1 gwei), // convert to ETH-gwei units\\n      billing.reasonableGasPrice,\\n      billing.maximumGasPrice\\n    );\\n    // The following is only an upper bound, as it ignores the cheaper cost for\\n    // 0 bytes. Safe from overflow, because calldata just isn't that long.\\n    uint256 callDataGasCost = 16 * msg.data.length;\\n    // If any changes are made to subsequent calculations, accountingGasCost\\n    // needs to change, too.\\n    uint256 gasLeft = gasleft();\\n    uint256 gasCostEthWei = transmitterGasCostEthWei(\\n      uint256(initialGas),\\n      gasPrice,\\n      callDataGasCost,\\n      gasLeft\\n    );\\n\\n    // microLinkPerEth is 1e-6LINK/ETH units, gasCostEthWei is 1e-18ETH units\\n    // (ETH-wei), product is 1e-24LINK-wei units, dividing by 1e6 gives\\n    // 1e-18LINK units, i.e. LINK-wei units\\n    // Safe from over/underflow, since all components are non-negative,\\n    // gasCostEthWei will always fit into uint128 and microLinkPerEth is a\\n    // uint32 (128+32 < 256!).\\n    uint256 gasCostLinkWei = (gasCostEthWei * billing.microLinkPerEth)/ 1e6;\\n\\n    // Safe from overflow, because gasCostLinkWei < 2**160 and\\n    // billing.linkGweiPerTransmission * (1 gwei) < 2**64 and we increment\\n    // s_gasReimbursementsLinkWei[txOracle.index] at most 2**40 times.\\n    s_gasReimbursementsLinkWei[txOracle.index] =\\n      s_gasReimbursementsLinkWei[txOracle.index] + gasCostLinkWei +\\n      uint256(billing.linkGweiPerTransmission) * (1 gwei); // convert from linkGwei to linkWei\\n\\n    // Uncomment next line to compute the remaining gas cost after above gasleft().\\n    // See OffchainAggregatorBilling.accountingGasCost docstring for more information.\\n    //\\n    // gasUsedInAccounting = gasLeft - gasleft();\\n  }\\n\\n  /*\\n   * Payee management\\n   */\\n\\n  /**\\n   * @notice emitted when a transfer of an oracle's payee address has been initiated\\n   * @param transmitter address from which the oracle sends reports to the transmit method\\n   * @param current the payeee address for the oracle, prior to this setting\\n   * @param proposed the proposed new payee address for the oracle\\n   */\\n  event PayeeshipTransferRequested(\\n    address indexed transmitter,\\n    address indexed current,\\n    address indexed proposed\\n  );\\n\\n  /**\\n   * @notice emitted when a transfer of an oracle's payee address has been completed\\n   * @param transmitter address from which the oracle sends reports to the transmit method\\n   * @param current the payeee address for the oracle, prior to this setting\\n   */\\n  event PayeeshipTransferred(\\n    address indexed transmitter,\\n    address indexed previous,\\n    address indexed current\\n  );\\n\\n  /**\\n   * @notice sets the payees for transmitting addresses\\n   * @param _transmitters addresses oracles use to transmit the reports\\n   * @param _payees addresses of payees corresponding to list of transmitters\\n   * @dev must be called by owner\\n   * @dev cannot be used to change payee addresses, only to initially populate them\\n   */\\n  function setPayees(\\n    address[] calldata _transmitters,\\n    address[] calldata _payees\\n  )\\n    external\\n    onlyOwner()\\n  {\\n    require(_transmitters.length == _payees.length, \\\"transmitters.size != payees.size\\\");\\n\\n    for (uint i = 0; i < _transmitters.length; i++) {\\n      address transmitter = _transmitters[i];\\n      address payee = _payees[i];\\n      address currentPayee = s_payees[transmitter];\\n      bool zeroedOut = currentPayee == address(0);\\n      require(zeroedOut || currentPayee == payee, \\\"payee already set\\\");\\n      s_payees[transmitter] = payee;\\n\\n      if (currentPayee != payee) {\\n        emit PayeeshipTransferred(transmitter, currentPayee, payee);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice first step of payeeship transfer (safe transfer pattern)\\n   * @param _transmitter transmitter address of oracle whose payee is changing\\n   * @param _proposed new payee address\\n   * @dev can only be called by payee address\\n   */\\n  function transferPayeeship(\\n    address _transmitter,\\n    address _proposed\\n  )\\n    external\\n  {\\n      require(msg.sender == s_payees[_transmitter], \\\"only current payee can update\\\");\\n      require(msg.sender != _proposed, \\\"cannot transfer to self\\\");\\n\\n      address previousProposed = s_proposedPayees[_transmitter];\\n      s_proposedPayees[_transmitter] = _proposed;\\n\\n      if (previousProposed != _proposed) {\\n        emit PayeeshipTransferRequested(_transmitter, msg.sender, _proposed);\\n      }\\n  }\\n\\n  /**\\n   * @notice second step of payeeship transfer (safe transfer pattern)\\n   * @param _transmitter transmitter address of oracle whose payee is changing\\n   * @dev can only be called by proposed new payee address\\n   */\\n  function acceptPayeeship(\\n    address _transmitter\\n  )\\n    external\\n  {\\n    require(msg.sender == s_proposedPayees[_transmitter], \\\"only proposed payees can accept\\\");\\n\\n    address currentPayee = s_payees[_transmitter];\\n    s_payees[_transmitter] = msg.sender;\\n    s_proposedPayees[_transmitter] = address(0);\\n\\n    emit PayeeshipTransferred(_transmitter, currentPayee, msg.sender);\\n  }\\n\\n  /*\\n   * Helper functions\\n   */\\n\\n  function saturatingAddUint16(uint16 _x, uint16 _y)\\n    internal\\n    pure\\n    returns (uint16)\\n  {\\n    return uint16(min(uint256(_x)+uint256(_y), maxUint16));\\n  }\\n\\n  function min(uint256 a, uint256 b)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    if (a < b) { return a; }\\n    return b;\\n  }\\n}\\n\"\r\n    },\r\n    \"contract/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title The Owned contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract Owned {\\n\\n  address payable public owner;\\n  address private pendingOwner;\\n\\n  event OwnershipTransferRequested(\\n    address indexed from,\\n    address indexed to\\n  );\\n  event OwnershipTransferred(\\n    address indexed from,\\n    address indexed to\\n  );\\n\\n  constructor() {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address _to)\\n    external\\n    onlyOwner()\\n  {\\n    pendingOwner = _to;\\n\\n    emit OwnershipTransferRequested(owner, _to);\\n  }\\n\\n  /**\\n   * @dev Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership()\\n    external\\n  {\\n    require(msg.sender == pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = owner;\\n    owner = msg.sender;\\n    pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @dev Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"Only callable by owner\\\");\\n    _;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contract/SimpleReadAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./SimpleWriteAccessController.sol\\\";\\n\\n/**\\n * @title SimpleReadAccessController\\n * @notice Gives access to:\\n * - any externally owned account (note that offchain actors can always read\\n * any contract storage regardless of onchain access control measures, so this\\n * does not weaken the access control while improving usability)\\n * - accounts explicitly added to an access list\\n * @dev SimpleReadAccessController is not suitable for access controlling writes\\n * since it grants any externally owned account access! See\\n * SimpleWriteAccessController for that.\\n */\\ncontract SimpleReadAccessController is SimpleWriteAccessController {\\n\\n  /**\\n   * @notice Returns the access of an address\\n   * @param _user The address to query\\n   */\\n  function hasAccess(\\n    address _user,\\n    bytes memory _calldata\\n  )\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return super.hasAccess(_user, _calldata) || _user == tx.origin;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contract/SimpleWriteAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./AccessControllerInterface.sol\\\";\\n\\n/**\\n * @title SimpleWriteAccessController\\n * @notice Gives access to accounts explicitly added to an access list by the\\n * controller's owner.\\n * @dev does not make any special permissions for externally, see\\n * SimpleReadAccessController for that.\\n */\\ncontract SimpleWriteAccessController is AccessControllerInterface, Owned {\\n\\n  bool public checkEnabled;\\n  mapping(address => bool) internal accessList;\\n\\n  event AddedAccess(address user);\\n  event RemovedAccess(address user);\\n  event CheckAccessEnabled();\\n  event CheckAccessDisabled();\\n\\n  constructor()\\n  {\\n    checkEnabled = true;\\n  }\\n\\n  /**\\n   * @notice Returns the access of an address\\n   * @param _user The address to query\\n   */\\n  function hasAccess(\\n    address _user,\\n    bytes memory\\n  )\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return accessList[_user] || !checkEnabled;\\n  }\\n\\n  /**\\n   * @notice Adds an address to the access list\\n   * @param _user The address to add\\n   */\\n  function addAccess(address _user) external onlyOwner() {\\n    addAccessInternal(_user);\\n  }\\n\\n  function addAccessInternal(address _user) internal {\\n    if (!accessList[_user]) {\\n      accessList[_user] = true;\\n      emit AddedAccess(_user);\\n    }\\n  }\\n\\n  /**\\n   * @notice Removes an address from the access list\\n   * @param _user The address to remove\\n   */\\n  function removeAccess(address _user)\\n    external\\n    onlyOwner()\\n  {\\n    if (accessList[_user]) {\\n      accessList[_user] = false;\\n\\n      emit RemovedAccess(_user);\\n    }\\n  }\\n\\n  /**\\n   * @notice makes the access check enforced\\n   */\\n  function enableAccessCheck()\\n    external\\n    onlyOwner()\\n  {\\n    if (!checkEnabled) {\\n      checkEnabled = true;\\n\\n      emit CheckAccessEnabled();\\n    }\\n  }\\n\\n  /**\\n   * @notice makes the access check unenforced\\n   */\\n  function disableAccessCheck()\\n    external\\n    onlyOwner()\\n  {\\n    if (checkEnabled) {\\n      checkEnabled = false;\\n\\n      emit CheckAccessDisabled();\\n    }\\n  }\\n\\n  /**\\n   * @dev reverts if the caller does not have access\\n   */\\n  modifier checkAccess() {\\n    require(hasAccess(msg.sender, msg.data), \\\"No access\\\");\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contract/TypeAndVersionInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nabstract contract TypeAndVersionInterface{\\n  function typeAndVersion()\\n    external\\n    pure\\n    virtual\\n    returns (string memory);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {}\r\n  }\r\n}}",
      "abi": "[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_maximumGasPrice\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_reasonableGasPrice\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_microLinkPerEth\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_linkGweiPerObservation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_linkGweiPerTransmission\",\"type\":\"uint32\"},{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"int192\",\"name\":\"_minAnswer\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"_maxAnswer\",\"type\":\"int192\"},{\"internalType\":\"contract AccessControllerInterface\",\"name\":\"_billingAccessController\",\"type\":\"address\"},{\"internalType\":\"contract AccessControllerInterface\",\"name\":\"_requesterAccessController\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AddedAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract AccessControllerInterface\",\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract AccessControllerInterface\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"BillingAccessControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maximumGasPrice\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"reasonableGasPrice\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"microLinkPerEth\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"linkGweiPerObservation\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"linkGweiPerTransmission\",\"type\":\"uint32\"}],\"name\":\"BillingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CheckAccessDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CheckAccessEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"threshold\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"encodedConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encoded\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract LinkTokenInterface\",\"name\":\"_oldLinkToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract LinkTokenInterface\",\"name\":\"_newLinkToken\",\"type\":\"address\"}],\"name\":\"LinkTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"aggregatorRoundId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"answer\",\"type\":\"int192\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int192[]\",\"name\":\"observations\",\"type\":\"int192[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"observers\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rawReportContext\",\"type\":\"bytes32\"}],\"name\":\"NewTransmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract LinkTokenInterface\",\"name\":\"linkToken\",\"type\":\"address\"}],\"name\":\"OraclePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposed\",\"type\":\"address\"}],\"name\":\"PayeeshipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"PayeeshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RemovedAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract AccessControllerInterface\",\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract AccessControllerInterface\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"RequesterAccessControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"configDigest\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"}],\"name\":\"RoundRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract AggregatorValidatorInterface\",\"name\":\"previousValidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousGasLimit\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"contract AggregatorValidatorInterface\",\"name\":\"currentValidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"currentGasLimit\",\"type\":\"uint32\"}],\"name\":\"ValidatorConfigSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transmitter\",\"type\":\"address\"}],\"name\":\"acceptPayeeship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"billingAccessController\",\"outputs\":[{\"internalType\":\"contract AccessControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAccessCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAccessCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBilling\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"maximumGasPrice\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reasonableGasPrice\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"microLinkPerEth\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"linkGweiPerObservation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"linkGweiPerTransmission\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkToken\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"linkToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes16\",\"name\":\"configDigest\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTransmissionDetails\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"configDigest\",\"type\":\"bytes16\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"},{\"internalType\":\"int192\",\"name\":\"latestAnswer\",\"type\":\"int192\"},{\"internalType\":\"uint64\",\"name\":\"latestTimestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkAvailableForPayment\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAnswer\",\"outputs\":[{\"internalType\":\"int192\",\"name\":\"\",\"type\":\"int192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAnswer\",\"outputs\":[{\"internalType\":\"int192\",\"name\":\"\",\"type\":\"int192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signerOrTransmitter\",\"type\":\"address\"}],\"name\":\"oracleObservationCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transmitter\",\"type\":\"address\"}],\"name\":\"owedPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestNewRound\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requesterAccessController\",\"outputs\":[{\"internalType\":\"contract AccessControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_maximumGasPrice\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_reasonableGasPrice\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_microLinkPerEth\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_linkGweiPerObservation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_linkGweiPerTransmission\",\"type\":\"uint32\"}],\"name\":\"setBilling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AccessControllerInterface\",\"name\":\"_billingAccessController\",\"type\":\"address\"}],\"name\":\"setBillingAccessController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_threshold\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"_encodedConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_encoded\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setLinkToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_payees\",\"type\":\"address[]\"}],\"name\":\"setPayees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AccessControllerInterface\",\"name\":\"_requesterAccessController\",\"type\":\"address\"}],\"name\":\"setRequesterAccessController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorValidatorInterface\",\"name\":\"_newValidator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_newGasLimit\",\"type\":\"uint32\"}],\"name\":\"setValidatorConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transmitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proposed\",\"type\":\"address\"}],\"name\":\"transferPayeeship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"_rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorConfig\",\"outputs\":[{\"internalType\":\"contract AggregatorValidatorInterface\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transmitter\",\"type\":\"address\"}],\"name\":\"withdrawPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "contract_name": "AccessControlledOffchainAggregator",
      "compiler_version": "v0.7.6+commit.7338295f",
      "optimization_used": "1",
      "runs": "200",
      "constructor_arguments": "",
      "evm_version": "istanbul",
      "library": "",
      "license_type": "MIT",
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913": {
      "address": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
      "has_source_code": true,
      "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/lnguyen/circle/centre-tokens/contracts/v1/FiatTokenProxy.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n *\\n * Copyright (c) 2018-2020 CENTRE SECZ\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity 0.6.12;\\n\\nimport {\\n    AdminUpgradeabilityProxy\\n} from \\\"../upgradeability/AdminUpgradeabilityProxy.sol\\\";\\n\\n/**\\n * @title FiatTokenProxy\\n * @dev This contract proxies FiatToken calls and enables FiatToken upgrades\\n */\\ncontract FiatTokenProxy is AdminUpgradeabilityProxy {\\n    constructor(address implementationContract)\\n        public\\n        AdminUpgradeabilityProxy(implementationContract)\\n    {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/lnguyen/circle/centre-tokens/contracts/upgradeability/UpgradeabilityProxy.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n *\\n * Copyright (c) 2018 zOS Global Limited.\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity 0.6.12;\\n\\nimport { Proxy } from \\\"./Proxy.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @notice This contract implements a proxy that allows to change the\\n * implementation address to which it will delegate.\\n * Such a change is called an implementation upgrade.\\n * @dev Forked from https://github.com/zeppelinos/zos-lib/blob/8a16ef3ad17ec7430e3a9d2b5e3f39b8204f8c8d/contracts/upgradeability/UpgradeabilityProxy.sol\\n * Modifications:\\n * 1. Reformat, conform to Solidity 0.6 syntax, and add error messages (5/13/20)\\n * 2. Use Address utility library from the latest OpenZeppelin (5/13/20)\\n */\\ncontract UpgradeabilityProxy is Proxy {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     * @param implementation Address of the new implementation.\\n     */\\n    event Upgraded(address implementation);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"org.zeppelinos.proxy.implementation\\\", and is\\n     * validated in the constructor.\\n     */\\n    bytes32\\n        private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\\n\\n    /**\\n     * @dev Contract constructor.\\n     * @param implementationContract Address of the initial implementation.\\n     */\\n    constructor(address implementationContract) public {\\n        assert(\\n            IMPLEMENTATION_SLOT ==\\n                keccak256(\\\"org.zeppelinos.proxy.implementation\\\")\\n        );\\n\\n        _setImplementation(implementationContract);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     * @return impl Address of the current implementation\\n     */\\n    function _implementation() internal override view returns (address impl) {\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Upgrades the proxy to a new implementation.\\n     * @param newImplementation Address of the new implementation.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation address of the proxy.\\n     * @param newImplementation Address of the new implementation.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(\\n            Address.isContract(newImplementation),\\n            \\\"Cannot set a proxy implementation to a non-contract address\\\"\\n        );\\n\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\n\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/lnguyen/circle/centre-tokens/contracts/upgradeability/Proxy.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n *\\n * Copyright (c) 2018 zOS Global Limited.\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @notice Implements delegation of calls to other contracts, with proper\\n * forwarding of return values and bubbling of failures.\\n * It defines a fallback function that delegates all calls to the address\\n * returned by the abstract _implementation() internal function.\\n * @dev Forked from https://github.com/zeppelinos/zos-lib/blob/8a16ef3ad17ec7430e3a9d2b5e3f39b8204f8c8d/contracts/upgradeability/Proxy.sol\\n * Modifications:\\n * 1. Reformat and conform to Solidity 0.6 syntax (5/13/20)\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Fallback function.\\n     * Implemented entirely in `_fallback`.\\n     */\\n    fallback() external payable {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @return The Address of the implementation.\\n     */\\n    function _implementation() internal virtual view returns (address);\\n\\n    /**\\n     * @dev Delegates execution to an implementation contract.\\n     * This is a low level function that doesn't return to its internal call site.\\n     * It will return to the external caller whatever the implementation returns.\\n     * @param implementation Address to delegate.\\n     */\\n    function _delegate(address implementation) internal {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(\\n                gas(),\\n                implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n                // delegatecall returns 0 on error.\\n                case 0 {\\n                    revert(0, returndatasize())\\n                }\\n                default {\\n                    return(0, returndatasize())\\n                }\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that is run as the first thing in the fallback function.\\n     * Can be redefined in derived contracts to add functionality.\\n     * Redefinitions must call super._willFallback().\\n     */\\n    function _willFallback() internal virtual {}\\n\\n    /**\\n     * @dev fallback implementation.\\n     * Extracted to enable manual triggering.\\n     */\\n    function _fallback() internal {\\n        _willFallback();\\n        _delegate(_implementation());\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/lnguyen/circle/centre-tokens/contracts/upgradeability/AdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n *\\n * Copyright (c) 2018 zOS Global Limited.\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity 0.6.12;\\n\\nimport { UpgradeabilityProxy } from \\\"./UpgradeabilityProxy.sol\\\";\\n\\n/**\\n * @notice This contract combines an upgradeability proxy with an authorization\\n * mechanism for administrative tasks.\\n * @dev Forked from https://github.com/zeppelinos/zos-lib/blob/8a16ef3ad17ec7430e3a9d2b5e3f39b8204f8c8d/contracts/upgradeability/AdminUpgradeabilityProxy.sol\\n * Modifications:\\n * 1. Reformat, conform to Solidity 0.6 syntax, and add error messages (5/13/20)\\n * 2. Remove ifAdmin modifier from admin() and implementation() (5/13/20)\\n */\\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\\n    /**\\n     * @dev Emitted when the administration has been transferred.\\n     * @param previousAdmin Address of the previous admin.\\n     * @param newAdmin Address of the new admin.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"org.zeppelinos.proxy.admin\\\", and is\\n     * validated in the constructor.\\n     */\\n    bytes32\\n        private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\\n\\n    /**\\n     * @dev Modifier to check whether the `msg.sender` is the admin.\\n     * If it is, it will run the function. Otherwise, it will delegate the call\\n     * to the implementation.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _admin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Contract constructor.\\n     * It sets the `msg.sender` as the proxy administrator.\\n     * @param implementationContract address of the initial implementation.\\n     */\\n    constructor(address implementationContract)\\n        public\\n        UpgradeabilityProxy(implementationContract)\\n    {\\n        assert(ADMIN_SLOT == keccak256(\\\"org.zeppelinos.proxy.admin\\\"));\\n\\n        _setAdmin(msg.sender);\\n    }\\n\\n    /**\\n     * @return The address of the proxy admin.\\n     */\\n    function admin() external view returns (address) {\\n        return _admin();\\n    }\\n\\n    /**\\n     * @return The address of the implementation.\\n     */\\n    function implementation() external view returns (address) {\\n        return _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     * Only the current admin can call this function.\\n     * @param newAdmin Address to transfer proxy administration to.\\n     */\\n    function changeAdmin(address newAdmin) external ifAdmin {\\n        require(\\n            newAdmin != address(0),\\n            \\\"Cannot change the admin of a proxy to the zero address\\\"\\n        );\\n        emit AdminChanged(_admin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the backing implementation of the proxy.\\n     * Only the admin can call this function.\\n     * @param newImplementation Address of the new implementation.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeTo(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Upgrade the backing implementation of the proxy and call a function\\n     * on the new implementation.\\n     * This is useful to initialize the proxied contract.\\n     * @param newImplementation Address of the new implementation.\\n     * @param data Data to send as msg.data in the low level call.\\n     * It should include the signature and the parameters of the function to be\\n     * called, as described in\\n     * https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector-and-argument-encoding.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data)\\n        external\\n        payable\\n        ifAdmin\\n    {\\n        _upgradeTo(newImplementation);\\n        // prettier-ignore\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success,) = address(this).call{value: msg.value}(data);\\n        // solhint-disable-next-line reason-string\\n        require(success);\\n    }\\n\\n    /**\\n     * @return adm The admin slot.\\n     */\\n    function _admin() internal view returns (address adm) {\\n        bytes32 slot = ADMIN_SLOT;\\n\\n        assembly {\\n            adm := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the address of the proxy admin.\\n     * @param newAdmin Address of the new proxy admin.\\n     */\\n    function _setAdmin(address newAdmin) internal {\\n        bytes32 slot = ADMIN_SLOT;\\n\\n        assembly {\\n            sstore(slot, newAdmin)\\n        }\\n    }\\n\\n    /**\\n     * @dev Only fall back when the sender is not the admin.\\n     */\\n    function _willFallback() internal override {\\n        require(\\n            msg.sender != _admin(),\\n            \\\"Cannot call fallback function from the proxy admin\\\"\\n        );\\n        super._willFallback();\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
      "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementationContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
      "contract_name": "FiatTokenProxy",
      "compiler_version": "v0.6.12+commit.27d51765",
      "optimization_used": "1",
      "runs": "10000000",
      "constructor_arguments": "0000000000000000000000006d0c9a70d85e42ba8b76dc06620d4e988ec8d0c1",
      "evm_version": "istanbul",
      "library": "",
      "license_type": "",
      "proxy": "1",
      "implementation": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "bytecode": null
    },
    "0x57d2d46fc7ff2a7142d479f2f59e1e3f95447077": {
      "address": "0x57d2d46fc7ff2a7142d479f2f59e1e3f95447077",
      "has_source_code": true,
      "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contract/AccessControlledOffchainAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./OffchainAggregator.sol\\\";\\nimport \\\"./SimpleReadAccessController.sol\\\";\\n\\n/**\\n * @notice Wrapper of OffchainAggregator which checks read access on Aggregator-interface methods\\n */\\ncontract AccessControlledOffchainAggregator is OffchainAggregator, SimpleReadAccessController {\\n\\n  constructor(\\n    uint32 _maximumGasPrice,\\n    uint32 _reasonableGasPrice,\\n    uint32 _microLinkPerEth,\\n    uint32 _linkGweiPerObservation,\\n    uint32 _linkGweiPerTransmission,\\n    LinkTokenInterface _link,\\n    int192 _minAnswer,\\n    int192 _maxAnswer,\\n    AccessControllerInterface _billingAccessController,\\n    AccessControllerInterface _requesterAccessController,\\n    uint8 _decimals,\\n    string memory description\\n  )\\n    OffchainAggregator(\\n      _maximumGasPrice,\\n      _reasonableGasPrice,\\n      _microLinkPerEth,\\n      _linkGweiPerObservation,\\n      _linkGweiPerTransmission,\\n      _link,\\n      _minAnswer,\\n      _maxAnswer,\\n      _billingAccessController,\\n      _requesterAccessController,\\n      _decimals,\\n      description\\n    ) {\\n    }\\n\\n  /*\\n   * Versioning\\n   */\\n\\n  function typeAndVersion()\\n    external\\n    override\\n    pure\\n    virtual\\n    returns (string memory)\\n  {\\n    return \\\"AccessControlledOffchainAggregator 4.0.0\\\";\\n  }\\n\\n\\n  /*\\n   * v2 Aggregator interface\\n   */\\n\\n  /// @inheritdoc OffchainAggregator\\n  function latestAnswer()\\n    public\\n    override\\n    view\\n    checkAccess()\\n    returns (int256)\\n  {\\n    return super.latestAnswer();\\n  }\\n\\n  /// @inheritdoc OffchainAggregator\\n  function latestTimestamp()\\n    public\\n    override\\n    view\\n    checkAccess()\\n    returns (uint256)\\n  {\\n    return super.latestTimestamp();\\n  }\\n\\n  /// @inheritdoc OffchainAggregator\\n  function latestRound()\\n    public\\n    override\\n    view\\n    checkAccess()\\n    returns (uint256)\\n  {\\n    return super.latestRound();\\n  }\\n\\n  /// @inheritdoc OffchainAggregator\\n  function getAnswer(uint256 _roundId)\\n    public\\n    override\\n    view\\n    checkAccess()\\n    returns (int256)\\n  {\\n    return super.getAnswer(_roundId);\\n  }\\n\\n  /// @inheritdoc OffchainAggregator\\n  function getTimestamp(uint256 _roundId)\\n    public\\n    override\\n    view\\n    checkAccess()\\n    returns (uint256)\\n  {\\n    return super.getTimestamp(_roundId);\\n  }\\n\\n  /*\\n   * v3 Aggregator interface\\n   */\\n\\n  /// @inheritdoc OffchainAggregator\\n  function description()\\n    public\\n    override\\n    view\\n    checkAccess()\\n    returns (string memory)\\n  {\\n    return super.description();\\n  }\\n\\n  /// @inheritdoc OffchainAggregator\\n  function getRoundData(uint80 _roundId)\\n    public\\n    override\\n    view\\n    checkAccess()\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return super.getRoundData(_roundId);\\n  }\\n\\n  /// @inheritdoc OffchainAggregator\\n  function latestRoundData()\\n    public\\n    override\\n    view\\n    checkAccess()\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return super.latestRoundData();\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contract/AccessControllerInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AccessControllerInterface {\\n  function hasAccess(address user, bytes calldata data) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contract/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n  function latestTimestamp() external view returns (uint256);\\n  function latestRound() external view returns (uint256);\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    },\r\n    \"contract/AggregatorV2V3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\\n{\\n}\"\r\n    },\r\n    \"contract/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"contract/AggregatorValidatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorValidatorInterface {\\n  function validate(\\n    uint256 previousRoundId,\\n    int256 previousAnswer,\\n    uint256 currentRoundId,\\n    int256 currentAnswer\\n  ) external returns (bool);\\n}\"\r\n    },\r\n    \"contract/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"contract/OffchainAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./AccessControllerInterface.sol\\\";\\nimport \\\"./AggregatorV2V3Interface.sol\\\";\\nimport \\\"./AggregatorValidatorInterface.sol\\\";\\nimport \\\"./LinkTokenInterface.sol\\\";\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./OffchainAggregatorBilling.sol\\\";\\nimport \\\"./TypeAndVersionInterface.sol\\\";\\n\\n/**\\n  * @notice Onchain verification of reports from the offchain reporting protocol\\n\\n  * @dev For details on its operation, see the offchain reporting protocol design\\n  * @dev doc, which refers to this contract as simply the \\\"contract\\\".\\n*/\\ncontract OffchainAggregator is Owned, OffchainAggregatorBilling, AggregatorV2V3Interface, TypeAndVersionInterface {\\n\\n  uint256 constant private maxUint32 = (1 << 32) - 1;\\n\\n  // Storing these fields used on the hot path in a HotVars variable reduces the\\n  // retrieval of all of them to a single SLOAD. If any further fields are\\n  // added, make sure that storage of the struct still takes at most 32 bytes.\\n  struct HotVars {\\n    // Provides 128 bits of security against 2nd pre-image attacks, but only\\n    // 64 bits against collisions. This is acceptable, since a malicious owner has\\n    // easier way of messing up the protocol than to find hash collisions.\\n    bytes16 latestConfigDigest;\\n    uint40 latestEpochAndRound; // 32 most sig bits for epoch, 8 least sig bits for round\\n    // Current bound assumed on number of faulty/dishonest oracles participating\\n    // in the protocol, this value is referred to as f in the design\\n    uint8 threshold;\\n    // Chainlink Aggregators expose a roundId to consumers. The offchain reporting\\n    // protocol does not use this id anywhere. We increment it whenever a new\\n    // transmission is made to provide callers with contiguous ids for successive\\n    // reports.\\n    uint32 latestAggregatorRoundId;\\n  }\\n  HotVars internal s_hotVars;\\n\\n  // Transmission records the median answer from the transmit transaction at\\n  // time timestamp\\n  struct Transmission {\\n    int192 answer; // 192 bits ought to be enough for anyone\\n    uint64 timestamp;\\n  }\\n  mapping(uint32 /* aggregator round ID */ => Transmission) internal s_transmissions;\\n\\n  // incremented each time a new config is posted. This count is incorporated\\n  // into the config digest, to prevent replay attacks.\\n  uint32 internal s_configCount;\\n  uint32 internal s_latestConfigBlockNumber; // makes it easier for offchain systems\\n                                             // to extract config from logs.\\n\\n  // Lowest answer the system is allowed to report in response to transmissions\\n  int192 immutable public minAnswer;\\n  // Highest answer the system is allowed to report in response to transmissions\\n  int192 immutable public maxAnswer;\\n\\n  /*\\n   * @param _maximumGasPrice highest gas price for which transmitter will be compensated\\n   * @param _reasonableGasPrice transmitter will receive reward for gas prices under this value\\n   * @param _microLinkPerEth reimbursement per ETH of gas cost, in 1e-6LINK units\\n   * @param _linkGweiPerObservation reward to oracle for contributing an observation to a successfully transmitted report, in 1e-9LINK units\\n   * @param _linkGweiPerTransmission reward to transmitter of a successful report, in 1e-9LINK units\\n   * @param _link address of the LINK contract\\n   * @param _minAnswer lowest answer the median of a report is allowed to be\\n   * @param _maxAnswer highest answer the median of a report is allowed to be\\n   * @param _billingAccessController access controller for billing admin functions\\n   * @param _requesterAccessController access controller for requesting new rounds\\n   * @param _decimals answers are stored in fixed-point format, with this many digits of precision\\n   * @param _description short human-readable description of observable this contract's answers pertain to\\n   */\\n  constructor(\\n    uint32 _maximumGasPrice,\\n    uint32 _reasonableGasPrice,\\n    uint32 _microLinkPerEth,\\n    uint32 _linkGweiPerObservation,\\n    uint32 _linkGweiPerTransmission,\\n    LinkTokenInterface _link,\\n    int192 _minAnswer,\\n    int192 _maxAnswer,\\n    AccessControllerInterface _billingAccessController,\\n    AccessControllerInterface _requesterAccessController,\\n    uint8 _decimals,\\n    string memory _description\\n  )\\n    OffchainAggregatorBilling(_maximumGasPrice, _reasonableGasPrice, _microLinkPerEth,\\n      _linkGweiPerObservation, _linkGweiPerTransmission, _link,\\n      _billingAccessController\\n    )\\n  {\\n    decimals = _decimals;\\n    s_description = _description;\\n    setRequesterAccessController(_requesterAccessController);\\n    setValidatorConfig(AggregatorValidatorInterface(0x0), 0);\\n    minAnswer = _minAnswer;\\n    maxAnswer = _maxAnswer;\\n  }\\n\\n  /*\\n   * Versioning\\n   */\\n  function typeAndVersion()\\n    external\\n    override\\n    pure\\n    virtual\\n    returns (string memory)\\n  {\\n    return \\\"OffchainAggregator 4.0.0\\\";\\n  }\\n\\n  /*\\n   * Config logic\\n   */\\n\\n  /**\\n   * @notice triggers a new run of the offchain reporting protocol\\n   * @param previousConfigBlockNumber block in which the previous config was set, to simplify historic analysis\\n   * @param configCount ordinal number of this config setting among all config settings over the life of this contract\\n   * @param signers ith element is address ith oracle uses to sign a report\\n   * @param transmitters ith element is address ith oracle uses to transmit a report via the transmit method\\n   * @param threshold maximum number of faulty/dishonest oracles the protocol can tolerate while still working correctly\\n   * @param encodedConfigVersion version of the serialization format used for \\\"encoded\\\" parameter\\n   * @param encoded serialized data used by oracles to configure their offchain operation\\n   */\\n  event ConfigSet(\\n    uint32 previousConfigBlockNumber,\\n    uint64 configCount,\\n    address[] signers,\\n    address[] transmitters,\\n    uint8 threshold,\\n    uint64 encodedConfigVersion,\\n    bytes encoded\\n  );\\n\\n  // Reverts transaction if config args are invalid\\n  modifier checkConfigValid (\\n    uint256 _numSigners, uint256 _numTransmitters, uint256 _threshold\\n  ) {\\n    require(_numSigners <= maxNumOracles, \\\"too many signers\\\");\\n    require(_threshold > 0, \\\"threshold must be positive\\\");\\n    require(\\n      _numSigners == _numTransmitters,\\n      \\\"oracle addresses out of registration\\\"\\n    );\\n    require(_numSigners > 3*_threshold, \\\"faulty-oracle threshold too high\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice sets offchain reporting protocol configuration incl. participating oracles\\n   * @param _signers addresses with which oracles sign the reports\\n   * @param _transmitters addresses oracles use to transmit the reports\\n   * @param _threshold number of faulty oracles the system can tolerate\\n   * @param _encodedConfigVersion version number for offchainEncoding schema\\n   * @param _encoded encoded off-chain oracle configuration\\n   */\\n  function setConfig(\\n    address[] calldata _signers,\\n    address[] calldata _transmitters,\\n    uint8 _threshold,\\n    uint64 _encodedConfigVersion,\\n    bytes calldata _encoded\\n  )\\n    external\\n    checkConfigValid(_signers.length, _transmitters.length, _threshold)\\n    onlyOwner()\\n  {\\n    while (s_signers.length != 0) { // remove any old signer/transmitter addresses\\n      uint lastIdx = s_signers.length - 1;\\n      address signer = s_signers[lastIdx];\\n      address transmitter = s_transmitters[lastIdx];\\n      payOracle(transmitter);\\n      delete s_oracles[signer];\\n      delete s_oracles[transmitter];\\n      s_signers.pop();\\n      s_transmitters.pop();\\n    }\\n\\n    for (uint i = 0; i < _signers.length; i++) { // add new signer/transmitter addresses\\n      require(\\n        s_oracles[_signers[i]].role == Role.Unset,\\n        \\\"repeated signer address\\\"\\n      );\\n      s_oracles[_signers[i]] = Oracle(uint8(i), Role.Signer);\\n      require(s_payees[_transmitters[i]] != address(0), \\\"payee must be set\\\");\\n      require(\\n        s_oracles[_transmitters[i]].role == Role.Unset,\\n        \\\"repeated transmitter address\\\"\\n      );\\n      s_oracles[_transmitters[i]] = Oracle(uint8(i), Role.Transmitter);\\n      s_signers.push(_signers[i]);\\n      s_transmitters.push(_transmitters[i]);\\n    }\\n    s_hotVars.threshold = _threshold;\\n    uint32 previousConfigBlockNumber = s_latestConfigBlockNumber;\\n    s_latestConfigBlockNumber = uint32(block.number);\\n    s_configCount += 1;\\n    uint64 configCount = s_configCount;\\n    {\\n      s_hotVars.latestConfigDigest = configDigestFromConfigData(\\n        address(this),\\n        configCount,\\n        _signers,\\n        _transmitters,\\n        _threshold,\\n        _encodedConfigVersion,\\n        _encoded\\n      );\\n      s_hotVars.latestEpochAndRound = 0;\\n    }\\n    emit ConfigSet(\\n      previousConfigBlockNumber,\\n      configCount,\\n      _signers,\\n      _transmitters,\\n      _threshold,\\n      _encodedConfigVersion,\\n      _encoded\\n    );\\n  }\\n\\n  function configDigestFromConfigData(\\n    address _contractAddress,\\n    uint64 _configCount,\\n    address[] calldata _signers,\\n    address[] calldata _transmitters,\\n    uint8 _threshold,\\n    uint64 _encodedConfigVersion,\\n    bytes calldata _encodedConfig\\n  ) internal pure returns (bytes16) {\\n    return bytes16(keccak256(abi.encode(_contractAddress, _configCount,\\n      _signers, _transmitters, _threshold, _encodedConfigVersion, _encodedConfig\\n    )));\\n  }\\n\\n  /**\\n   * @notice information about current offchain reporting protocol configuration\\n\\n   * @return configCount ordinal number of current config, out of all configs applied to this contract so far\\n   * @return blockNumber block at which this config was set\\n   * @return configDigest domain-separation tag for current config (see configDigestFromConfigData)\\n   */\\n  function latestConfigDetails()\\n    external\\n    view\\n    returns (\\n      uint32 configCount,\\n      uint32 blockNumber,\\n      bytes16 configDigest\\n    )\\n  {\\n    return (s_configCount, s_latestConfigBlockNumber, s_hotVars.latestConfigDigest);\\n  }\\n\\n  /**\\n   * @return list of addresses permitted to transmit reports to this contract\\n\\n   * @dev The list will match the order used to specify the transmitter during setConfig\\n   */\\n  function transmitters()\\n    external\\n    view\\n    returns(address[] memory)\\n  {\\n      return s_transmitters;\\n  }\\n\\n  /*\\n   * On-chain validation logc\\n   */\\n\\n  // Configuration for validator\\n  struct ValidatorConfig {\\n    AggregatorValidatorInterface validator;\\n    uint32 gasLimit;\\n  }\\n  ValidatorConfig private s_validatorConfig;\\n\\n  /**\\n   * @notice indicates that the validator configuration has been set\\n   * @param previousValidator previous validator contract\\n   * @param previousGasLimit previous gas limit for validate calls\\n   * @param currentValidator current validator contract\\n   * @param currentGasLimit current gas limit for validate calls\\n   */\\n  event ValidatorConfigSet(\\n    AggregatorValidatorInterface indexed previousValidator,\\n    uint32 previousGasLimit,\\n    AggregatorValidatorInterface indexed currentValidator,\\n    uint32 currentGasLimit\\n  );\\n\\n  /**\\n   * @notice validator configuration\\n   * @return validator validator contract\\n   * @return gasLimit gas limit for validate calls\\n   */\\n  function validatorConfig()\\n    external\\n    view\\n    returns (AggregatorValidatorInterface validator, uint32 gasLimit)\\n  {\\n    ValidatorConfig memory vc = s_validatorConfig;\\n    return (vc.validator, vc.gasLimit);\\n  }\\n\\n  /**\\n   * @notice sets validator configuration\\n   * @dev set _newValidator to 0x0 to disable validate calls\\n   * @param _newValidator address of the new validator contract\\n   * @param _newGasLimit new gas limit for validate calls\\n   */\\n  function setValidatorConfig(AggregatorValidatorInterface _newValidator, uint32 _newGasLimit)\\n    public\\n    onlyOwner()\\n  {\\n    ValidatorConfig memory previous = s_validatorConfig;\\n\\n    if (previous.validator != _newValidator || previous.gasLimit != _newGasLimit) {\\n      s_validatorConfig = ValidatorConfig({\\n        validator: _newValidator,\\n        gasLimit: _newGasLimit\\n      });\\n\\n      emit ValidatorConfigSet(previous.validator, previous.gasLimit, _newValidator, _newGasLimit);\\n    }\\n  }\\n\\n  function validateAnswer(\\n    uint32 _aggregatorRoundId,\\n    int256 _answer\\n  )\\n    private\\n  {\\n    ValidatorConfig memory vc = s_validatorConfig;\\n\\n    if (address(vc.validator) == address(0)) {\\n      return;\\n    }\\n\\n    uint32 prevAggregatorRoundId = _aggregatorRoundId - 1;\\n    int256 prevAggregatorRoundAnswer = s_transmissions[prevAggregatorRoundId].answer;\\n    require(\\n      callWithExactGasEvenIfTargetIsNoContract(\\n        vc.gasLimit,\\n        address(vc.validator),\\n        abi.encodeWithSignature(\\n          \\\"validate(uint256,int256,uint256,int256)\\\",\\n          uint256(prevAggregatorRoundId),\\n          prevAggregatorRoundAnswer,\\n          uint256(_aggregatorRoundId),\\n          _answer\\n        )\\n      ),\\n      \\\"insufficient gas\\\"\\n    );\\n  }\\n\\n  uint256 private constant CALL_WITH_EXACT_GAS_CUSHION = 5_000;\\n\\n  /**\\n   * @dev calls target address with exactly gasAmount gas and data as calldata\\n   * or reverts if at least gasAmount gas is not available.\\n   */\\n  function callWithExactGasEvenIfTargetIsNoContract(\\n    uint256 _gasAmount,\\n    address _target,\\n    bytes memory _data\\n  )\\n    private\\n    returns (bool sufficientGas)\\n  {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let g := gas()\\n      // Compute g -= CALL_WITH_EXACT_GAS_CUSHION and check for underflow. We\\n      // need the cushion since the logic following the above call to gas also\\n      // costs gas which we cannot account for exactly. So cushion is a\\n      // conservative upper bound for the cost of this logic.\\n      if iszero(lt(g, CALL_WITH_EXACT_GAS_CUSHION)) {\\n        g := sub(g, CALL_WITH_EXACT_GAS_CUSHION)\\n        // If g - g//64 <= _gasAmount, we don't have enough gas. (We subtract g//64\\n        // because of EIP-150.)\\n        if gt(sub(g, div(g, 64)), _gasAmount) {\\n          // Call and ignore success/return data. Note that we did not check\\n          // whether a contract actually exists at the _target address.\\n          pop(call(_gasAmount, _target, 0, add(_data, 0x20), mload(_data), 0, 0))\\n          sufficientGas := true\\n        }\\n      }\\n    }\\n  }\\n\\n  /*\\n   * requestNewRound logic\\n   */\\n\\n  AccessControllerInterface internal s_requesterAccessController;\\n\\n  /**\\n   * @notice emitted when a new requester access controller contract is set\\n   * @param old the address prior to the current setting\\n   * @param current the address of the new access controller contract\\n   */\\n  event RequesterAccessControllerSet(AccessControllerInterface old, AccessControllerInterface current);\\n\\n  /**\\n   * @notice emitted to immediately request a new round\\n   * @param requester the address of the requester\\n   * @param configDigest the latest transmission's configDigest\\n   * @param epoch the latest transmission's epoch\\n   * @param round the latest transmission's round\\n   */\\n  event RoundRequested(address indexed requester, bytes16 configDigest, uint32 epoch, uint8 round);\\n\\n  /**\\n   * @notice address of the requester access controller contract\\n   * @return requester access controller address\\n   */\\n  function requesterAccessController()\\n    external\\n    view\\n    returns (AccessControllerInterface)\\n  {\\n    return s_requesterAccessController;\\n  }\\n\\n  /**\\n   * @notice sets the requester access controller\\n   * @param _requesterAccessController designates the address of the new requester access controller\\n   */\\n  function setRequesterAccessController(AccessControllerInterface _requesterAccessController)\\n    public\\n    onlyOwner()\\n  {\\n    AccessControllerInterface oldController = s_requesterAccessController;\\n    if (_requesterAccessController != oldController) {\\n      s_requesterAccessController = AccessControllerInterface(_requesterAccessController);\\n      emit RequesterAccessControllerSet(oldController, _requesterAccessController);\\n    }\\n  }\\n\\n  /**\\n   * @notice immediately requests a new round\\n   * @return the aggregatorRoundId of the next round. Note: The report for this round may have been\\n   * transmitted (but not yet mined) *before* requestNewRound() was even called. There is *no*\\n   * guarantee of causality between the request and the report at aggregatorRoundId.\\n   */\\n  function requestNewRound() external returns (uint80) {\\n    require(msg.sender == owner || s_requesterAccessController.hasAccess(msg.sender, msg.data),\\n      \\\"Only owner&requester can call\\\");\\n\\n    HotVars memory hotVars = s_hotVars;\\n\\n    emit RoundRequested(\\n      msg.sender,\\n      hotVars.latestConfigDigest,\\n      uint32(s_hotVars.latestEpochAndRound >> 8),\\n      uint8(s_hotVars.latestEpochAndRound)\\n    );\\n    return hotVars.latestAggregatorRoundId + 1;\\n  }\\n\\n  /*\\n   * Transmission logic\\n   */\\n\\n  /**\\n   * @notice indicates that a new report was transmitted\\n   * @param aggregatorRoundId the round to which this report was assigned\\n   * @param answer median of the observations attached this report\\n   * @param transmitter address from which the report was transmitted\\n   * @param observations observations transmitted with this report\\n   * @param rawReportContext signature-replay-prevention domain-separation tag\\n   */\\n  event NewTransmission(\\n    uint32 indexed aggregatorRoundId,\\n    int192 answer,\\n    address transmitter,\\n    int192[] observations,\\n    bytes observers,\\n    bytes32 rawReportContext\\n  );\\n\\n  // decodeReport is used to check that the solidity and go code are using the\\n  // same format. See TestOffchainAggregator.testDecodeReport and TestReportParsing\\n  function decodeReport(bytes memory _report)\\n    internal\\n    pure\\n    returns (\\n      bytes32 rawReportContext,\\n      bytes32 rawObservers,\\n      int192[] memory observations\\n    )\\n  {\\n    (rawReportContext, rawObservers, observations) = abi.decode(_report,\\n      (bytes32, bytes32, int192[]));\\n  }\\n\\n  // Used to relieve stack pressure in transmit\\n  struct ReportData {\\n    HotVars hotVars; // Only read from storage once\\n    bytes observers; // ith element is the index of the ith observer\\n    int192[] observations; // ith element is the ith observation\\n    bytes vs; // jth element is the v component of the jth signature\\n    bytes32 rawReportContext;\\n  }\\n\\n  /*\\n   * @notice details about the most recent report\\n\\n   * @return configDigest domain separation tag for the latest report\\n   * @return epoch epoch in which the latest report was generated\\n   * @return round OCR round in which the latest report was generated\\n   * @return latestAnswer median value from latest report\\n   * @return latestTimestamp when the latest report was transmitted\\n   */\\n  function latestTransmissionDetails()\\n    external\\n    view\\n    returns (\\n      bytes16 configDigest,\\n      uint32 epoch,\\n      uint8 round,\\n      int192 latestAnswer,\\n      uint64 latestTimestamp\\n    )\\n  {\\n    require(msg.sender == tx.origin, \\\"Only callable by EOA\\\");\\n    return (\\n      s_hotVars.latestConfigDigest,\\n      uint32(s_hotVars.latestEpochAndRound >> 8),\\n      uint8(s_hotVars.latestEpochAndRound),\\n      s_transmissions[s_hotVars.latestAggregatorRoundId].answer,\\n      s_transmissions[s_hotVars.latestAggregatorRoundId].timestamp\\n    );\\n  }\\n\\n  // The constant-length components of the msg.data sent to transmit.\\n  // See the \\\"If we wanted to call sam\\\" example on for example reasoning\\n  // https://solidity.readthedocs.io/en/v0.7.2/abi-spec.html\\n  uint16 private constant TRANSMIT_MSGDATA_CONSTANT_LENGTH_COMPONENT =\\n    4 + // function selector\\n    32 + // word containing start location of abiencoded _report value\\n    32 + // word containing location start of abiencoded  _rs value\\n    32 + // word containing start location of abiencoded _ss value\\n    32 + // _rawVs value\\n    32 + // word containing length of _report\\n    32 + // word containing length _rs\\n    32 + // word containing length of _ss\\n    0; // placeholder\\n\\n  function expectedMsgDataLength(\\n    bytes calldata _report, bytes32[] calldata _rs, bytes32[] calldata _ss\\n  ) private pure returns (uint256 length)\\n  {\\n    // calldata will never be big enough to make this overflow\\n    return uint256(TRANSMIT_MSGDATA_CONSTANT_LENGTH_COMPONENT) +\\n      _report.length + // one byte pure entry in _report\\n      _rs.length * 32 + // 32 bytes per entry in _rs\\n      _ss.length * 32 + // 32 bytes per entry in _ss\\n      0; // placeholder\\n  }\\n\\n  /**\\n   * @notice transmit is called to post a new report to the contract\\n   * @param _report serialized report, which the signatures are signing. See parsing code below for format. The ith element of the observers component must be the index in s_signers of the address for the ith signature\\n   * @param _rs ith element is the R components of the ith signature on report. Must have at most maxNumOracles entries\\n   * @param _ss ith element is the S components of the ith signature on report. Must have at most maxNumOracles entries\\n   * @param _rawVs ith element is the the V component of the ith signature\\n   */\\n  function transmit(\\n    // NOTE: If these parameters are changed, expectedMsgDataLength and/or\\n    // TRANSMIT_MSGDATA_CONSTANT_LENGTH_COMPONENT need to be changed accordingly\\n    bytes calldata _report,\\n    bytes32[] calldata _rs, bytes32[] calldata _ss, bytes32 _rawVs // signatures\\n  )\\n    external\\n  {\\n    uint256 initialGas = gasleft(); // This line must come first\\n    // Make sure the transmit message-length matches the inputs. Otherwise, the\\n    // transmitter could append an arbitrarily long (up to gas-block limit)\\n    // string of 0 bytes, which we would reimburse at a rate of 16 gas/byte, but\\n    // which would only cost the transmitter 4 gas/byte. (Appendix G of the\\n    // yellow paper, p. 25, for G_txdatazero and EIP 2028 for G_txdatanonzero.)\\n    // This could amount to reimbursement profit of 36 million gas, given a 3MB\\n    // zero tail.\\n    require(msg.data.length == expectedMsgDataLength(_report, _rs, _ss),\\n      \\\"transmit message too long\\\");\\n    ReportData memory r; // Relieves stack pressure\\n    {\\n      r.hotVars = s_hotVars; // cache read from storage\\n\\n      bytes32 rawObservers;\\n      (r.rawReportContext, rawObservers, r.observations) = abi.decode(\\n        _report, (bytes32, bytes32, int192[])\\n      );\\n\\n      // rawReportContext consists of:\\n      // 11-byte zero padding\\n      // 16-byte configDigest\\n      // 4-byte epoch\\n      // 1-byte round\\n\\n      bytes16 configDigest = bytes16(r.rawReportContext << 88);\\n      require(\\n        r.hotVars.latestConfigDigest == configDigest,\\n        \\\"configDigest mismatch\\\"\\n      );\\n\\n      uint40 epochAndRound = uint40(uint256(r.rawReportContext));\\n\\n      // direct numerical comparison works here, because\\n      //\\n      //   ((e,r) <= (e',r')) implies (epochAndRound <= epochAndRound')\\n      //\\n      // because alphabetic ordering implies e <= e', and if e = e', then r<=r',\\n      // so e*256+r <= e'*256+r', because r, r' < 256\\n      require(r.hotVars.latestEpochAndRound < epochAndRound, \\\"stale report\\\");\\n\\n      require(_rs.length > r.hotVars.threshold, \\\"not enough signatures\\\");\\n      require(_rs.length <= maxNumOracles, \\\"too many signatures\\\");\\n      require(_ss.length == _rs.length, \\\"signatures out of registration\\\");\\n      require(r.observations.length <= maxNumOracles,\\n              \\\"num observations out of bounds\\\");\\n      require(r.observations.length > 2 * r.hotVars.threshold,\\n              \\\"too few values to trust median\\\");\\n\\n      // Copy signature parities in bytes32 _rawVs to bytes r.v\\n      r.vs = new bytes(_rs.length);\\n      for (uint8 i = 0; i < _rs.length; i++) {\\n        r.vs[i] = _rawVs[i];\\n      }\\n\\n      // Copy observer identities in bytes32 rawObservers to bytes r.observers\\n      r.observers = new bytes(r.observations.length);\\n      bool[maxNumOracles] memory seen;\\n      for (uint8 i = 0; i < r.observations.length; i++) {\\n        uint8 observerIdx = uint8(rawObservers[i]);\\n        require(!seen[observerIdx], \\\"observer index repeated\\\");\\n        seen[observerIdx] = true;\\n        r.observers[i] = rawObservers[i];\\n      }\\n\\n      Oracle memory transmitter = s_oracles[msg.sender];\\n      require( // Check that sender is authorized to report\\n        transmitter.role == Role.Transmitter &&\\n        msg.sender == s_transmitters[transmitter.index],\\n        \\\"unauthorized transmitter\\\"\\n      );\\n      // record epochAndRound here, so that we don't have to carry the local\\n      // variable in transmit. The change is reverted if something fails later.\\n      r.hotVars.latestEpochAndRound = epochAndRound;\\n    }\\n\\n    { // Verify signatures attached to report\\n      bytes32 h = keccak256(_report);\\n      bool[maxNumOracles] memory signed;\\n\\n      Oracle memory o;\\n      for (uint i = 0; i < _rs.length; i++) {\\n        address signer = ecrecover(h, uint8(r.vs[i])+27, _rs[i], _ss[i]);\\n        o = s_oracles[signer];\\n        require(o.role == Role.Signer, \\\"address not authorized to sign\\\");\\n        require(!signed[o.index], \\\"non-unique signature\\\");\\n        signed[o.index] = true;\\n      }\\n    }\\n\\n    { // Check the report contents, and record the result\\n      for (uint i = 0; i < r.observations.length - 1; i++) {\\n        bool inOrder = r.observations[i] <= r.observations[i+1];\\n        require(inOrder, \\\"observations not sorted\\\");\\n      }\\n\\n      int192 median = r.observations[r.observations.length/2];\\n      require(minAnswer <= median && median <= maxAnswer, \\\"median is out of min-max range\\\");\\n      r.hotVars.latestAggregatorRoundId++;\\n      s_transmissions[r.hotVars.latestAggregatorRoundId] =\\n        Transmission(median, uint64(block.timestamp));\\n\\n      emit NewTransmission(\\n        r.hotVars.latestAggregatorRoundId,\\n        median,\\n        msg.sender,\\n        r.observations,\\n        r.observers,\\n        r.rawReportContext\\n      );\\n      // Emit these for backwards compatability with offchain consumers\\n      // that only support legacy events\\n      emit NewRound(\\n        r.hotVars.latestAggregatorRoundId,\\n        address(0x0), // use zero address since we don't have anybody \\\"starting\\\" the round here\\n        block.timestamp\\n      );\\n      emit AnswerUpdated(\\n        median,\\n        r.hotVars.latestAggregatorRoundId,\\n        block.timestamp\\n      );\\n\\n      validateAnswer(r.hotVars.latestAggregatorRoundId, median);\\n    }\\n    s_hotVars = r.hotVars;\\n    assert(initialGas < maxUint32);\\n    reimburseAndRewardOracles(uint32(initialGas), r.observers);\\n  }\\n\\n  /*\\n   * v2 Aggregator interface\\n   */\\n\\n  /**\\n   * @notice median from the most recent report\\n   */\\n  function latestAnswer()\\n    public\\n    override\\n    view\\n    virtual\\n    returns (int256)\\n  {\\n    return s_transmissions[s_hotVars.latestAggregatorRoundId].answer;\\n  }\\n\\n  /**\\n   * @notice timestamp of block in which last report was transmitted\\n   */\\n  function latestTimestamp()\\n    public\\n    override\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    return s_transmissions[s_hotVars.latestAggregatorRoundId].timestamp;\\n  }\\n\\n  /**\\n   * @notice Aggregator round (NOT OCR round) in which last report was transmitted\\n   */\\n  function latestRound()\\n    public\\n    override\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    return s_hotVars.latestAggregatorRoundId;\\n  }\\n\\n  /**\\n   * @notice median of report from given aggregator round (NOT OCR round)\\n   * @param _roundId the aggregator round of the target report\\n   */\\n  function getAnswer(uint256 _roundId)\\n    public\\n    override\\n    view\\n    virtual\\n    returns (int256)\\n  {\\n    if (_roundId > 0xFFFFFFFF) { return 0; }\\n    return s_transmissions[uint32(_roundId)].answer;\\n  }\\n\\n  /**\\n   * @notice timestamp of block in which report from given aggregator round was transmitted\\n   * @param _roundId aggregator round (NOT OCR round) of target report\\n   */\\n  function getTimestamp(uint256 _roundId)\\n    public\\n    override\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    if (_roundId > 0xFFFFFFFF) { return 0; }\\n    return s_transmissions[uint32(_roundId)].timestamp;\\n  }\\n\\n  /*\\n   * v3 Aggregator interface\\n   */\\n\\n  string constant private V3_NO_DATA_ERROR = \\\"No data present\\\";\\n\\n  /**\\n   * @return answers are stored in fixed-point format, with this many digits of precision\\n   */\\n  uint8 immutable public override decimals;\\n\\n  /**\\n   * @notice aggregator contract version\\n   */\\n  uint256 constant public override version = 4;\\n\\n  string internal s_description;\\n\\n  /**\\n   * @notice human-readable description of observable this contract is reporting on\\n   */\\n  function description()\\n    public\\n    override\\n    view\\n    virtual\\n    returns (string memory)\\n  {\\n    return s_description;\\n  }\\n\\n  /**\\n   * @notice details for the given aggregator round\\n   * @param _roundId target aggregator round (NOT OCR round). Must fit in uint32\\n   * @return roundId _roundId\\n   * @return answer median of report from given _roundId\\n   * @return startedAt timestamp of block in which report from given _roundId was transmitted\\n   * @return updatedAt timestamp of block in which report from given _roundId was transmitted\\n   * @return answeredInRound _roundId\\n   */\\n  function getRoundData(uint80 _roundId)\\n    public\\n    override\\n    view\\n    virtual\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    require(_roundId <= 0xFFFFFFFF, V3_NO_DATA_ERROR);\\n    Transmission memory transmission = s_transmissions[uint32(_roundId)];\\n    return (\\n      _roundId,\\n      transmission.answer,\\n      transmission.timestamp,\\n      transmission.timestamp,\\n      _roundId\\n    );\\n  }\\n\\n  /**\\n   * @notice aggregator details for the most recently transmitted report\\n   * @return roundId aggregator round of latest report (NOT OCR round)\\n   * @return answer median of latest report\\n   * @return startedAt timestamp of block containing latest report\\n   * @return updatedAt timestamp of block containing latest report\\n   * @return answeredInRound aggregator round of latest report\\n   */\\n  function latestRoundData()\\n    public\\n    override\\n    view\\n    virtual\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    roundId = s_hotVars.latestAggregatorRoundId;\\n\\n    // Skipped for compatability with existing FluxAggregator in which latestRoundData never reverts.\\n    // require(roundId != 0, V3_NO_DATA_ERROR);\\n\\n    Transmission memory transmission = s_transmissions[uint32(roundId)];\\n    return (\\n      roundId,\\n      transmission.answer,\\n      transmission.timestamp,\\n      transmission.timestamp,\\n      roundId\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"contract/OffchainAggregatorBilling.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./AccessControllerInterface.sol\\\";\\nimport \\\"./LinkTokenInterface.sol\\\";\\nimport \\\"./Owned.sol\\\";\\n\\n/**\\n * @notice tracks administration of oracle-reward and gas-reimbursement parameters.\\n\\n * @dev\\n * If you read or change this, be sure to read or adjust the comments. They\\n * track the units of the values under consideration, and are crucial to\\n * the readability of the operations it specifies.\\n\\n * @notice\\n * Trust Model:\\n\\n * Nothing in this contract prevents a billing admin from setting insane\\n * values for the billing parameters in setBilling. Oracles\\n * participating in this contract should regularly check that the\\n * parameters make sense. Similarly, the outstanding obligations of this\\n * contract to the oracles can exceed the funds held by the contract.\\n * Oracles participating in this contract should regularly check that it\\n * holds sufficient funds and stop interacting with it if funding runs\\n * out.\\n\\n * This still leaves oracles with some risk due to TOCTOU issues.\\n * However, since the sums involved are pretty small (Ethereum\\n * transactions aren't that expensive in the end) and an oracle would\\n * likely stop participating in a contract it repeatedly lost money on,\\n * this risk is deemed acceptable. Oracles should also regularly\\n * withdraw any funds in the contract to prevent issues where the\\n * contract becomes underfunded at a later time, and different oracles\\n * are competing for the left-over funds.\\n\\n * Finally, note that any change to the set of oracles or to the billing\\n * parameters will trigger payout of all oracles first (using the old\\n * parameters), a billing admin cannot take away funds that are already\\n * marked for payment.\\n*/\\ncontract OffchainAggregatorBilling is Owned {\\n\\n  // Maximum number of oracles the offchain reporting protocol is designed for\\n  uint256 constant internal maxNumOracles = 31;\\n\\n  // Parameters for oracle payments\\n  struct Billing {\\n\\n    // Highest compensated gas price, in ETH-gwei uints\\n    uint32 maximumGasPrice;\\n\\n    // If gas price is less (in ETH-gwei units), transmitter gets half the savings\\n    uint32 reasonableGasPrice;\\n\\n    // Pay transmitter back this much LINK per unit eth spent on gas\\n    // (1e-6LINK/ETH units)\\n    uint32 microLinkPerEth;\\n\\n    // Fixed LINK reward for each observer, in LINK-gwei units\\n    uint32 linkGweiPerObservation;\\n\\n    // Fixed reward for transmitter, in linkGweiPerObservation units\\n    uint32 linkGweiPerTransmission;\\n  }\\n  Billing internal s_billing;\\n\\n  // We assume that the token contract is correct. This contract is not written\\n  // to handle misbehaving ERC20 tokens!\\n  LinkTokenInterface internal s_linkToken;\\n\\n  AccessControllerInterface internal s_billingAccessController;\\n\\n  // ith element is number of observation rewards due to ith process, plus one.\\n  // This is expected to saturate after an oracle has submitted 65,535\\n  // observations, or about 65535/(3*24*20) = 45 days, given a transmission\\n  // every 3 minutes.\\n  //\\n  // This is always one greater than the actual value, so that when the value is\\n  // reset to zero, we don't end up with a zero value in storage (which would\\n  // result in a higher gas cost, the next time the value is incremented.)\\n  // Calculations using this variable need to take that offset into account.\\n  uint16[maxNumOracles] internal s_oracleObservationsCounts;\\n\\n  // Addresses at which oracles want to receive payments, by transmitter address\\n  mapping (address /* transmitter */ => address /* payment address */)\\n    internal\\n    s_payees;\\n\\n  // Payee addresses which must be approved by the owner\\n  mapping (address /* transmitter */ => address /* payment address */)\\n    internal\\n    s_proposedPayees;\\n\\n  // LINK-wei-denominated reimbursements for gas used by transmitters.\\n  //\\n  // This is always one greater than the actual value, so that when the value is\\n  // reset to zero, we don't end up with a zero value in storage (which would\\n  // result in a higher gas cost, the next time the value is incremented.)\\n  // Calculations using this variable need to take that offset into account.\\n  //\\n  // Argument for overflow safety:\\n  // We have the following maximum intermediate values:\\n  // - 2**40 additions to this variable (epochAndRound is a uint40)\\n  // - 2**32 gas price in ethgwei/gas\\n  // - 1e9 ethwei/ethgwei\\n  // - 2**32 gas since the block gas limit is at ~20 million\\n  // - 2**32 (microlink/eth)\\n  // And we have 2**40 * 2**32 * 1e9 * 2**32 * 2**32 < 2**166\\n  // (we also divide in some places, but that only makes the value smaller)\\n  // We can thus safely use uint256 intermediate values for the computation\\n  // updating this variable.\\n  uint256[maxNumOracles] internal s_gasReimbursementsLinkWei;\\n\\n  // Used for s_oracles[a].role, where a is an address, to track the purpose\\n  // of the address, or to indicate that the address is unset.\\n  enum Role {\\n    // No oracle role has been set for address a\\n    Unset,\\n    // Signing address for the s_oracles[a].index'th oracle. I.e., report\\n    // signatures from this oracle should ecrecover back to address a.\\n    Signer,\\n    // Transmission address for the s_oracles[a].index'th oracle. I.e., if a\\n    // report is received by OffchainAggregator.transmit in which msg.sender is\\n    // a, it is attributed to the s_oracles[a].index'th oracle.\\n    Transmitter\\n  }\\n\\n  struct Oracle {\\n    uint8 index; // Index of oracle in s_signers/s_transmitters\\n    Role role;   // Role of the address which mapped to this struct\\n  }\\n\\n  mapping (address /* signer OR transmitter address */ => Oracle)\\n    internal s_oracles;\\n\\n  // s_signers contains the signing address of each oracle\\n  address[] internal s_signers;\\n\\n  // s_transmitters contains the transmission address of each oracle,\\n  // i.e. the address the oracle actually sends transactions to the contract from\\n  address[] internal s_transmitters;\\n\\n  uint256 constant private  maxUint16 = (1 << 16) - 1;\\n  uint256 constant internal maxUint128 = (1 << 128) - 1;\\n\\n  constructor(\\n    uint32 _maximumGasPrice,\\n    uint32 _reasonableGasPrice,\\n    uint32 _microLinkPerEth,\\n    uint32 _linkGweiPerObservation,\\n    uint32 _linkGweiPerTransmission,\\n    LinkTokenInterface _link,\\n    AccessControllerInterface _billingAccessController\\n  )\\n  {\\n    setBillingInternal(_maximumGasPrice, _reasonableGasPrice, _microLinkPerEth,\\n      _linkGweiPerObservation, _linkGweiPerTransmission);\\n    s_linkToken = _link;\\n    emit LinkTokenSet(LinkTokenInterface(address(0)), _link);\\n    setBillingAccessControllerInternal(_billingAccessController);\\n    uint16[maxNumOracles] memory counts; // See s_oracleObservationsCounts docstring\\n    uint256[maxNumOracles] memory gas; // see s_gasReimbursementsLinkWei docstring\\n    for (uint8 i = 0; i < maxNumOracles; i++) {\\n      counts[i] = 1;\\n      gas[i] = 1;\\n    }\\n    s_oracleObservationsCounts = counts;\\n    s_gasReimbursementsLinkWei = gas;\\n  }\\n\\n  /*\\n   * @notice emitted when the LINK token contract is set\\n   * @param _oldLinkToken the address of the old LINK token contract\\n   * @param _newLinkToken the address of the new LINK token contract\\n   */\\n  event LinkTokenSet(\\n    LinkTokenInterface indexed _oldLinkToken,\\n    LinkTokenInterface indexed _newLinkToken\\n  );\\n\\n  /*\\n   * @notice sets the LINK token contract used for paying oracles\\n   * @param _linkToken the address of the LINK token contract\\n   * @param _recipient remaining funds from the previous token contract are transfered\\n   * here\\n   * @dev this function will return early (without an error) without changing any state\\n   * if _linkToken equals getLinkToken().\\n   * @dev this will trigger a payout so that a malicious owner cannot take from oracles\\n   * what is already owed to them.\\n   * @dev we assume that the token contract is correct. This contract is not written\\n   * to handle misbehaving ERC20 tokens!\\n   */\\n  function setLinkToken(\\n    LinkTokenInterface _linkToken,\\n    address _recipient\\n  ) external\\n    onlyOwner()\\n  {\\n    LinkTokenInterface oldLinkToken = s_linkToken;\\n    if (_linkToken == oldLinkToken) {\\n      // No change, nothing to be done\\n      return;\\n    }\\n    // call balanceOf as a sanity check on whether we're talking to a token\\n    // contract\\n    _linkToken.balanceOf(address(this));\\n    // we break CEI here, but that's okay because we're dealing with a correct\\n    // token contract (by assumption).\\n    payOracles();\\n    uint256 remainingBalance = oldLinkToken.balanceOf(address(this));\\n    require(oldLinkToken.transfer(_recipient, remainingBalance), \\\"transfer remaining funds failed\\\");\\n    s_linkToken = _linkToken;\\n    emit LinkTokenSet(oldLinkToken, _linkToken);\\n  }\\n\\n  /*\\n   * @notice gets the LINK token contract used for paying oracles\\n   * @return linkToken the address of the LINK token contract\\n   */\\n  function getLinkToken()\\n    external\\n    view\\n    returns(LinkTokenInterface linkToken)\\n  {\\n    return s_linkToken;\\n  }\\n\\n  /**\\n   * @notice emitted when billing parameters are set\\n   * @param maximumGasPrice highest gas price for which transmitter will be compensated\\n   * @param reasonableGasPrice transmitter will receive reward for gas prices under this value\\n   * @param microLinkPerEth reimbursement per ETH of gas cost, in 1e-6LINK units\\n   * @param linkGweiPerObservation reward to oracle for contributing an observation to a successfully transmitted report, in 1e-9LINK units\\n   * @param linkGweiPerTransmission reward to transmitter of a successful report, in 1e-9LINK units\\n   */\\n  event BillingSet(\\n    uint32 maximumGasPrice,\\n    uint32 reasonableGasPrice,\\n    uint32 microLinkPerEth,\\n    uint32 linkGweiPerObservation,\\n    uint32 linkGweiPerTransmission\\n  );\\n\\n  function setBillingInternal(\\n    uint32 _maximumGasPrice,\\n    uint32 _reasonableGasPrice,\\n    uint32 _microLinkPerEth,\\n    uint32 _linkGweiPerObservation,\\n    uint32 _linkGweiPerTransmission\\n  )\\n    internal\\n  {\\n    s_billing = Billing(_maximumGasPrice, _reasonableGasPrice, _microLinkPerEth,\\n      _linkGweiPerObservation, _linkGweiPerTransmission);\\n    emit BillingSet(_maximumGasPrice, _reasonableGasPrice, _microLinkPerEth,\\n      _linkGweiPerObservation, _linkGweiPerTransmission);\\n  }\\n\\n  /**\\n   * @notice sets billing parameters\\n   * @param _maximumGasPrice highest gas price for which transmitter will be compensated\\n   * @param _reasonableGasPrice transmitter will receive reward for gas prices under this value\\n   * @param _microLinkPerEth reimbursement per ETH of gas cost, in 1e-6LINK units\\n   * @param _linkGweiPerObservation reward to oracle for contributing an observation to a successfully transmitted report, in 1e-9LINK units\\n   * @param _linkGweiPerTransmission reward to transmitter of a successful report, in 1e-9LINK units\\n   * @dev access control provided by billingAccessController\\n   */\\n  function setBilling(\\n    uint32 _maximumGasPrice,\\n    uint32 _reasonableGasPrice,\\n    uint32 _microLinkPerEth,\\n    uint32 _linkGweiPerObservation,\\n    uint32 _linkGweiPerTransmission\\n  )\\n    external\\n  {\\n    AccessControllerInterface access = s_billingAccessController;\\n    require(msg.sender == owner || access.hasAccess(msg.sender, msg.data),\\n      \\\"Only owner&billingAdmin can call\\\");\\n    payOracles();\\n    setBillingInternal(_maximumGasPrice, _reasonableGasPrice, _microLinkPerEth,\\n      _linkGweiPerObservation, _linkGweiPerTransmission);\\n  }\\n\\n  /**\\n   * @notice gets billing parameters\\n   * @param maximumGasPrice highest gas price for which transmitter will be compensated\\n   * @param reasonableGasPrice transmitter will receive reward for gas prices under this value\\n   * @param microLinkPerEth reimbursement per ETH of gas cost, in 1e-6LINK units\\n   * @param linkGweiPerObservation reward to oracle for contributing an observation to a successfully transmitted report, in 1e-9LINK units\\n   * @param linkGweiPerTransmission reward to transmitter of a successful report, in 1e-9LINK units\\n   */\\n  function getBilling()\\n    external\\n    view\\n    returns (\\n      uint32 maximumGasPrice,\\n      uint32 reasonableGasPrice,\\n      uint32 microLinkPerEth,\\n      uint32 linkGweiPerObservation,\\n      uint32 linkGweiPerTransmission\\n    )\\n  {\\n    Billing memory billing = s_billing;\\n    return (\\n      billing.maximumGasPrice,\\n      billing.reasonableGasPrice,\\n      billing.microLinkPerEth,\\n      billing.linkGweiPerObservation,\\n      billing.linkGweiPerTransmission\\n    );\\n  }\\n\\n  /**\\n   * @notice emitted when a new access-control contract is set\\n   * @param old the address prior to the current setting\\n   * @param current the address of the new access-control contract\\n   */\\n  event BillingAccessControllerSet(AccessControllerInterface old, AccessControllerInterface current);\\n\\n  function setBillingAccessControllerInternal(AccessControllerInterface _billingAccessController)\\n    internal\\n  {\\n    AccessControllerInterface oldController = s_billingAccessController;\\n    if (_billingAccessController != oldController) {\\n      s_billingAccessController = _billingAccessController;\\n      emit BillingAccessControllerSet(\\n        oldController,\\n        _billingAccessController\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice sets billingAccessController\\n   * @param _billingAccessController new billingAccessController contract address\\n   * @dev only owner can call this\\n   */\\n  function setBillingAccessController(AccessControllerInterface _billingAccessController)\\n    external\\n    onlyOwner\\n  {\\n    setBillingAccessControllerInternal(_billingAccessController);\\n  }\\n\\n  /**\\n   * @notice gets billingAccessController\\n   * @return address of billingAccessController contract\\n   */\\n  function billingAccessController()\\n    external\\n    view\\n    returns (AccessControllerInterface)\\n  {\\n    return s_billingAccessController;\\n  }\\n\\n  /**\\n   * @notice withdraws an oracle's payment from the contract\\n   * @param _transmitter the transmitter address of the oracle\\n   * @dev must be called by oracle's payee address\\n   */\\n  function withdrawPayment(address _transmitter)\\n    external\\n  {\\n    require(msg.sender == s_payees[_transmitter], \\\"Only payee can withdraw\\\");\\n    payOracle(_transmitter);\\n  }\\n\\n  /**\\n   * @notice query an oracle's payment amount\\n   * @param _transmitter the transmitter address of the oracle\\n   */\\n  function owedPayment(address _transmitter)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    Oracle memory oracle = s_oracles[_transmitter];\\n    if (oracle.role == Role.Unset) { return 0; }\\n    Billing memory billing = s_billing;\\n    uint256 linkWeiAmount =\\n      uint256(s_oracleObservationsCounts[oracle.index] - 1) *\\n      uint256(billing.linkGweiPerObservation) *\\n      (1 gwei);\\n    linkWeiAmount += s_gasReimbursementsLinkWei[oracle.index] - 1;\\n    return linkWeiAmount;\\n  }\\n\\n  /**\\n   * @notice emitted when an oracle has been paid LINK\\n   * @param transmitter address from which the oracle sends reports to the transmit method\\n   * @param payee address to which the payment is sent\\n   * @param amount amount of LINK sent\\n   * @param linkToken address of the LINK token contract\\n   */\\n  event OraclePaid(\\n    address indexed transmitter,\\n    address indexed payee,\\n    uint256 amount,\\n    LinkTokenInterface indexed linkToken\\n  );\\n\\n  // payOracle pays out _transmitter's balance to the corresponding payee, and zeros it out\\n  function payOracle(address _transmitter)\\n    internal\\n  {\\n    Oracle memory oracle = s_oracles[_transmitter];\\n    uint256 linkWeiAmount = owedPayment(_transmitter);\\n    if (linkWeiAmount > 0) {\\n      address payee = s_payees[_transmitter];\\n      // Poses no re-entrancy issues, because LINK.transfer does not yield\\n      // control flow.\\n      require(s_linkToken.transfer(payee, linkWeiAmount), \\\"insufficient funds\\\");\\n      s_oracleObservationsCounts[oracle.index] = 1; // \\\"zero\\\" the counts. see var's docstring\\n      s_gasReimbursementsLinkWei[oracle.index] = 1; // \\\"zero\\\" the counts. see var's docstring\\n      emit OraclePaid(_transmitter, payee, linkWeiAmount, s_linkToken);\\n    }\\n  }\\n\\n  // payOracles pays out all transmitters, and zeros out their balances.\\n  //\\n  // It's much more gas-efficient to do this as a single operation, to avoid\\n  // hitting storage too much.\\n  function payOracles()\\n    internal\\n  {\\n    Billing memory billing = s_billing;\\n    LinkTokenInterface linkToken = s_linkToken;\\n    uint16[maxNumOracles] memory observationsCounts = s_oracleObservationsCounts;\\n    uint256[maxNumOracles] memory gasReimbursementsLinkWei =\\n      s_gasReimbursementsLinkWei;\\n    address[] memory transmitters = s_transmitters;\\n    for (uint transmitteridx = 0; transmitteridx < transmitters.length; transmitteridx++) {\\n      uint256 reimbursementAmountLinkWei = gasReimbursementsLinkWei[transmitteridx] - 1;\\n      uint256 obsCount = observationsCounts[transmitteridx] - 1;\\n      uint256 linkWeiAmount =\\n        obsCount * uint256(billing.linkGweiPerObservation) * (1 gwei) + reimbursementAmountLinkWei;\\n      if (linkWeiAmount > 0) {\\n          address payee = s_payees[transmitters[transmitteridx]];\\n          // Poses no re-entrancy issues, because LINK.transfer does not yield\\n          // control flow.\\n          require(linkToken.transfer(payee, linkWeiAmount), \\\"insufficient funds\\\");\\n          observationsCounts[transmitteridx] = 1;       // \\\"zero\\\" the counts.\\n          gasReimbursementsLinkWei[transmitteridx] = 1; // \\\"zero\\\" the counts.\\n          emit OraclePaid(transmitters[transmitteridx], payee, linkWeiAmount, linkToken);\\n        }\\n    }\\n    // \\\"Zero\\\" the accounting storage variables\\n    s_oracleObservationsCounts = observationsCounts;\\n    s_gasReimbursementsLinkWei = gasReimbursementsLinkWei;\\n  }\\n\\n  function oracleRewards(\\n    bytes memory observers,\\n    uint16[maxNumOracles] memory observations\\n  )\\n    internal\\n    pure\\n    returns (uint16[maxNumOracles] memory)\\n  {\\n    // reward each observer-participant with the observer reward\\n    for (uint obsIdx = 0; obsIdx < observers.length; obsIdx++) {\\n      uint8 observer = uint8(observers[obsIdx]);\\n      observations[observer] = saturatingAddUint16(observations[observer], 1);\\n    }\\n    return observations;\\n  }\\n\\n  // This value needs to change if maxNumOracles is increased, or the accounting\\n  // calculations at the bottom of reimburseAndRewardOracles change.\\n  //\\n  // To recalculate it, run the profiler as described in\\n  // ../../profile/README.md, and add up the gas-usage values reported for the\\n  // lines in reimburseAndRewardOracles following the \\\"gasLeft = gasleft()\\\"\\n  // line. E.g., you will see output like this:\\n  //\\n  //      7        uint256 gasLeft = gasleft();\\n  //     29        uint256 gasCostEthWei = transmitterGasCostEthWei(\\n  //      9          uint256(initialGas),\\n  //      3          gasPrice,\\n  //      3          callDataGasCost,\\n  //      3          gasLeft\\n  //      .\\n  //      .\\n  //      .\\n  //     59        uint256 gasCostLinkWei = (gasCostEthWei * billing.microLinkPerEth)/ 1e6;\\n  //      .\\n  //      .\\n  //      .\\n  //   5047        s_gasReimbursementsLinkWei[txOracle.index] =\\n  //    856          s_gasReimbursementsLinkWei[txOracle.index] + gasCostLinkWei +\\n  //     26          uint256(billing.linkGweiPerTransmission) * (1 gwei);\\n  //\\n  // If those were the only lines to be accounted for, you would add up\\n  // 29+9+3+3+3+59+5047+856+26=6035.\\n  uint256 internal constant accountingGasCost = 6035;\\n\\n  // Uncomment the following declaration to compute the remaining gas cost after\\n  // above gasleft(). (This must exist in a base class to OffchainAggregator, so\\n  // it can't go in TestOffchainAggregator.)\\n  //\\n  // uint256 public gasUsedInAccounting;\\n\\n  // Gas price at which the transmitter should be reimbursed, in ETH-gwei/gas\\n  function impliedGasPrice(\\n    uint256 txGasPrice,         // ETH-gwei/gas units\\n    uint256 reasonableGasPrice, // ETH-gwei/gas units\\n    uint256 maximumGasPrice     // ETH-gwei/gas units\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    // Reward the transmitter for choosing an efficient gas price: if they manage\\n    // to come in lower than considered reasonable, give them half the savings.\\n    //\\n    // The following calculations are all in units of gwei/gas, i.e. 1e-9ETH/gas\\n    uint256 gasPrice = txGasPrice;\\n    if (txGasPrice < reasonableGasPrice) {\\n      // Give transmitter half the savings for coming in under the reasonable gas price\\n      gasPrice += (reasonableGasPrice - txGasPrice) / 2;\\n    }\\n    // Don't reimburse a gas price higher than maximumGasPrice\\n    return min(gasPrice, maximumGasPrice);\\n  }\\n\\n  // gas reimbursement due the transmitter, in ETH-wei\\n  //\\n  // If this function is changed, accountingGasCost needs to change, too. See\\n  // its docstring\\n  function transmitterGasCostEthWei(\\n    uint256 initialGas,\\n    uint256 gasPrice, // ETH-gwei/gas units\\n    uint256 callDataCost, // gas units\\n    uint256 gasLeft\\n  )\\n    internal\\n    pure\\n    returns (uint128 gasCostEthWei)\\n  {\\n    require(initialGas >= gasLeft, \\\"gasLeft cannot exceed initialGas\\\");\\n    uint256 gasUsed = // gas units\\n      initialGas - gasLeft + // observed gas usage\\n      callDataCost + accountingGasCost; // estimated gas usage\\n    // gasUsed is in gas units, gasPrice is in ETH-gwei/gas units; convert to ETH-wei\\n    uint256 fullGasCostEthWei = gasUsed * gasPrice * (1 gwei);\\n    assert(fullGasCostEthWei < maxUint128); // the entire ETH supply fits in a uint128...\\n    return uint128(fullGasCostEthWei);\\n  }\\n\\n  /**\\n   * @notice withdraw any available funds left in the contract, up to _amount, after accounting for the funds due to participants in past reports\\n   * @param _recipient address to send funds to\\n   * @param _amount maximum amount to withdraw, denominated in LINK-wei.\\n   * @dev access control provided by billingAccessController\\n   */\\n  function withdrawFunds(address _recipient, uint256 _amount)\\n    external\\n  {\\n    require(msg.sender == owner || s_billingAccessController.hasAccess(msg.sender, msg.data),\\n      \\\"Only owner&billingAdmin can call\\\");\\n    uint256 linkDue = totalLINKDue();\\n    uint256 linkBalance = s_linkToken.balanceOf(address(this));\\n    require(linkBalance >= linkDue, \\\"insufficient balance\\\");\\n    require(s_linkToken.transfer(_recipient, min(linkBalance - linkDue, _amount)), \\\"insufficient funds\\\");\\n  }\\n\\n  // Total LINK due to participants in past reports.\\n  function totalLINKDue()\\n    internal\\n    view\\n    returns (uint256 linkDue)\\n  {\\n    // Argument for overflow safety: We do all computations in\\n    // uint256s. The inputs to linkDue are:\\n    // - the <= 31 observation rewards each of which has less than\\n    //   64 bits (32 bits for billing.linkGweiPerObservation, 32 bits\\n    //   for wei/gwei conversion). Hence 69 bits are sufficient for this part.\\n    // - the <= 31 gas reimbursements, each of which consists of at most 166\\n    //   bits (see s_gasReimbursementsLinkWei docstring). Hence 171 bits are\\n    //   sufficient for this part\\n    // In total, 172 bits are enough.\\n    uint16[maxNumOracles] memory observationCounts = s_oracleObservationsCounts;\\n    for (uint i = 0; i < maxNumOracles; i++) {\\n      linkDue += observationCounts[i] - 1; // Stored value is one greater than actual value\\n    }\\n    Billing memory billing = s_billing;\\n    // Convert linkGweiPerObservation to uint256, or this overflows!\\n    linkDue *= uint256(billing.linkGweiPerObservation) * (1 gwei);\\n    address[] memory transmitters = s_transmitters;\\n    uint256[maxNumOracles] memory gasReimbursementsLinkWei =\\n      s_gasReimbursementsLinkWei;\\n    for (uint i = 0; i < transmitters.length; i++) {\\n      linkDue += uint256(gasReimbursementsLinkWei[i]-1); // Stored value is one greater than actual value\\n    }\\n  }\\n\\n  /**\\n   * @notice allows oracles to check that sufficient LINK balance is available\\n   * @return availableBalance LINK available on this contract, after accounting for outstanding obligations. can become negative\\n   */\\n  function linkAvailableForPayment()\\n    external\\n    view\\n    returns (int256 availableBalance)\\n  {\\n    // there are at most one billion LINK, so this cast is safe\\n    int256 balance = int256(s_linkToken.balanceOf(address(this)));\\n    // according to the argument in the definition of totalLINKDue,\\n    // totalLINKDue is never greater than 2**172, so this cast is safe\\n    int256 due = int256(totalLINKDue());\\n    // safe from overflow according to above sizes\\n    return int256(balance) - int256(due);\\n  }\\n\\n  /**\\n   * @notice number of observations oracle is due to be reimbursed for\\n   * @param _signerOrTransmitter address used by oracle for signing or transmitting reports\\n   */\\n  function oracleObservationCount(address _signerOrTransmitter)\\n    external\\n    view\\n    returns (uint16)\\n  {\\n    Oracle memory oracle = s_oracles[_signerOrTransmitter];\\n    if (oracle.role == Role.Unset) { return 0; }\\n    return s_oracleObservationsCounts[oracle.index] - 1;\\n  }\\n\\n\\n  function reimburseAndRewardOracles(\\n    uint32 initialGas,\\n    bytes memory observers\\n  )\\n    internal\\n  {\\n    Oracle memory txOracle = s_oracles[msg.sender];\\n    Billing memory billing = s_billing;\\n    // Reward oracles for providing observations. Oracles are not rewarded\\n    // for providing signatures, because signing is essentially free.\\n    s_oracleObservationsCounts =\\n      oracleRewards(observers, s_oracleObservationsCounts);\\n    // Reimburse transmitter of the report for gas usage\\n    require(txOracle.role == Role.Transmitter,\\n      \\\"sent by undesignated transmitter\\\"\\n    );\\n    uint256 gasPrice = impliedGasPrice(\\n      tx.gasprice / (1 gwei), // convert to ETH-gwei units\\n      billing.reasonableGasPrice,\\n      billing.maximumGasPrice\\n    );\\n    // The following is only an upper bound, as it ignores the cheaper cost for\\n    // 0 bytes. Safe from overflow, because calldata just isn't that long.\\n    uint256 callDataGasCost = 16 * msg.data.length;\\n    // If any changes are made to subsequent calculations, accountingGasCost\\n    // needs to change, too.\\n    uint256 gasLeft = gasleft();\\n    uint256 gasCostEthWei = transmitterGasCostEthWei(\\n      uint256(initialGas),\\n      gasPrice,\\n      callDataGasCost,\\n      gasLeft\\n    );\\n\\n    // microLinkPerEth is 1e-6LINK/ETH units, gasCostEthWei is 1e-18ETH units\\n    // (ETH-wei), product is 1e-24LINK-wei units, dividing by 1e6 gives\\n    // 1e-18LINK units, i.e. LINK-wei units\\n    // Safe from over/underflow, since all components are non-negative,\\n    // gasCostEthWei will always fit into uint128 and microLinkPerEth is a\\n    // uint32 (128+32 < 256!).\\n    uint256 gasCostLinkWei = (gasCostEthWei * billing.microLinkPerEth)/ 1e6;\\n\\n    // Safe from overflow, because gasCostLinkWei < 2**160 and\\n    // billing.linkGweiPerTransmission * (1 gwei) < 2**64 and we increment\\n    // s_gasReimbursementsLinkWei[txOracle.index] at most 2**40 times.\\n    s_gasReimbursementsLinkWei[txOracle.index] =\\n      s_gasReimbursementsLinkWei[txOracle.index] + gasCostLinkWei +\\n      uint256(billing.linkGweiPerTransmission) * (1 gwei); // convert from linkGwei to linkWei\\n\\n    // Uncomment next line to compute the remaining gas cost after above gasleft().\\n    // See OffchainAggregatorBilling.accountingGasCost docstring for more information.\\n    //\\n    // gasUsedInAccounting = gasLeft - gasleft();\\n  }\\n\\n  /*\\n   * Payee management\\n   */\\n\\n  /**\\n   * @notice emitted when a transfer of an oracle's payee address has been initiated\\n   * @param transmitter address from which the oracle sends reports to the transmit method\\n   * @param current the payeee address for the oracle, prior to this setting\\n   * @param proposed the proposed new payee address for the oracle\\n   */\\n  event PayeeshipTransferRequested(\\n    address indexed transmitter,\\n    address indexed current,\\n    address indexed proposed\\n  );\\n\\n  /**\\n   * @notice emitted when a transfer of an oracle's payee address has been completed\\n   * @param transmitter address from which the oracle sends reports to the transmit method\\n   * @param current the payeee address for the oracle, prior to this setting\\n   */\\n  event PayeeshipTransferred(\\n    address indexed transmitter,\\n    address indexed previous,\\n    address indexed current\\n  );\\n\\n  /**\\n   * @notice sets the payees for transmitting addresses\\n   * @param _transmitters addresses oracles use to transmit the reports\\n   * @param _payees addresses of payees corresponding to list of transmitters\\n   * @dev must be called by owner\\n   * @dev cannot be used to change payee addresses, only to initially populate them\\n   */\\n  function setPayees(\\n    address[] calldata _transmitters,\\n    address[] calldata _payees\\n  )\\n    external\\n    onlyOwner()\\n  {\\n    require(_transmitters.length == _payees.length, \\\"transmitters.size != payees.size\\\");\\n\\n    for (uint i = 0; i < _transmitters.length; i++) {\\n      address transmitter = _transmitters[i];\\n      address payee = _payees[i];\\n      address currentPayee = s_payees[transmitter];\\n      bool zeroedOut = currentPayee == address(0);\\n      require(zeroedOut || currentPayee == payee, \\\"payee already set\\\");\\n      s_payees[transmitter] = payee;\\n\\n      if (currentPayee != payee) {\\n        emit PayeeshipTransferred(transmitter, currentPayee, payee);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice first step of payeeship transfer (safe transfer pattern)\\n   * @param _transmitter transmitter address of oracle whose payee is changing\\n   * @param _proposed new payee address\\n   * @dev can only be called by payee address\\n   */\\n  function transferPayeeship(\\n    address _transmitter,\\n    address _proposed\\n  )\\n    external\\n  {\\n      require(msg.sender == s_payees[_transmitter], \\\"only current payee can update\\\");\\n      require(msg.sender != _proposed, \\\"cannot transfer to self\\\");\\n\\n      address previousProposed = s_proposedPayees[_transmitter];\\n      s_proposedPayees[_transmitter] = _proposed;\\n\\n      if (previousProposed != _proposed) {\\n        emit PayeeshipTransferRequested(_transmitter, msg.sender, _proposed);\\n      }\\n  }\\n\\n  /**\\n   * @notice second step of payeeship transfer (safe transfer pattern)\\n   * @param _transmitter transmitter address of oracle whose payee is changing\\n   * @dev can only be called by proposed new payee address\\n   */\\n  function acceptPayeeship(\\n    address _transmitter\\n  )\\n    external\\n  {\\n    require(msg.sender == s_proposedPayees[_transmitter], \\\"only proposed payees can accept\\\");\\n\\n    address currentPayee = s_payees[_transmitter];\\n    s_payees[_transmitter] = msg.sender;\\n    s_proposedPayees[_transmitter] = address(0);\\n\\n    emit PayeeshipTransferred(_transmitter, currentPayee, msg.sender);\\n  }\\n\\n  /*\\n   * Helper functions\\n   */\\n\\n  function saturatingAddUint16(uint16 _x, uint16 _y)\\n    internal\\n    pure\\n    returns (uint16)\\n  {\\n    return uint16(min(uint256(_x)+uint256(_y), maxUint16));\\n  }\\n\\n  function min(uint256 a, uint256 b)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    if (a < b) { return a; }\\n    return b;\\n  }\\n}\\n\"\r\n    },\r\n    \"contract/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title The Owned contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract Owned {\\n\\n  address payable public owner;\\n  address private pendingOwner;\\n\\n  event OwnershipTransferRequested(\\n    address indexed from,\\n    address indexed to\\n  );\\n  event OwnershipTransferred(\\n    address indexed from,\\n    address indexed to\\n  );\\n\\n  constructor() {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address _to)\\n    external\\n    onlyOwner()\\n  {\\n    pendingOwner = _to;\\n\\n    emit OwnershipTransferRequested(owner, _to);\\n  }\\n\\n  /**\\n   * @dev Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership()\\n    external\\n  {\\n    require(msg.sender == pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = owner;\\n    owner = msg.sender;\\n    pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @dev Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"Only callable by owner\\\");\\n    _;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contract/SimpleReadAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./SimpleWriteAccessController.sol\\\";\\n\\n/**\\n * @title SimpleReadAccessController\\n * @notice Gives access to:\\n * - any externally owned account (note that offchain actors can always read\\n * any contract storage regardless of onchain access control measures, so this\\n * does not weaken the access control while improving usability)\\n * - accounts explicitly added to an access list\\n * @dev SimpleReadAccessController is not suitable for access controlling writes\\n * since it grants any externally owned account access! See\\n * SimpleWriteAccessController for that.\\n */\\ncontract SimpleReadAccessController is SimpleWriteAccessController {\\n\\n  /**\\n   * @notice Returns the access of an address\\n   * @param _user The address to query\\n   */\\n  function hasAccess(\\n    address _user,\\n    bytes memory _calldata\\n  )\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return super.hasAccess(_user, _calldata) || _user == tx.origin;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contract/SimpleWriteAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./AccessControllerInterface.sol\\\";\\n\\n/**\\n * @title SimpleWriteAccessController\\n * @notice Gives access to accounts explicitly added to an access list by the\\n * controller's owner.\\n * @dev does not make any special permissions for externally, see\\n * SimpleReadAccessController for that.\\n */\\ncontract SimpleWriteAccessController is AccessControllerInterface, Owned {\\n\\n  bool public checkEnabled;\\n  mapping(address => bool) internal accessList;\\n\\n  event AddedAccess(address user);\\n  event RemovedAccess(address user);\\n  event CheckAccessEnabled();\\n  event CheckAccessDisabled();\\n\\n  constructor()\\n  {\\n    checkEnabled = true;\\n  }\\n\\n  /**\\n   * @notice Returns the access of an address\\n   * @param _user The address to query\\n   */\\n  function hasAccess(\\n    address _user,\\n    bytes memory\\n  )\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return accessList[_user] || !checkEnabled;\\n  }\\n\\n  /**\\n   * @notice Adds an address to the access list\\n   * @param _user The address to add\\n   */\\n  function addAccess(address _user) external onlyOwner() {\\n    addAccessInternal(_user);\\n  }\\n\\n  function addAccessInternal(address _user) internal {\\n    if (!accessList[_user]) {\\n      accessList[_user] = true;\\n      emit AddedAccess(_user);\\n    }\\n  }\\n\\n  /**\\n   * @notice Removes an address from the access list\\n   * @param _user The address to remove\\n   */\\n  function removeAccess(address _user)\\n    external\\n    onlyOwner()\\n  {\\n    if (accessList[_user]) {\\n      accessList[_user] = false;\\n\\n      emit RemovedAccess(_user);\\n    }\\n  }\\n\\n  /**\\n   * @notice makes the access check enforced\\n   */\\n  function enableAccessCheck()\\n    external\\n    onlyOwner()\\n  {\\n    if (!checkEnabled) {\\n      checkEnabled = true;\\n\\n      emit CheckAccessEnabled();\\n    }\\n  }\\n\\n  /**\\n   * @notice makes the access check unenforced\\n   */\\n  function disableAccessCheck()\\n    external\\n    onlyOwner()\\n  {\\n    if (checkEnabled) {\\n      checkEnabled = false;\\n\\n      emit CheckAccessDisabled();\\n    }\\n  }\\n\\n  /**\\n   * @dev reverts if the caller does not have access\\n   */\\n  modifier checkAccess() {\\n    require(hasAccess(msg.sender, msg.data), \\\"No access\\\");\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contract/TypeAndVersionInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nabstract contract TypeAndVersionInterface{\\n  function typeAndVersion()\\n    external\\n    pure\\n    virtual\\n    returns (string memory);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {}\r\n  }\r\n}}",
      "abi": "[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_maximumGasPrice\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_reasonableGasPrice\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_microLinkPerEth\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_linkGweiPerObservation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_linkGweiPerTransmission\",\"type\":\"uint32\"},{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"int192\",\"name\":\"_minAnswer\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"_maxAnswer\",\"type\":\"int192\"},{\"internalType\":\"contract AccessControllerInterface\",\"name\":\"_billingAccessController\",\"type\":\"address\"},{\"internalType\":\"contract AccessControllerInterface\",\"name\":\"_requesterAccessController\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AddedAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract AccessControllerInterface\",\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract AccessControllerInterface\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"BillingAccessControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maximumGasPrice\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"reasonableGasPrice\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"microLinkPerEth\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"linkGweiPerObservation\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"linkGweiPerTransmission\",\"type\":\"uint32\"}],\"name\":\"BillingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CheckAccessDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CheckAccessEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"threshold\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"encodedConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encoded\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract LinkTokenInterface\",\"name\":\"_oldLinkToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract LinkTokenInterface\",\"name\":\"_newLinkToken\",\"type\":\"address\"}],\"name\":\"LinkTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"aggregatorRoundId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"answer\",\"type\":\"int192\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int192[]\",\"name\":\"observations\",\"type\":\"int192[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"observers\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rawReportContext\",\"type\":\"bytes32\"}],\"name\":\"NewTransmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract LinkTokenInterface\",\"name\":\"linkToken\",\"type\":\"address\"}],\"name\":\"OraclePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposed\",\"type\":\"address\"}],\"name\":\"PayeeshipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"PayeeshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RemovedAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract AccessControllerInterface\",\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract AccessControllerInterface\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"RequesterAccessControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"configDigest\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"}],\"name\":\"RoundRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract AggregatorValidatorInterface\",\"name\":\"previousValidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousGasLimit\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"contract AggregatorValidatorInterface\",\"name\":\"currentValidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"currentGasLimit\",\"type\":\"uint32\"}],\"name\":\"ValidatorConfigSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transmitter\",\"type\":\"address\"}],\"name\":\"acceptPayeeship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"billingAccessController\",\"outputs\":[{\"internalType\":\"contract AccessControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAccessCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAccessCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBilling\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"maximumGasPrice\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reasonableGasPrice\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"microLinkPerEth\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"linkGweiPerObservation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"linkGweiPerTransmission\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkToken\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"linkToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes16\",\"name\":\"configDigest\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTransmissionDetails\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"configDigest\",\"type\":\"bytes16\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"round\",\"type\":\"uint8\"},{\"internalType\":\"int192\",\"name\":\"latestAnswer\",\"type\":\"int192\"},{\"internalType\":\"uint64\",\"name\":\"latestTimestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkAvailableForPayment\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAnswer\",\"outputs\":[{\"internalType\":\"int192\",\"name\":\"\",\"type\":\"int192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAnswer\",\"outputs\":[{\"internalType\":\"int192\",\"name\":\"\",\"type\":\"int192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signerOrTransmitter\",\"type\":\"address\"}],\"name\":\"oracleObservationCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transmitter\",\"type\":\"address\"}],\"name\":\"owedPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestNewRound\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requesterAccessController\",\"outputs\":[{\"internalType\":\"contract AccessControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_maximumGasPrice\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_reasonableGasPrice\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_microLinkPerEth\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_linkGweiPerObservation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_linkGweiPerTransmission\",\"type\":\"uint32\"}],\"name\":\"setBilling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AccessControllerInterface\",\"name\":\"_billingAccessController\",\"type\":\"address\"}],\"name\":\"setBillingAccessController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_threshold\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"_encodedConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_encoded\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setLinkToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_payees\",\"type\":\"address[]\"}],\"name\":\"setPayees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AccessControllerInterface\",\"name\":\"_requesterAccessController\",\"type\":\"address\"}],\"name\":\"setRequesterAccessController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorValidatorInterface\",\"name\":\"_newValidator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_newGasLimit\",\"type\":\"uint32\"}],\"name\":\"setValidatorConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transmitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proposed\",\"type\":\"address\"}],\"name\":\"transferPayeeship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"_rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorConfig\",\"outputs\":[{\"internalType\":\"contract AggregatorValidatorInterface\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transmitter\",\"type\":\"address\"}],\"name\":\"withdrawPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "contract_name": "AccessControlledOffchainAggregator",
      "compiler_version": "v0.7.6+commit.7338295f",
      "optimization_used": "1",
      "runs": "200",
      "constructor_arguments": "",
      "evm_version": "istanbul",
      "library": "",
      "license_type": "MIT",
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8": {
      "address": "0xa68f6075ae62ebd514d1600cb5035fa0e2210ef8",
      "has_source_code": true,
      "source_code": "// File: contracts\\libraries\\SafeMath.sol\r\n\r\npragma solidity =0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\r\n// Subject to the MIT license.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction underflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\IERC721.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC721 {\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\t\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\tfunction nonces(uint256 tokenId) external view returns (uint256);\r\n\t\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction approve(address to, uint256 tokenId) external;\r\n\tfunction setApprovalForAll(address operator, bool approved) external;\r\n\tfunction permit(address spender, uint tokenId, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\IERC721Receiver.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: contracts\\ImpermaxERC721.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract ImpermaxERC721 is IERC721 {\r\n\tusing SafeMath for uint;\r\n\t\r\n\tstring public name;\r\n\tstring public symbol;\r\n\t\r\n\tmapping(address => uint) public balanceOf;\r\n\tmapping(uint256 => address) internal _ownerOf;\r\n\tmapping(uint256 => address) public getApproved;\r\n\tmapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\t\r\n\tbytes32 public DOMAIN_SEPARATOR;\r\n\tmapping(uint256 => uint) public nonces;\r\n\r\n\tconstructor() public {}\r\n\t\r\n\tfunction _setName(string memory _name, string memory _symbol) internal {\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\t\r\n\t\tuint chainId;\r\n\t\tassembly {\r\n\t\t\tchainId := chainid\r\n\t\t}\r\n\t\tDOMAIN_SEPARATOR = keccak256(\r\n\t\t\tabi.encode(\r\n\t\t\t\tkeccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n\t\t\t\tkeccak256(bytes(_name)),\r\n\t\t\t\tkeccak256(bytes(\"1\")),\r\n\t\t\t\tchainId,\r\n\t\t\t\taddress(this)\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\t\r\n\tfunction _isAuthorized(address owner, address operator, uint256 tokenId) internal view returns (bool) {\r\n\t\treturn operator != address(0) && (owner == operator || isApprovedForAll[owner][operator] || getApproved[tokenId] == operator);\r\n\t}\r\n\r\n\tfunction _checkAuthorized(address owner, address operator, uint256 tokenId) internal view {\r\n\t\trequire(_isAuthorized(owner, operator, tokenId), \"ImpermaxERC721: UNAUTHORIZED\");\r\n\t}\r\n\r\n\tfunction _update(address to, uint256 tokenId, address auth) internal returns (address from) {\r\n\t\tfrom = _ownerOf[tokenId];\r\n\t\tif (auth != address(0)) _checkAuthorized(from, auth, tokenId);\r\n\r\n\t\tif (from != address(0)) {\r\n\t\t\t_approve(address(0), tokenId, address(0));\r\n\t\t\tbalanceOf[from] -= 1;\r\n\t\t}\r\n\r\n\t\tif (to != address(0)) {\r\n\t\t\tbalanceOf[to] += 1;\r\n\t\t}\r\n\r\n\t\t_ownerOf[tokenId] = to;\r\n\t\temit Transfer(from, to, tokenId);\r\n\t}\r\n\t\r\n\tfunction _mint(address to, uint256 tokenId) internal {\r\n\t\trequire(to != address(0), \"ImpermaxERC721: INVALID_RECEIVER\");\r\n\t\taddress previousOwner = _update(to, tokenId, address(0));\r\n\t\trequire(previousOwner == address(0), \"ImpermaxERC721: INVALID_SENDER\");\r\n\t}\r\n\tfunction _safeMint(address to, uint256 tokenId) internal {\r\n\t\t_safeMint(to, tokenId, \"\");\r\n\t}\r\n\tfunction _safeMint(address to, uint256 tokenId, bytes memory data) internal {\r\n\t\t_mint(to, tokenId);\r\n\t\t_checkOnERC721Received(address(0), to, tokenId, data);\r\n\t}\r\n\t\r\n\tfunction _burn(uint256 tokenId) internal {\r\n\t\taddress previousOwner = _update(address(0), tokenId, address(0));\r\n\t\trequire(previousOwner != address(0), \"ImpermaxERC721: NONEXISTENT_TOKEN\");\r\n\t}\r\n\t\r\n\tfunction _transfer(address from, address to, uint256 tokenId, address auth) internal {\r\n\t\trequire(to != address(0), \"ImpermaxERC721: INVALID_RECEIVER\");\r\n\t\taddress previousOwner = _update(to, tokenId, auth);\r\n\t\trequire(previousOwner != address(0), \"ImpermaxERC721: NONEXISTENT_TOKEN\");\r\n\t\trequire(previousOwner == from, \"ImpermaxERC721: INCORRECT_OWNER\");\r\n\t}\r\n\t\r\n\tfunction _safeTransfer(address from, address to, uint256 tokenId, address auth) internal {\r\n\t\t_safeTransfer(from, to, tokenId, \"\", auth);\r\n\t}\r\n\tfunction _safeTransfer(address from, address to, uint256 tokenId, bytes memory data, address auth) internal {\r\n\t\t_transfer(from, to, tokenId, auth);\r\n\t\t_checkOnERC721Received(from, to, tokenId, data);\r\n\t}\r\n\r\n\tfunction _approve(address to, uint256 tokenId, address auth) internal {\r\n\t\taddress owner = _requireOwned(tokenId);\r\n\t\trequire(auth == address(0) || auth == owner || isApprovedForAll[owner][auth], \"ImpermaxERC721: INVALID_APPROVER\");\r\n\t\tgetApproved[tokenId] = to;\r\n\t\temit Approval(owner, to, tokenId);\r\n\t}\r\n\r\n\tfunction _setApprovalForAll(address owner, address operator, bool approved) internal {\r\n\t\trequire(operator != address(0), \"ImpermaxERC721: INVALID_OPERATOR\");\r\n\t\tisApprovedForAll[owner][operator] = approved;\r\n\t\temit ApprovalForAll(owner, operator, approved);\r\n\t}\r\n\t\r\n\tfunction _requireOwned(uint256 tokenId) internal view returns (address) {\r\n\t\taddress owner = _ownerOf[tokenId];\r\n\t\trequire(owner != address(0), \"ImpermaxERC721: NONEXISTENT_TOKEN\");\r\n\t\treturn owner;\r\n\t}\r\n\t\r\n\tfunction _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) internal {\r\n\t\tif (isContract(to)) {\r\n\t\t\tbytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, data);\r\n\t\t\trequire(retval == bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")), \"ImpermaxERC721: INVALID_RECEIVER\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address) {\r\n\t\treturn _requireOwned(tokenId);\r\n\t}\r\n\t\r\n\tfunction approve(address to, uint256 tokenId) external {\r\n\t\t_approve(to, tokenId, msg.sender);\r\n\t}\r\n\t\r\n\tfunction setApprovalForAll(address operator, bool approved) external {\r\n\t\t_setApprovalForAll(msg.sender, operator, approved);\r\n\t}\r\n\t\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external {\r\n\t\t_transfer(from, to, tokenId, msg.sender);\r\n\t}\r\n\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external {\r\n\t\t_safeTransfer(from, to, tokenId, msg.sender);\r\n\t}\r\n\t\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external {\r\n\t\t_safeTransfer(from, to, tokenId, data, msg.sender);\r\n\t}\r\n\t\r\n\tfunction _checkSignature(address spender, uint tokenId, uint deadline, uint8 v, bytes32 r, bytes32 s, bytes32 typehash) internal {\r\n\t\trequire(deadline >= block.timestamp, \"ImpermaxERC721: EXPIRED\");\r\n\t\tbytes32 digest = keccak256(\r\n\t\t\tabi.encodePacked(\r\n\t\t\t\t'\\x19\\x01',\r\n\t\t\t\tDOMAIN_SEPARATOR,\r\n\t\t\t\tkeccak256(abi.encode(typehash, spender, tokenId, nonces[tokenId]++, deadline))\r\n\t\t\t)\r\n\t\t);\r\n\t\taddress owner = _requireOwned(tokenId);\r\n\t\taddress recoveredAddress = ecrecover(digest, v, r, s);\r\n\t\trequire(recoveredAddress == owner, \"ImpermaxERC721: INVALID_SIGNATURE\");\t\r\n\t}\r\n\r\n\t// keccak256(\"Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\");\r\n\tbytes32 public constant PERMIT_TYPEHASH = 0x49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad;\r\n\tfunction permit(address spender, uint tokenId, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n\t\t_checkSignature(spender, tokenId, deadline, v, r, s, PERMIT_TYPEHASH);\r\n\t\t_approve(spender, tokenId, address(0));\r\n\t}\r\n\t\r\n\t/* Utilities */\r\n\tfunction isContract(address _addr) private view returns (bool){\r\n\t\tuint32 size;\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(_addr)\r\n\t\t}\r\n\t\treturn (size > 0);\r\n\t}\r\n}\r\n\r\n// File: contracts\\interfaces\\INFTLP.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface INFTLP {\r\n\tstruct RealXY {\r\n\t\tuint256 realX;\r\n\t\tuint256 realY;\r\n\t}\r\n\t\r\n\tstruct RealXYs {\r\n\t\tRealXY lowestPrice;\r\n\t\tRealXY currentPrice;\r\n\t\tRealXY highestPrice;\r\n\t}\r\n\t\r\n\t// ERC-721\r\n\tfunction ownerOf(uint256 _tokenId) external view returns (address);\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\r\n\t\r\n\t// Global state\r\n\tfunction token0() external view returns (address);\r\n\tfunction token1() external view returns (address);\r\n\t\r\n\t// Position state\r\n\tfunction getPositionData(uint256 _tokenId, uint256 _safetyMarginSqrt) external returns (\r\n\t\tuint256 priceSqrtX96,\r\n\t\tRealXYs memory realXYs\r\n\t);\r\n\t\r\n\t// Interactions\r\n\t\r\n\tfunction split(uint256 tokenId, uint256 percentage) external returns (uint256 newTokenId);\r\n\tfunction join(uint256 tokenId, uint256 tokenToJoin) external;\r\n}\r\n\r\n// File: contracts\\extensions\\interfaces\\IUniswapV3Factory.sol\r\n\r\n// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title The interface for the Uniswap V3 Factory\r\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\r\ninterface IUniswapV3Factory {\r\n    /// @notice Emitted when the owner of the factory is changed\r\n    /// @param oldOwner The owner before the owner was changed\r\n    /// @param newOwner The owner after the owner was changed\r\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\r\n\r\n    /// @notice Emitted when a pool is created\r\n    /// @param token0 The first token of the pool by address sort order\r\n    /// @param token1 The second token of the pool by address sort order\r\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\r\n    /// @param pool The address of the created pool\r\n    event PoolCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        uint24 indexed fee,\r\n        int24 tickSpacing,\r\n        address pool\r\n    );\r\n\r\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\r\n    /// @param fee The enabled fee, denominated in hundredths of a bip\r\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\r\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\r\n\r\n    /// @notice Returns the current owner of the factory\r\n    /// @dev Can be changed by the current owner via setOwner\r\n    /// @return The address of the factory owner\r\n    function owner() external view returns (address);\r\n\r\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\r\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\r\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\r\n    /// @return The tick spacing\r\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\r\n\r\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\r\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\r\n    /// @param tokenA The contract address of either token0 or token1\r\n    /// @param tokenB The contract address of the other token\r\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n    /// @return pool The pool address\r\n    function getPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) external view returns (address pool);\r\n\r\n    /// @notice Creates a pool for the given two tokens and fee\r\n    /// @param tokenA One of the two tokens in the desired pool\r\n    /// @param tokenB The other of the two tokens in the desired pool\r\n    /// @param fee The desired fee for the pool\r\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\r\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\r\n    /// are invalid.\r\n    /// @return pool The address of the newly created pool\r\n    function createPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) external returns (address pool);\r\n\r\n    /// @notice Updates the owner of the factory\r\n    /// @dev Must be called by the current owner\r\n    /// @param _owner The new owner of the factory\r\n    function setOwner(address _owner) external;\r\n\r\n    /// @notice Enables a fee amount with the given tickSpacing\r\n    /// @dev Fee amounts may never be removed once enabled\r\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\r\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\r\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\r\n}\r\n\r\n// File: contracts\\extensions\\interfaces\\IUniswapV3Pool.sol\r\n\r\n// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV3Pool {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function fee() external view returns (uint24);\r\n    function tickSpacing() external view returns (int24);\r\n    function maxLiquidityPerTick() external view returns (uint128);\r\n\t\r\n    function slot0()\r\n        external\r\n        view\r\n        returns (\r\n            uint160 sqrtPriceX96,\r\n            int24 tick,\r\n            uint16 observationIndex,\r\n            uint16 observationCardinality,\r\n            uint16 observationCardinalityNext,\r\n            uint8 feeProtocol,\r\n            bool unlocked\r\n        );\r\n\r\n    function feeGrowthGlobal0X128() external view returns (uint256);\r\n    function feeGrowthGlobal1X128() external view returns (uint256);\r\n    function protocolFees() external view returns (uint128, uint128);\r\n    function liquidity() external view returns (uint128);\r\n\r\n    function ticks(int24 tick)\r\n        external\r\n        view\r\n        returns (\r\n            uint128 liquidityGross,\r\n            int128 liquidityNet,\r\n            uint256 feeGrowthOutside0X128,\r\n            uint256 feeGrowthOutside1X128,\r\n            int56 tickCumulativeOutside,\r\n            uint160 secondsPerLiquidityOutsideX128,\r\n            uint32 secondsOutside,\r\n            bool initialized\r\n        );\r\n\r\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\r\n\r\n    function positions(bytes32 key)\r\n        external\r\n        view\r\n        returns (\r\n            uint128 _liquidity,\r\n            uint256 feeGrowthInside0LastX128,\r\n            uint256 feeGrowthInside1LastX128,\r\n            uint128 tokensOwed0,\r\n            uint128 tokensOwed1\r\n        );\r\n\r\n    function observations(uint256 index)\r\n        external\r\n        view\r\n        returns (\r\n            uint32 blockTimestamp,\r\n            int56 tickCumulative,\r\n            uint160 secondsPerLiquidityCumulativeX128,\r\n            bool initialized\r\n        );\r\n\t\t\r\n    function observe(uint32[] calldata secondsAgos)\r\n        external\r\n        view\r\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\r\n\r\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\r\n        external\r\n        view\r\n        returns (\r\n            int56 tickCumulativeInside,\r\n            uint160 secondsPerLiquidityInsideX128,\r\n            uint32 secondsInside\r\n        );\r\n\t\t\r\n    function initialize(uint160 sqrtPriceX96) external;\r\n\r\n    function mint(\r\n        address recipient,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount,\r\n        bytes calldata data\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function collect(\r\n        address recipient,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount0Requested,\r\n        uint128 amount1Requested\r\n    ) external returns (uint128 amount0, uint128 amount1);\r\n\r\n    function burn(\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        address recipient,\r\n        bool zeroForOne,\r\n        int256 amountSpecified,\r\n        uint160 sqrtPriceLimitX96,\r\n        bytes calldata data\r\n    ) external returns (int256 amount0, int256 amount1);\r\n\t\r\n    function flash(\r\n        address recipient,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\r\n}\r\n\r\n// File: contracts\\extensions\\interfaces\\ITokenizedUniswapV3Position.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ITokenizedUniswapV3Position {\r\n\t\r\n\t// ERC-721\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\t\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\tfunction nonces(uint256 tokenId) external view returns (uint256);\r\n\t\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction approve(address to, uint256 tokenId) external;\r\n\tfunction setApprovalForAll(address operator, bool approved) external;\r\n\tfunction permit(address spender, uint tokenId, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\t\r\n\t// INFTLP\r\n\t\r\n\tfunction token0() external view returns (address);\r\n\tfunction token1() external view returns (address);\r\n\tfunction getPositionData(uint256 _tokenId, uint256 _safetyMarginSqrt) external returns (\r\n\t\tuint256 priceSqrtX96,\r\n\t\tINFTLP.RealXYs memory realXYs\r\n\t);\r\n\t\r\n\tfunction join(uint256 tokenId, uint256 tokenToJoin) external;\r\n\tfunction split(uint256 tokenId, uint256 percentage) external returns (uint256 newTokenId);\r\n\t\r\n\t// ITokenizedUniswapV3Position\r\n\t\r\n\tstruct Position {\r\n\t\tuint24 fee;\r\n\t\tint24 tickLower;\r\n\t\tint24 tickUpper;\r\n\t\tuint128 liquidity;\r\n\t\tuint256 feeGrowthInside0LastX128;\r\n\t\tuint256 feeGrowthInside1LastX128;\r\n\t\tuint256 unclaimedFees0;\t\r\n\t\tuint256 unclaimedFees1;\t\r\n\t}\r\n\t\r\n\tfunction factory() external view returns (address);\r\n\tfunction uniswapV3Factory() external view returns (address);\r\n\t\r\n\tfunction totalBalance(uint24 fee, int24 tickLower, int24 tickUpper) external view returns (uint256);\r\n\t\r\n\tfunction positions(uint256 tokenId) external view returns (\r\n\t\tuint24 fee,\r\n\t\tint24 tickLower,\r\n\t\tint24 tickUpper,\r\n\t\tuint128 liquidity,\r\n\t\tuint256 feeGrowthInside0LastX128,\r\n\t\tuint256 feeGrowthInside1LastX128,\r\n\t\tuint256 unclaimedFees0,\r\n\t\tuint256 unclaimedFees1\r\n\t);\r\n\tfunction positionsLength() external view returns (uint256);\r\n\t\r\n\tfunction getPool(uint24 fee) external view returns (address pool);\r\n\t\r\n\tfunction oraclePriceSqrtX96() external returns (uint256);\r\n\t\r\n\tevent MintPosition(uint256 indexed tokenId, uint24 fee, int24 tickLower, int24 tickUpper);\r\n\tevent UpdatePositionLiquidity(uint256 indexed tokenId, uint256 liquidity);\r\n\tevent UpdatePositionFeeGrowthInside(uint256 indexed tokenId, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128);\r\n\tevent UpdatePositionUnclaimedFees(uint256 indexed tokenId, uint256 unclaimedFees0, uint256 unclaimedFees1);\r\n\r\n\tfunction _initialize (\r\n\t\taddress _uniswapV3Factory, \r\n\t\taddress _oracle, \r\n\t\taddress _token0, \r\n\t\taddress _token1\r\n\t) external;\r\n\t\r\n\tfunction mint(address to, uint24 fee, int24 tickLower, int24 tickUpper) external  returns (uint256 newTokenId);\r\n\tfunction redeem(address to, uint256 tokenId) external  returns (uint256 amount0, uint256 amount1);\r\n\r\n}\r\n\r\n// File: contracts\\extensions\\interfaces\\IUniswapV3AC.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV3AC {\r\n\tfunction getToCollect(\r\n\t\tITokenizedUniswapV3Position.Position calldata position, \r\n\t\tuint256 tokenId, \r\n\t\tuint256 feeCollected0, \r\n\t\tuint256 feeCollected1\r\n\t) external returns (uint256 collect0, uint256 collect1, bytes memory data);\r\n\t\r\n\tfunction mintLiquidity(\r\n\t\taddress bountyTo, \r\n\t\tbytes calldata data\r\n\t) external returns (uint256 bounty0, uint256 bounty1);\r\n}\r\n\r\n// File: contracts\\extensions\\interfaces\\IV3Oracle.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IV3Oracle {\r\n\tfunction oraclePriceSqrtX96(address token0, address token1) external returns (uint256);\r\n}\r\n\r\n// File: contracts\\extensions\\interfaces\\ITokenizedUniswapV3Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ITokenizedUniswapV3Factory {\r\n\tevent NFTLPCreated(address indexed token0, address indexed token1, address NFTLP, uint);\r\n\tevent NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\tevent NewAdmin(address oldAdmin, address newAdmin);\r\n\tevent NewAcModule(address oldAcModule, address newAcModule);\r\n\t\r\n\tfunction admin() external view returns (address);\r\n\tfunction pendingAdmin() external view returns (address);\r\n\t\r\n\tfunction uniswapV3Factory() external view returns (address);\r\n\tfunction deployer() external view returns (address);\r\n\tfunction oracle() external view returns (address);\r\n\tfunction acModule() external view returns (address);\r\n\t\r\n\tfunction getNFTLP(address tokenA, address tokenB) external view returns (address);\r\n\tfunction allNFTLP(uint) external view returns (address);\r\n\tfunction allNFTLPLength() external view returns (uint);\r\n\t\r\n\tfunction createNFTLP(address tokenA, address tokenB) external returns (address NFTLP);\r\n\t\r\n\tfunction _setPendingAdmin(address newPendingAdmin) external;\r\n\tfunction _acceptAdmin() external;\r\n\tfunction _setAcModule(address newAcModule) external;\r\n}\r\n\r\n// File: contracts\\libraries\\FullMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.0 <0.8.0;\r\n\r\n/// @title Contains 512-bit math functions\r\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\r\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\r\nlibrary FullMath {\r\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n    /// @param a The multiplicand\r\n    /// @param b The multiplier\r\n    /// @param denominator The divisor\r\n    /// @return result The 256-bit result\r\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n    function mulDiv(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        // 512-bit multiply [prod1 prod0] = a * b\r\n        // Compute the product mod 2**256 and mod 2**256 - 1\r\n        // then use the Chinese Remainder Theorem to reconstruct\r\n        // the 512 bit result. The result is stored in two 256\r\n        // variables such that product = prod1 * 2**256 + prod0\r\n        uint256 prod0; // Least significant 256 bits of the product\r\n        uint256 prod1; // Most significant 256 bits of the product\r\n        assembly {\r\n            let mm := mulmod(a, b, not(0))\r\n            prod0 := mul(a, b)\r\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n        }\r\n\r\n        // Handle non-overflow cases, 256 by 256 division\r\n        if (prod1 == 0) {\r\n            require(denominator > 0);\r\n            assembly {\r\n                result := div(prod0, denominator)\r\n            }\r\n            return result;\r\n        }\r\n\r\n        // Make sure the result is less than 2**256.\r\n        // Also prevents denominator == 0\r\n        require(denominator > prod1);\r\n\r\n        ///////////////////////////////////////////////\r\n        // 512 by 256 division.\r\n        ///////////////////////////////////////////////\r\n\r\n        // Make division exact by subtracting the remainder from [prod1 prod0]\r\n        // Compute remainder using mulmod\r\n        uint256 remainder;\r\n        assembly {\r\n            remainder := mulmod(a, b, denominator)\r\n        }\r\n        // Subtract 256 bit number from 512 bit number\r\n        assembly {\r\n            prod1 := sub(prod1, gt(remainder, prod0))\r\n            prod0 := sub(prod0, remainder)\r\n        }\r\n\r\n        // Factor powers of two out of denominator\r\n        // Compute largest power of two divisor of denominator.\r\n        // Always >= 1.\r\n        uint256 twos = -denominator & denominator;\r\n        // Divide denominator by power of two\r\n        assembly {\r\n            denominator := div(denominator, twos)\r\n        }\r\n\r\n        // Divide [prod1 prod0] by the factors of two\r\n        assembly {\r\n            prod0 := div(prod0, twos)\r\n        }\r\n        // Shift in bits from prod1 into prod0. For this we need\r\n        // to flip `twos` such that it is 2**256 / twos.\r\n        // If twos is zero, then it becomes one\r\n        assembly {\r\n            twos := add(div(sub(0, twos), twos), 1)\r\n        }\r\n        prod0 |= prod1 * twos;\r\n\r\n        // Invert denominator mod 2**256\r\n        // Now that denominator is an odd number, it has an inverse\r\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n        // Compute the inverse by starting with a seed that is correct\r\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n        uint256 inv = (3 * denominator) ^ 2;\r\n        // Now use Newton-Raphson iteration to improve the precision.\r\n        // Thanks to Hensel's lifting lemma, this also works in modular\r\n        // arithmetic, doubling the correct bits in each step.\r\n        inv *= 2 - denominator * inv; // inverse mod 2**8\r\n        inv *= 2 - denominator * inv; // inverse mod 2**16\r\n        inv *= 2 - denominator * inv; // inverse mod 2**32\r\n        inv *= 2 - denominator * inv; // inverse mod 2**64\r\n        inv *= 2 - denominator * inv; // inverse mod 2**128\r\n        inv *= 2 - denominator * inv; // inverse mod 2**256\r\n\r\n        // Because the division is now exact we can divide by multiplying\r\n        // with the modular inverse of denominator. This will give us the\r\n        // correct result modulo 2**256. Since the precoditions guarantee\r\n        // that the outcome is less than 2**256, this is the final result.\r\n        // We don't need to compute the high bits of the result and prod1\r\n        // is no longer required.\r\n        result = prod0 * inv;\r\n        return result;\r\n    }\r\n\r\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n    /// @param a The multiplicand\r\n    /// @param b The multiplier\r\n    /// @param denominator The divisor\r\n    /// @return result The 256-bit result\r\n    function mulDivRoundingUp(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        result = mulDiv(a, b, denominator);\r\n        if (mulmod(a, b, denominator) > 0) {\r\n            require(result < uint256(-1));\r\n            result++;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\extensions\\libraries\\LiquidityAmounts.sol\r\n\r\n// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Liquidity amount functions\r\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\r\nlibrary LiquidityAmounts {\r\n    uint constant Q96 = 2**96;\r\n\t\r\n    /// @notice Downcasts uint256 to uint128\r\n    /// @param x The uint258 to be downcasted\r\n    /// @return y The passed value, downcasted to uint128\r\n    function toUint128(uint256 x) private pure returns (uint128 y) {\r\n        require((y = uint128(x)) == x);\r\n    }\r\n\r\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\r\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param amount0 The amount0 being sent in\r\n    /// @return liquidity The amount of returned liquidity\r\n    function getLiquidityForAmount0(\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint256 amount0\r\n    ) internal pure returns (uint128 liquidity) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, Q96);\r\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\r\n    }\r\n\r\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\r\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param amount1 The amount1 being sent in\r\n    /// @return liquidity The amount of returned liquidity\r\n    function getLiquidityForAmount1(\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint256 amount1\r\n    ) internal pure returns (uint128 liquidity) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n        return toUint128(FullMath.mulDiv(amount1, Q96, sqrtRatioBX96 - sqrtRatioAX96));\r\n    }\r\n\r\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\r\n    /// pool prices and the prices at the tick boundaries\r\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param amount0 The amount of token0 being sent in\r\n    /// @param amount1 The amount of token1 being sent in\r\n    /// @return liquidity The maximum amount of liquidity received\r\n    function getLiquidityForAmounts(\r\n        uint160 sqrtRatioX96,\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    ) internal pure returns (uint128 liquidity) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\r\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\r\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\r\n\r\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\r\n        } else {\r\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\r\n        }\r\n    }\r\n\r\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param liquidity The liquidity being valued\r\n    /// @return amount0 The amount of token0\r\n    function getAmount0ForLiquidity(\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint128 liquidity\r\n    ) internal pure returns (uint256 amount0) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n        return\r\n            FullMath.mulDiv(\r\n                uint256(liquidity) << 96,\r\n                sqrtRatioBX96 - sqrtRatioAX96,\r\n                sqrtRatioBX96\r\n            ) / sqrtRatioAX96;\r\n    }\r\n\r\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param liquidity The liquidity being valued\r\n    /// @return amount1 The amount of token1\r\n    function getAmount1ForLiquidity(\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint128 liquidity\r\n    ) internal pure returns (uint256 amount1) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, Q96);\r\n    }\r\n\r\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\r\n    /// pool prices and the prices at the tick boundaries\r\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param liquidity The liquidity being valued\r\n    /// @return amount0 The amount of token0\r\n    /// @return amount1 The amount of token1\r\n    function getAmountsForLiquidity(\r\n        uint160 sqrtRatioX96,\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint128 liquidity\r\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\r\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\r\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\r\n        } else {\r\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\extensions\\libraries\\UniswapV3Position.sol\r\n\r\n// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity >=0.5.0 <0.8.0;\r\n\r\n/// @title Position\r\n/// @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\r\n/// @dev Positions store additional state for tracking fees owed to the position\r\nlibrary UniswapV3Position {\r\n    // info stored for each user's position\r\n    struct Info {\r\n        // the amount of liquidity owned by this position\r\n        uint128 liquidity;\r\n        // fee growth per unit of liquidity as of the last update to liquidity or fees owed\r\n        uint256 feeGrowthInside0LastX128;\r\n        uint256 feeGrowthInside1LastX128;\r\n        // the fees owed to the position owner in token0/token1\r\n        uint128 tokensOwed0;\r\n        uint128 tokensOwed1;\r\n    }\r\n\r\n    /// @notice Returns the Info struct of a position, given an owner and position boundaries\r\n    /// @param owner The address of the position owner\r\n    /// @param tickLower The lower tick boundary of the position\r\n    /// @param tickUpper The upper tick boundary of the position\r\n    /// @return hash of the position\r\n    function getHash(\r\n        address owner,\r\n        int24 tickLower,\r\n        int24 tickUpper\r\n    ) internal view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(owner, tickLower, tickUpper));\r\n    }\r\n}\r\n\r\n// File: contracts\\extensions\\libraries\\TickMath.sol\r\n\r\n// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0 <0.8.0;\r\n\r\n/// @title Math library for computing sqrt prices from ticks and vice versa\r\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\r\n/// prices between 2**-128 and 2**128\r\nlibrary TickMath {\r\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\r\n    int24 internal constant MIN_TICK = -887272;\r\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\r\n    int24 internal constant MAX_TICK = -MIN_TICK;\r\n\r\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\r\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\r\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\r\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\r\n\r\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\r\n    /// @dev Throws if |tick| > max tick\r\n    /// @param tick The input tick for the above formula\r\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\r\n    /// at the given tick\r\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\r\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\r\n        require(absTick <= uint256(MAX_TICK), 'TickMath: T');\r\n\r\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\r\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\r\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\r\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\r\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\r\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\r\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\r\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\r\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\r\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\r\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\r\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\r\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\r\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\r\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\r\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\r\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\r\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\r\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\r\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\r\n\r\n        if (tick > 0) ratio = uint256(-1) / ratio;\r\n\r\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\r\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\r\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\r\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\r\n    }\r\n\r\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\r\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\r\n    /// ever return.\r\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\r\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\r\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\r\n        // second inequality must be < because the price can never reach the price at the max tick\r\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'TickMath: R');\r\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\r\n\r\n        uint256 r = ratio;\r\n        uint256 msb = 0;\r\n\r\n        assembly {\r\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(5, gt(r, 0xFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(4, gt(r, 0xFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(3, gt(r, 0xFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(2, gt(r, 0xF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(1, gt(r, 0x3))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := gt(r, 0x1)\r\n            msb := or(msb, f)\r\n        }\r\n\r\n        if (msb >= 128) r = ratio >> (msb - 127);\r\n        else r = ratio << (127 - msb);\r\n\r\n        int256 log_2 = (int256(msb) - 128) << 64;\r\n\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(63, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(62, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(61, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(60, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(59, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(58, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(57, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(56, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(55, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(54, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(53, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(52, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(51, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(50, f))\r\n        }\r\n\r\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\r\n\r\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\r\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\r\n\r\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\r\n    }\r\n}\r\n\r\n// File: contracts\\extensions\\TokenizedUniswapV3Position.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract TokenizedUniswapV3Position is ITokenizedUniswapV3Position, INFTLP, ImpermaxERC721 {\r\n\tusing TickMath for int24;\r\n\t\r\n    uint constant Q128 = 2**128;\r\n\r\n\tuint256 public constant FEE_COLLECTED_WEIGHT = 0.95e18; // 95%\r\n\t\r\n\taddress public factory;\r\n\taddress public uniswapV3Factory;\r\n\taddress public oracle;\r\n\taddress public token0;\r\n\taddress public token1;\r\n\t\r\n\tmapping(uint24 => \r\n\t\tmapping(int24 => \r\n\t\t\tmapping(int24 => uint256)\r\n\t\t)\r\n\t) public totalBalance;\r\n\t\r\n\tmapping(uint256 => Position) public positions;\r\n\tuint256 public positionsLength;\r\n\t\t\r\n\t/*** Global state ***/\r\n\t\r\n\t// called once by the factory at the time of deployment\r\n\tfunction _initialize (\r\n\t\taddress _uniswapV3Factory, \r\n\t\taddress _oracle, \r\n\t\taddress _token0, \r\n\t\taddress _token1\r\n\t) external {\r\n\t\trequire(factory == address(0), \"Impermax: FACTORY_ALREADY_SET\"); // sufficient check\r\n\t\tfactory = msg.sender;\r\n\t\t_setName(\"Tokenized Uniswap V3\", \"NFT-UNI-V3\");\r\n\t\tuniswapV3Factory = _uniswapV3Factory;\r\n\t\toracle = _oracle;\r\n\t\ttoken0 = _token0;\r\n\t\ttoken1 = _token1;\r\n\t\t\r\n\t\t// quickly check if the oracle support this tokens pair\r\n\t\toraclePriceSqrtX96();\r\n\t}\r\n\t\r\n\tfunction getPool(uint24 fee) public view returns (address pool) {\r\n\t\tpool = IUniswapV3Factory(uniswapV3Factory).getPool(token0, token1, fee);\r\n\t\trequire(pool != address(0), \"TokenizedUniswapV3Position: UNSUPPORTED_FEE\");\r\n\t}\r\n\t\r\n\tfunction _updateBalance(uint24 fee, int24 tickLower, int24 tickUpper) internal {\r\n\t\taddress pool = getPool(fee);\r\n\t\tbytes32 hash = UniswapV3Position.getHash(address(this), tickLower, tickUpper);\r\n\t\t(uint balance,,,,) = IUniswapV3Pool(pool).positions(hash);\r\n\t\ttotalBalance[fee][tickLower][tickUpper] = balance;\r\n\t}\r\n\t\r\n\tfunction oraclePriceSqrtX96() public returns (uint256) {\r\n\t\treturn IV3Oracle(oracle).oraclePriceSqrtX96(token0, token1);\r\n\t}\r\n \r\n\t/*** Position state ***/\r\n\t\r\n\t// this assumes that the position fee growth snapshot has already been updated through burn()\r\n\tfunction _getfeeCollectedAndGrowth(Position memory position, address pool) internal view returns (uint256 fg0, uint256 fg1, uint256 feeCollected0, uint256 feeCollected1) {\r\n\t\tbytes32 hash = UniswapV3Position.getHash(address(this), position.tickLower, position.tickUpper);\r\n\t\t(,fg0, fg1,,) = IUniswapV3Pool(pool).positions(hash);\r\n\t\t\r\n\t\tuint256 delta0 = fg0 - position.feeGrowthInside0LastX128;\r\n\t\tuint256 delta1 = fg1 - position.feeGrowthInside1LastX128;\r\n\t\t\r\n\t\tfeeCollected0 = delta0.mul(position.liquidity).div(Q128).add(position.unclaimedFees0);\r\n\t\tfeeCollected1 = delta1.mul(position.liquidity).div(Q128).add(position.unclaimedFees1);\r\n\t}\r\n\tfunction _getFeeCollected(Position memory position, address pool) internal view returns (uint256 feeCollected0, uint256 feeCollected1) {\r\n\t\t(,,feeCollected0, feeCollected1) = _getfeeCollectedAndGrowth(position, pool);\r\n\t}\r\n\t\r\n\tfunction getPositionData(uint256 tokenId, uint256 safetyMarginSqrt) external returns (\r\n\t\tuint256 priceSqrtX96,\r\n\t\tINFTLP.RealXYs memory realXYs\r\n\t) {\r\n\t\tPosition memory position = positions[tokenId];\r\n\t\t\r\n\t\t// trigger update of fee growth\r\n\t\taddress pool = getPool(position.fee);\r\n\t\tIUniswapV3Pool(pool).burn(position.tickLower, position.tickUpper, 0);\r\n\t\t(uint256 feeCollectedX, uint256 feeCollectedY) = _getFeeCollected(position, pool);\r\n\t\r\n\t\trequire(safetyMarginSqrt >= 1e18, \"TokenizedUniswapV3Position: INVALID_SAFETY_MARGIN\");\r\n\t\t_requireOwned(tokenId);\r\n\t\t\r\n\t\tuint160 pa = position.tickLower.getSqrtRatioAtTick();\r\n\t\tuint160 pb = position.tickUpper.getSqrtRatioAtTick();\r\n\t\t\r\n\t\tpriceSqrtX96 = oraclePriceSqrtX96();\r\n\t\tuint160 currentPrice = safe160(priceSqrtX96);\r\n\t\tuint160 lowestPrice = safe160(priceSqrtX96.mul(1e18).div(safetyMarginSqrt));\r\n\t\tuint160 highestPrice = safe160(priceSqrtX96.mul(safetyMarginSqrt).div(1e18));\r\n\t\t\r\n\t\t(realXYs.lowestPrice.realX, realXYs.lowestPrice.realY) = LiquidityAmounts.getAmountsForLiquidity(lowestPrice, pa, pb, position.liquidity);\r\n\t\t(realXYs.currentPrice.realX, realXYs.currentPrice.realY) = LiquidityAmounts.getAmountsForLiquidity(currentPrice, pa, pb, position.liquidity);\r\n\t\t(realXYs.highestPrice.realX, realXYs.highestPrice.realY) = LiquidityAmounts.getAmountsForLiquidity(highestPrice, pa, pb, position.liquidity);\r\n\t\t\r\n\t\tuint256 feeCollectedWeightedX = feeCollectedX.mul(FEE_COLLECTED_WEIGHT).div(1e18);\r\n\t\tuint256 feeCollectedWeightedY = feeCollectedY.mul(FEE_COLLECTED_WEIGHT).div(1e18);\r\n\t\t\r\n\t\trealXYs.lowestPrice.realX += feeCollectedWeightedX;\r\n\t\trealXYs.lowestPrice.realY += feeCollectedWeightedY; \r\n\t\trealXYs.currentPrice.realX += feeCollectedX;\r\n\t\trealXYs.currentPrice.realY += feeCollectedY;\r\n\t\trealXYs.highestPrice.realX += feeCollectedWeightedX;\r\n\t\trealXYs.highestPrice.realY += feeCollectedWeightedY;\r\n\t}\r\n \r\n\t/*** Interactions ***/\r\n\t\r\n\t// this low-level function should be called from another contract\r\n\tfunction mint(address to, uint24 fee, int24 tickLower, int24 tickUpper) external nonReentrant returns (uint256 newTokenId) {\r\n\t\taddress pool = getPool(fee);\t\t\r\n\t\tbytes32 hash = UniswapV3Position.getHash(address(this), tickLower, tickUpper);\r\n\t\t(uint balance, uint256 fg0, uint256 fg1,,) = IUniswapV3Pool(pool).positions(hash);\r\n\t\tuint liquidity = balance.sub(totalBalance[fee][tickLower][tickUpper]);\r\n\t\t\r\n\t\tnewTokenId = positionsLength++;\r\n\t\t_mint(to, newTokenId);\t\t\r\n\t\tpositions[newTokenId] = Position({\r\n\t\t\tfee: fee,\r\n\t\t\ttickLower: tickLower,\r\n\t\t\ttickUpper: tickUpper,\r\n\t\t\tliquidity: safe128(liquidity),\r\n\t\t\tfeeGrowthInside0LastX128: fg0,\r\n\t\t\tfeeGrowthInside1LastX128: fg1,\r\n\t\t\tunclaimedFees0: 0,\r\n\t\t\tunclaimedFees1: 0\r\n\t\t});\r\n\t\t\r\n\t\t_updateBalance(fee, tickLower, tickUpper);\r\n\t\t\r\n\t\temit MintPosition(newTokenId, fee, tickLower, tickUpper);\r\n\t\temit UpdatePositionLiquidity(newTokenId, liquidity);\r\n\t\temit UpdatePositionFeeGrowthInside(newTokenId, fg0, fg1);\r\n\t\temit UpdatePositionUnclaimedFees(newTokenId, 0, 0);\r\n\t}\r\n\r\n\t// this low-level function should be called from another contract\r\n\tfunction redeem(address to, uint256 tokenId) external nonReentrant returns (uint256 amount0, uint256 amount1) {\r\n\t\t_checkAuthorized(_requireOwned(tokenId), msg.sender, tokenId);\r\n\t\t\r\n\t\tPosition memory position = positions[tokenId];\r\n\t\tdelete positions[tokenId];\r\n\t\t_burn(tokenId);\r\n\t\t\r\n\t\taddress pool = getPool(position.fee);\t\t\r\n\t\t(amount0, amount1) = IUniswapV3Pool(pool).burn(position.tickLower, position.tickUpper, position.liquidity);\r\n\t\t_updateBalance(position.fee, position.tickLower, position.tickUpper);\r\n\t\t\r\n\t\t(uint256 feeCollected0, uint256 feeCollected1) = _getFeeCollected(position, pool);\r\n\t\tamount0 = amount0.add(feeCollected0);\r\n\t\tamount1 = amount1.add(feeCollected1);\r\n\r\n\t\t(amount0, amount1) = IUniswapV3Pool(pool).collect(to, position.tickLower, position.tickUpper, safe128(amount0), safe128(amount1));\r\n\t\t\r\n\t\temit UpdatePositionLiquidity(tokenId, 0);\r\n\t\temit UpdatePositionUnclaimedFees(tokenId, 0, 0);\r\n\t}\r\n\t\r\n\tfunction _splitUint(uint256 n, uint256 percentage) internal pure returns (uint256 a, uint256 b) {\r\n\t\ta = n.mul(percentage).div(1e18);\r\n\t\tb = n.sub(a);\r\n\t}\r\n\tfunction split(uint256 tokenId, uint256 percentage) external nonReentrant returns (uint256 newTokenId) {\r\n\t\trequire(percentage <= 1e18, \"TokenizedUniswapV3Position: ABOVE_100_PERCENT\");\r\n\t\taddress owner = _requireOwned(tokenId);\r\n\t\t_checkAuthorized(owner, msg.sender, tokenId);\r\n\t\t_approve(address(0), tokenId, address(0)); // reset approval\r\n\t\t\r\n\t\tPosition memory oldPosition = positions[tokenId];\r\n\t\t(uint256 newLiquidity, uint256 oldLiquidity) = _splitUint(oldPosition.liquidity, percentage);\r\n\t\t(uint256 newUnclaimedFees0, uint256 oldUnclaimedFees0) = _splitUint(oldPosition.unclaimedFees0, percentage);\r\n\t\t(uint256 newUnclaimedFees1, uint256 oldUnclaimedFees1) = _splitUint(oldPosition.unclaimedFees1, percentage);\r\n\t\tpositions[tokenId].liquidity = safe128(oldLiquidity);\r\n\t\tpositions[tokenId].unclaimedFees0 = oldUnclaimedFees0;\r\n\t\tpositions[tokenId].unclaimedFees1 = oldUnclaimedFees1;\r\n\t\tnewTokenId = positionsLength++;\r\n\t\t_mint(owner, newTokenId);\r\n\t\tpositions[newTokenId] = Position({\r\n\t\t\tfee: oldPosition.fee,\r\n\t\t\ttickLower: oldPosition.tickLower,\r\n\t\t\ttickUpper: oldPosition.tickUpper,\r\n\t\t\tliquidity: safe128(newLiquidity),\r\n\t\t\tfeeGrowthInside0LastX128: oldPosition.feeGrowthInside0LastX128,\r\n\t\t\tfeeGrowthInside1LastX128: oldPosition.feeGrowthInside1LastX128,\r\n\t\t\tunclaimedFees0: newUnclaimedFees0,\r\n\t\t\tunclaimedFees1: newUnclaimedFees1\r\n\t\t});\r\n\t\t\r\n\t\temit UpdatePositionLiquidity(tokenId, oldLiquidity);\r\n\t\temit UpdatePositionUnclaimedFees(tokenId, oldUnclaimedFees0, oldUnclaimedFees1);\r\n\t\temit MintPosition(newTokenId, oldPosition.fee, oldPosition.tickLower, oldPosition.tickUpper);\r\n\t\temit UpdatePositionLiquidity(newTokenId, newLiquidity);\r\n\t\temit UpdatePositionUnclaimedFees(newTokenId, newUnclaimedFees0, newUnclaimedFees1);\r\n\t\temit UpdatePositionFeeGrowthInside(newTokenId, oldPosition.feeGrowthInside0LastX128, oldPosition.feeGrowthInside1LastX128);\r\n\t}\r\n\t\r\n\tfunction join(uint256 tokenId, uint256 tokenToJoin) external nonReentrant {\r\n\t\t_checkAuthorized(_requireOwned(tokenToJoin), msg.sender, tokenToJoin);\r\n\t\t\r\n\t\tPosition memory positionA = positions[tokenId];\r\n\t\tPosition memory positionB = positions[tokenToJoin];\r\n\t\t\r\n\t\trequire(tokenId != tokenToJoin, \"TokenizedUniswapV3Position: SAME_ID\");\r\n\t\trequire(positionA.fee == positionB.fee, \"TokenizedUniswapV3Position: INCOMPATIBLE_TOKENS_META\");\r\n\t\trequire(positionA.tickLower == positionB.tickLower, \"TokenizedUniswapV3Position: INCOMPATIBLE_TOKENS_META\");\r\n\t\trequire(positionA.tickUpper == positionB.tickUpper, \"TokenizedUniswapV3Position: INCOMPATIBLE_TOKENS_META\");\r\n\t\t\r\n\t\tuint256 newLiquidity = uint256(positionA.liquidity).add(positionB.liquidity);\r\n\t\t\r\n\t\t// update feeGrowthInside and feeCollected based on the latest snapshot\r\n\t\t// it's not necessary to call burn() in order to update the feeGrowthInside of the position\r\n\t\tuint256 newUnclaimedFees0; uint256 newUnclaimedFees1;\r\n\t\taddress pool = getPool(positionA.fee);\r\n\t\t(\r\n\t\t\tuint256 newFeeGrowthInside0LastX128, \r\n\t\t\tuint256 newFeeGrowthInside1LastX128, \r\n\t\t\tuint256 feeCollectedA0, \r\n\t\t\tuint256 feeCollectedA1\r\n\t\t) = _getfeeCollectedAndGrowth(positionA, pool);\r\n\t\t{\r\n\t\t(\r\n\t\t\tuint256 feeCollectedB0, \r\n\t\t\tuint256 feeCollectedB1\r\n\t\t) = _getFeeCollected(positionB, pool);\r\n\t\tnewUnclaimedFees0 = feeCollectedA0.add(feeCollectedB0);\r\n\t\tnewUnclaimedFees1 = feeCollectedA1.add(feeCollectedB1);\r\n\t\t}\r\n\t\t\r\n\t\tpositions[tokenId].liquidity = safe128(newLiquidity);\r\n\t\tpositions[tokenId].feeGrowthInside0LastX128 = newFeeGrowthInside0LastX128;\r\n\t\tpositions[tokenId].feeGrowthInside1LastX128 = newFeeGrowthInside1LastX128;\r\n\t\tpositions[tokenId].unclaimedFees0 = newUnclaimedFees0;\r\n\t\tpositions[tokenId].unclaimedFees1 = newUnclaimedFees1;\r\n\t\tdelete positions[tokenToJoin];\r\n\t\t_burn(tokenToJoin);\r\n\t\t\r\n\t\temit UpdatePositionLiquidity(tokenId, newLiquidity);\r\n\t\temit UpdatePositionFeeGrowthInside(tokenId, newFeeGrowthInside0LastX128, newFeeGrowthInside1LastX128);\r\n\t\temit UpdatePositionUnclaimedFees(tokenId, newUnclaimedFees0, newUnclaimedFees1);\r\n\t\temit UpdatePositionLiquidity(tokenToJoin, 0);\r\n\t\temit UpdatePositionUnclaimedFees(tokenToJoin, 0, 0);\r\n\t}\r\n\t\r\n\t/*** Autocompounding Module ***/\r\n\t\r\n\tfunction reinvest(uint256 tokenId, address bountyTo) external nonReentrant returns (uint256 bounty0, uint256 bounty1) {\r\n\t\t// 1. Initialize and read fee collected\r\n\t\taddress acModule = ITokenizedUniswapV3Factory(factory).acModule();\r\n\t\tPosition memory position = positions[tokenId];\r\n\t\tPosition memory newPosition = positions[tokenId];\r\n\t\tuint256 feeCollected0; uint256 feeCollected1;\r\n\t\taddress pool = getPool(position.fee);\r\n\t\tIUniswapV3Pool(pool).burn(position.tickLower, position.tickUpper, 0);\r\n\t\t(\r\n\t\t\tnewPosition.feeGrowthInside0LastX128,\r\n\t\t\tnewPosition.feeGrowthInside1LastX128,\r\n\t\t\tfeeCollected0,\r\n\t\t\tfeeCollected1\r\n\t\t) = _getfeeCollectedAndGrowth(position, pool);\r\n\t\trequire(feeCollected0 > 0 || feeCollected1 > 0, \"TokenizedUniswapV3Position: NO_FEES_COLLECTED\");\r\n\t\r\n\t\t// 2. Calculate how much to collect and send it to autocompounder (and update unclaimedFees)\r\n\t\t(uint256 collect0, uint256 collect1, bytes memory data) = IUniswapV3AC(acModule).getToCollect(\r\n\t\t\tposition, \r\n\t\t\ttokenId, \r\n\t\t\tfeeCollected0, \r\n\t\t\tfeeCollected1\r\n\t\t);\r\n\t\tnewPosition.unclaimedFees0 = feeCollected0.sub(collect0, \"TokenizedUniswapV3Position: COLLECT_0_TOO_HIGH\");\r\n\t\tnewPosition.unclaimedFees1 = feeCollected1.sub(collect1, \"TokenizedUniswapV3Position: COLLECT_1_TOO_HIGH\");\r\n\t\t\r\n\t\tIUniswapV3Pool(pool).collect(acModule, position.tickLower, position.tickUpper, safe128(collect0), safe128(collect1));\r\n\t\t\r\n\t\t\r\n\t\t// 3. Let the autocompounder convert the fees to liquidity\r\n\t\t{\r\n\t\tuint256 totalBalanceBefore = totalBalance[position.fee][position.tickLower][position.tickUpper];\r\n\t\t(bounty0, bounty1) = IUniswapV3AC(acModule).mintLiquidity(bountyTo, data);\t\t\r\n\t\t_updateBalance(position.fee, position.tickLower, position.tickUpper);\r\n\t\tuint256 newLiquidity = totalBalance[position.fee][position.tickLower][position.tickUpper].sub(totalBalanceBefore);\r\n\t\trequire(newLiquidity > 0, \"TokenizedUniswapV3Position: NO_LIQUIDITY_ADDED\");\r\n\t\tnewPosition.liquidity = safe128(newLiquidity.add(position.liquidity));\r\n\t\t}\r\n\t\t\r\n\t\t// 4. Update the position\r\n\t\tpositions[tokenId] = newPosition;\r\n\t\t\r\n\t\temit UpdatePositionLiquidity(tokenId, newPosition.liquidity);\r\n\t\temit UpdatePositionFeeGrowthInside(tokenId, newPosition.feeGrowthInside0LastX128, newPosition.feeGrowthInside1LastX128);\r\n\t\temit UpdatePositionUnclaimedFees(tokenId, newPosition.unclaimedFees0, newPosition.unclaimedFees1);\r\n\t}\r\n\t\r\n\t/*** Utilities ***/\r\n\r\n    function safe128(uint n) internal pure returns (uint128) {\r\n        require(n < 2**128, \"Impermax: SAFE128\");\r\n        return uint128(n);\r\n    }\r\n\r\n    function safe160(uint n) internal pure returns (uint160) {\r\n        require(n < 2**160, \"Impermax: SAFE160\");\r\n        return uint160(n);\r\n    }\r\n\t\r\n\t// prevents a contract from calling itself, directly or indirectly.\r\n\tbool internal _notEntered = true;\r\n\tmodifier nonReentrant() {\r\n\t\trequire(_notEntered, \"Impermax: REENTERED\");\r\n\t\t_notEntered = false;\r\n\t\t_;\r\n\t\t_notEntered = true;\r\n\t}\r\n}\r\n\r\n// File: contracts\\extensions\\interfaces\\ITokenizedUniswapV3Deployer.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ITokenizedUniswapV3Deployer {\r\n\tfunction deployNFTLP(address token0, address token1) external returns (address NFTLP);\r\n}\r\n\r\n// File: contracts\\extensions\\TokenizedUniswapV3Deployer.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract TokenizedUniswapV3Deployer is ITokenizedUniswapV3Deployer {\r\n\tconstructor () public {}\r\n\t\r\n\tfunction deployNFTLP(address token0, address token1) external returns (address NFTLP) {\r\n\t\tbytes memory bytecode = type(TokenizedUniswapV3Position).creationCode;\r\n\t\tbytes32 salt = keccak256(abi.encodePacked(msg.sender, token0, token1));\r\n\t\tassembly {\r\n\t\t\tNFTLP := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n\t\t}\r\n\t}\r\n}",
      "abi": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"MintPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"}],\"name\":\"UpdatePositionFeeGrowthInside\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"UpdatePositionLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unclaimedFees0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unclaimedFees1\",\"type\":\"uint256\"}],\"name\":\"UpdatePositionUnclaimedFees\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_COLLECTED_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV3Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"name\":\"_initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyMarginSqrt\",\"type\":\"uint256\"}],\"name\":\"getPositionData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceSqrtX96\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"realX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realY\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTLP.RealXY\",\"name\":\"lowestPrice\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"realX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realY\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTLP.RealXY\",\"name\":\"currentPrice\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"realX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realY\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTLP.RealXY\",\"name\":\"highestPrice\",\"type\":\"tuple\"}],\"internalType\":\"struct INFTLP.RealXYs\",\"name\":\"realXYs\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenToJoin\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"oraclePriceSqrtX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedFees0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedFees1\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"positionsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bountyTo\",\"type\":\"address\"}],\"name\":\"reinvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bounty0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bounty1\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"split\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapV3Factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "contract_name": "TokenizedUniswapV3Position",
      "compiler_version": "v0.5.16+commit.9c3226ce",
      "optimization_used": "1",
      "runs": "999999",
      "constructor_arguments": "",
      "evm_version": "Default",
      "library": "",
      "license_type": "BSL 1.1",
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608": {
      "address": "0x1c450d7d1fd98a0b04e30decfc83497b33a4f608",
      "has_source_code": true,
      "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/UniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.7.6;\\n\\nimport './interfaces/IUniswapV3Pool.sol';\\n\\nimport './NoDelegateCall.sol';\\n\\nimport './libraries/LowGasSafeMath.sol';\\nimport './libraries/SafeCast.sol';\\nimport './libraries/Tick.sol';\\nimport './libraries/TickBitmap.sol';\\nimport './libraries/Position.sol';\\nimport './libraries/Oracle.sol';\\n\\nimport './libraries/FullMath.sol';\\nimport './libraries/FixedPoint128.sol';\\nimport './libraries/TransferHelper.sol';\\nimport './libraries/TickMath.sol';\\nimport './libraries/LiquidityMath.sol';\\nimport './libraries/SqrtPriceMath.sol';\\nimport './libraries/SwapMath.sol';\\n\\nimport './interfaces/IUniswapV3PoolDeployer.sol';\\nimport './interfaces/IUniswapV3Factory.sol';\\nimport './interfaces/IERC20Minimal.sol';\\nimport './interfaces/callback/IUniswapV3MintCallback.sol';\\nimport './interfaces/callback/IUniswapV3SwapCallback.sol';\\nimport './interfaces/callback/IUniswapV3FlashCallback.sol';\\n\\ncontract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {\\n    using LowGasSafeMath for uint256;\\n    using LowGasSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using Tick for mapping(int24 => Tick.Info);\\n    using TickBitmap for mapping(int16 => uint256);\\n    using Position for mapping(bytes32 => Position.Info);\\n    using Position for Position.Info;\\n    using Oracle for Oracle.Observation[65535];\\n\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    address public immutable override factory;\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    address public immutable override token0;\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    address public immutable override token1;\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    uint24 public immutable override fee;\\n\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    int24 public immutable override tickSpacing;\\n\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    uint128 public immutable override maxLiquidityPerTick;\\n\\n    struct Slot0 {\\n        // the current price\\n        uint160 sqrtPriceX96;\\n        // the current tick\\n        int24 tick;\\n        // the most-recently updated index of the observations array\\n        uint16 observationIndex;\\n        // the current maximum number of observations that are being stored\\n        uint16 observationCardinality;\\n        // the next maximum number of observations to store, triggered in observations.write\\n        uint16 observationCardinalityNext;\\n        // the current protocol fee as a percentage of the swap fee taken on withdrawal\\n        // represented as an integer denominator (1/x)%\\n        uint8 feeProtocol;\\n        // whether the pool is locked\\n        bool unlocked;\\n    }\\n    /// @inheritdoc IUniswapV3PoolState\\n    Slot0 public override slot0;\\n\\n    /// @inheritdoc IUniswapV3PoolState\\n    uint256 public override feeGrowthGlobal0X128;\\n    /// @inheritdoc IUniswapV3PoolState\\n    uint256 public override feeGrowthGlobal1X128;\\n\\n    // accumulated protocol fees in token0/token1 units\\n    struct ProtocolFees {\\n        uint128 token0;\\n        uint128 token1;\\n    }\\n    /// @inheritdoc IUniswapV3PoolState\\n    ProtocolFees public override protocolFees;\\n\\n    /// @inheritdoc IUniswapV3PoolState\\n    uint128 public override liquidity;\\n\\n    /// @inheritdoc IUniswapV3PoolState\\n    mapping(int24 => Tick.Info) public override ticks;\\n    /// @inheritdoc IUniswapV3PoolState\\n    mapping(int16 => uint256) public override tickBitmap;\\n    /// @inheritdoc IUniswapV3PoolState\\n    mapping(bytes32 => Position.Info) public override positions;\\n    /// @inheritdoc IUniswapV3PoolState\\n    Oracle.Observation[65535] public override observations;\\n\\n    /// @dev Mutually exclusive reentrancy protection into the pool to/from a method. This method also prevents entrance\\n    /// to a function before the pool is initialized. The reentrancy guard is required throughout the contract because\\n    /// we use balance checks to determine the payment status of interactions such as mint, swap and flash.\\n    modifier lock() {\\n        require(slot0.unlocked, 'LOK');\\n        slot0.unlocked = false;\\n        _;\\n        slot0.unlocked = true;\\n    }\\n\\n    /// @dev Prevents calling a function from anyone except the address returned by IUniswapV3Factory#owner()\\n    modifier onlyFactoryOwner() {\\n        require(msg.sender == IUniswapV3Factory(factory).owner());\\n        _;\\n    }\\n\\n    constructor() {\\n        int24 _tickSpacing;\\n        (factory, token0, token1, fee, _tickSpacing) = IUniswapV3PoolDeployer(msg.sender).parameters();\\n        tickSpacing = _tickSpacing;\\n\\n        maxLiquidityPerTick = Tick.tickSpacingToMaxLiquidityPerTick(_tickSpacing);\\n    }\\n\\n    /// @dev Common checks for valid tick inputs.\\n    function checkTicks(int24 tickLower, int24 tickUpper) private pure {\\n        require(tickLower < tickUpper, 'TLU');\\n        require(tickLower >= TickMath.MIN_TICK, 'TLM');\\n        require(tickUpper <= TickMath.MAX_TICK, 'TUM');\\n    }\\n\\n    /// @dev Returns the block timestamp truncated to 32 bits, i.e. mod 2**32. This method is overridden in tests.\\n    function _blockTimestamp() internal view virtual returns (uint32) {\\n        return uint32(block.timestamp); // truncation is desired\\n    }\\n\\n    /// @dev Get the pool's balance of token0\\n    /// @dev This function is gas optimized to avoid a redundant extcodesize check in addition to the returndatasize\\n    /// check\\n    function balance0() private view returns (uint256) {\\n        (bool success, bytes memory data) =\\n            token0.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, address(this)));\\n        require(success && data.length >= 32);\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Get the pool's balance of token1\\n    /// @dev This function is gas optimized to avoid a redundant extcodesize check in addition to the returndatasize\\n    /// check\\n    function balance1() private view returns (uint256) {\\n        (bool success, bytes memory data) =\\n            token1.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, address(this)));\\n        require(success && data.length >= 32);\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolDerivedState\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        override\\n        noDelegateCall\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        )\\n    {\\n        checkTicks(tickLower, tickUpper);\\n\\n        int56 tickCumulativeLower;\\n        int56 tickCumulativeUpper;\\n        uint160 secondsPerLiquidityOutsideLowerX128;\\n        uint160 secondsPerLiquidityOutsideUpperX128;\\n        uint32 secondsOutsideLower;\\n        uint32 secondsOutsideUpper;\\n\\n        {\\n            Tick.Info storage lower = ticks[tickLower];\\n            Tick.Info storage upper = ticks[tickUpper];\\n            bool initializedLower;\\n            (tickCumulativeLower, secondsPerLiquidityOutsideLowerX128, secondsOutsideLower, initializedLower) = (\\n                lower.tickCumulativeOutside,\\n                lower.secondsPerLiquidityOutsideX128,\\n                lower.secondsOutside,\\n                lower.initialized\\n            );\\n            require(initializedLower);\\n\\n            bool initializedUpper;\\n            (tickCumulativeUpper, secondsPerLiquidityOutsideUpperX128, secondsOutsideUpper, initializedUpper) = (\\n                upper.tickCumulativeOutside,\\n                upper.secondsPerLiquidityOutsideX128,\\n                upper.secondsOutside,\\n                upper.initialized\\n            );\\n            require(initializedUpper);\\n        }\\n\\n        Slot0 memory _slot0 = slot0;\\n\\n        if (_slot0.tick < tickLower) {\\n            return (\\n                tickCumulativeLower - tickCumulativeUpper,\\n                secondsPerLiquidityOutsideLowerX128 - secondsPerLiquidityOutsideUpperX128,\\n                secondsOutsideLower - secondsOutsideUpper\\n            );\\n        } else if (_slot0.tick < tickUpper) {\\n            uint32 time = _blockTimestamp();\\n            (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) =\\n                observations.observeSingle(\\n                    time,\\n                    0,\\n                    _slot0.tick,\\n                    _slot0.observationIndex,\\n                    liquidity,\\n                    _slot0.observationCardinality\\n                );\\n            return (\\n                tickCumulative - tickCumulativeLower - tickCumulativeUpper,\\n                secondsPerLiquidityCumulativeX128 -\\n                    secondsPerLiquidityOutsideLowerX128 -\\n                    secondsPerLiquidityOutsideUpperX128,\\n                time - secondsOutsideLower - secondsOutsideUpper\\n            );\\n        } else {\\n            return (\\n                tickCumulativeUpper - tickCumulativeLower,\\n                secondsPerLiquidityOutsideUpperX128 - secondsPerLiquidityOutsideLowerX128,\\n                secondsOutsideUpper - secondsOutsideLower\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolDerivedState\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        override\\n        noDelegateCall\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s)\\n    {\\n        return\\n            observations.observe(\\n                _blockTimestamp(),\\n                secondsAgos,\\n                slot0.tick,\\n                slot0.observationIndex,\\n                liquidity,\\n                slot0.observationCardinality\\n            );\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext)\\n        external\\n        override\\n        lock\\n        noDelegateCall\\n    {\\n        uint16 observationCardinalityNextOld = slot0.observationCardinalityNext; // for the event\\n        uint16 observationCardinalityNextNew =\\n            observations.grow(observationCardinalityNextOld, observationCardinalityNext);\\n        slot0.observationCardinalityNext = observationCardinalityNextNew;\\n        if (observationCardinalityNextOld != observationCardinalityNextNew)\\n            emit IncreaseObservationCardinalityNext(observationCardinalityNextOld, observationCardinalityNextNew);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    /// @dev not locked because it initializes unlocked\\n    function initialize(uint160 sqrtPriceX96) external override {\\n        require(slot0.sqrtPriceX96 == 0, 'AI');\\n\\n        int24 tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96);\\n\\n        (uint16 cardinality, uint16 cardinalityNext) = observations.initialize(_blockTimestamp());\\n\\n        slot0 = Slot0({\\n            sqrtPriceX96: sqrtPriceX96,\\n            tick: tick,\\n            observationIndex: 0,\\n            observationCardinality: cardinality,\\n            observationCardinalityNext: cardinalityNext,\\n            feeProtocol: 0,\\n            unlocked: true\\n        });\\n\\n        emit Initialize(sqrtPriceX96, tick);\\n    }\\n\\n    struct ModifyPositionParams {\\n        // the address that owns the position\\n        address owner;\\n        // the lower and upper tick of the position\\n        int24 tickLower;\\n        int24 tickUpper;\\n        // any change in liquidity\\n        int128 liquidityDelta;\\n    }\\n\\n    /// @dev Effect some changes to a position\\n    /// @param params the position details and the change to the position's liquidity to effect\\n    /// @return position a storage pointer referencing the position with the given owner and tick range\\n    /// @return amount0 the amount of token0 owed to the pool, negative if the pool should pay the recipient\\n    /// @return amount1 the amount of token1 owed to the pool, negative if the pool should pay the recipient\\n    function _modifyPosition(ModifyPositionParams memory params)\\n        private\\n        noDelegateCall\\n        returns (\\n            Position.Info storage position,\\n            int256 amount0,\\n            int256 amount1\\n        )\\n    {\\n        checkTicks(params.tickLower, params.tickUpper);\\n\\n        Slot0 memory _slot0 = slot0; // SLOAD for gas optimization\\n\\n        position = _updatePosition(\\n            params.owner,\\n            params.tickLower,\\n            params.tickUpper,\\n            params.liquidityDelta,\\n            _slot0.tick\\n        );\\n\\n        if (params.liquidityDelta != 0) {\\n            if (_slot0.tick < params.tickLower) {\\n                // current tick is below the passed range; liquidity can only become in range by crossing from left to\\n                // right, when we'll need _more_ token0 (it's becoming more valuable) so user must provide it\\n                amount0 = SqrtPriceMath.getAmount0Delta(\\n                    TickMath.getSqrtRatioAtTick(params.tickLower),\\n                    TickMath.getSqrtRatioAtTick(params.tickUpper),\\n                    params.liquidityDelta\\n                );\\n            } else if (_slot0.tick < params.tickUpper) {\\n                // current tick is inside the passed range\\n                uint128 liquidityBefore = liquidity; // SLOAD for gas optimization\\n\\n                // write an oracle entry\\n                (slot0.observationIndex, slot0.observationCardinality) = observations.write(\\n                    _slot0.observationIndex,\\n                    _blockTimestamp(),\\n                    _slot0.tick,\\n                    liquidityBefore,\\n                    _slot0.observationCardinality,\\n                    _slot0.observationCardinalityNext\\n                );\\n\\n                amount0 = SqrtPriceMath.getAmount0Delta(\\n                    _slot0.sqrtPriceX96,\\n                    TickMath.getSqrtRatioAtTick(params.tickUpper),\\n                    params.liquidityDelta\\n                );\\n                amount1 = SqrtPriceMath.getAmount1Delta(\\n                    TickMath.getSqrtRatioAtTick(params.tickLower),\\n                    _slot0.sqrtPriceX96,\\n                    params.liquidityDelta\\n                );\\n\\n                liquidity = LiquidityMath.addDelta(liquidityBefore, params.liquidityDelta);\\n            } else {\\n                // current tick is above the passed range; liquidity can only become in range by crossing from right to\\n                // left, when we'll need _more_ token1 (it's becoming more valuable) so user must provide it\\n                amount1 = SqrtPriceMath.getAmount1Delta(\\n                    TickMath.getSqrtRatioAtTick(params.tickLower),\\n                    TickMath.getSqrtRatioAtTick(params.tickUpper),\\n                    params.liquidityDelta\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @dev Gets and updates a position with the given liquidity delta\\n    /// @param owner the owner of the position\\n    /// @param tickLower the lower tick of the position's tick range\\n    /// @param tickUpper the upper tick of the position's tick range\\n    /// @param tick the current tick, passed to avoid sloads\\n    function _updatePosition(\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int128 liquidityDelta,\\n        int24 tick\\n    ) private returns (Position.Info storage position) {\\n        position = positions.get(owner, tickLower, tickUpper);\\n\\n        uint256 _feeGrowthGlobal0X128 = feeGrowthGlobal0X128; // SLOAD for gas optimization\\n        uint256 _feeGrowthGlobal1X128 = feeGrowthGlobal1X128; // SLOAD for gas optimization\\n\\n        // if we need to update the ticks, do it\\n        bool flippedLower;\\n        bool flippedUpper;\\n        if (liquidityDelta != 0) {\\n            uint32 time = _blockTimestamp();\\n            (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) =\\n                observations.observeSingle(\\n                    time,\\n                    0,\\n                    slot0.tick,\\n                    slot0.observationIndex,\\n                    liquidity,\\n                    slot0.observationCardinality\\n                );\\n\\n            flippedLower = ticks.update(\\n                tickLower,\\n                tick,\\n                liquidityDelta,\\n                _feeGrowthGlobal0X128,\\n                _feeGrowthGlobal1X128,\\n                secondsPerLiquidityCumulativeX128,\\n                tickCumulative,\\n                time,\\n                false,\\n                maxLiquidityPerTick\\n            );\\n            flippedUpper = ticks.update(\\n                tickUpper,\\n                tick,\\n                liquidityDelta,\\n                _feeGrowthGlobal0X128,\\n                _feeGrowthGlobal1X128,\\n                secondsPerLiquidityCumulativeX128,\\n                tickCumulative,\\n                time,\\n                true,\\n                maxLiquidityPerTick\\n            );\\n\\n            if (flippedLower) {\\n                tickBitmap.flipTick(tickLower, tickSpacing);\\n            }\\n            if (flippedUpper) {\\n                tickBitmap.flipTick(tickUpper, tickSpacing);\\n            }\\n        }\\n\\n        (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) =\\n            ticks.getFeeGrowthInside(tickLower, tickUpper, tick, _feeGrowthGlobal0X128, _feeGrowthGlobal1X128);\\n\\n        position.update(liquidityDelta, feeGrowthInside0X128, feeGrowthInside1X128);\\n\\n        // clear any tick data that is no longer needed\\n        if (liquidityDelta < 0) {\\n            if (flippedLower) {\\n                ticks.clear(tickLower);\\n            }\\n            if (flippedUpper) {\\n                ticks.clear(tickUpper);\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    /// @dev noDelegateCall is applied indirectly via _modifyPosition\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external override lock returns (uint256 amount0, uint256 amount1) {\\n        require(amount > 0);\\n        (, int256 amount0Int, int256 amount1Int) =\\n            _modifyPosition(\\n                ModifyPositionParams({\\n                    owner: recipient,\\n                    tickLower: tickLower,\\n                    tickUpper: tickUpper,\\n                    liquidityDelta: int256(amount).toInt128()\\n                })\\n            );\\n\\n        amount0 = uint256(amount0Int);\\n        amount1 = uint256(amount1Int);\\n\\n        uint256 balance0Before;\\n        uint256 balance1Before;\\n        if (amount0 > 0) balance0Before = balance0();\\n        if (amount1 > 0) balance1Before = balance1();\\n        IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0, amount1, data);\\n        if (amount0 > 0) require(balance0Before.add(amount0) <= balance0(), 'M0');\\n        if (amount1 > 0) require(balance1Before.add(amount1) <= balance1(), 'M1');\\n\\n        emit Mint(msg.sender, recipient, tickLower, tickUpper, amount, amount0, amount1);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external override lock returns (uint128 amount0, uint128 amount1) {\\n        // we don't need to checkTicks here, because invalid positions will never have non-zero tokensOwed{0,1}\\n        Position.Info storage position = positions.get(msg.sender, tickLower, tickUpper);\\n\\n        amount0 = amount0Requested > position.tokensOwed0 ? position.tokensOwed0 : amount0Requested;\\n        amount1 = amount1Requested > position.tokensOwed1 ? position.tokensOwed1 : amount1Requested;\\n\\n        if (amount0 > 0) {\\n            position.tokensOwed0 -= amount0;\\n            TransferHelper.safeTransfer(token0, recipient, amount0);\\n        }\\n        if (amount1 > 0) {\\n            position.tokensOwed1 -= amount1;\\n            TransferHelper.safeTransfer(token1, recipient, amount1);\\n        }\\n\\n        emit Collect(msg.sender, recipient, tickLower, tickUpper, amount0, amount1);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    /// @dev noDelegateCall is applied indirectly via _modifyPosition\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external override lock returns (uint256 amount0, uint256 amount1) {\\n        (Position.Info storage position, int256 amount0Int, int256 amount1Int) =\\n            _modifyPosition(\\n                ModifyPositionParams({\\n                    owner: msg.sender,\\n                    tickLower: tickLower,\\n                    tickUpper: tickUpper,\\n                    liquidityDelta: -int256(amount).toInt128()\\n                })\\n            );\\n\\n        amount0 = uint256(-amount0Int);\\n        amount1 = uint256(-amount1Int);\\n\\n        if (amount0 > 0 || amount1 > 0) {\\n            (position.tokensOwed0, position.tokensOwed1) = (\\n                position.tokensOwed0 + uint128(amount0),\\n                position.tokensOwed1 + uint128(amount1)\\n            );\\n        }\\n\\n        emit Burn(msg.sender, tickLower, tickUpper, amount, amount0, amount1);\\n    }\\n\\n    struct SwapCache {\\n        // the protocol fee for the input token\\n        uint8 feeProtocol;\\n        // liquidity at the beginning of the swap\\n        uint128 liquidityStart;\\n        // the timestamp of the current block\\n        uint32 blockTimestamp;\\n        // the current value of the tick accumulator, computed only if we cross an initialized tick\\n        int56 tickCumulative;\\n        // the current value of seconds per liquidity accumulator, computed only if we cross an initialized tick\\n        uint160 secondsPerLiquidityCumulativeX128;\\n        // whether we've computed and cached the above two accumulators\\n        bool computedLatestObservation;\\n    }\\n\\n    // the top level state of the swap, the results of which are recorded in storage at the end\\n    struct SwapState {\\n        // the amount remaining to be swapped in/out of the input/output asset\\n        int256 amountSpecifiedRemaining;\\n        // the amount already swapped out/in of the output/input asset\\n        int256 amountCalculated;\\n        // current sqrt(price)\\n        uint160 sqrtPriceX96;\\n        // the tick associated with the current price\\n        int24 tick;\\n        // the global fee growth of the input token\\n        uint256 feeGrowthGlobalX128;\\n        // amount of input token paid as protocol fee\\n        uint128 protocolFee;\\n        // the current liquidity in range\\n        uint128 liquidity;\\n    }\\n\\n    struct StepComputations {\\n        // the price at the beginning of the step\\n        uint160 sqrtPriceStartX96;\\n        // the next tick to swap to from the current tick in the swap direction\\n        int24 tickNext;\\n        // whether tickNext is initialized or not\\n        bool initialized;\\n        // sqrt(price) for the next tick (1/0)\\n        uint160 sqrtPriceNextX96;\\n        // how much is being swapped in in this step\\n        uint256 amountIn;\\n        // how much is being swapped out\\n        uint256 amountOut;\\n        // how much fee is being paid in\\n        uint256 feeAmount;\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external override noDelegateCall returns (int256 amount0, int256 amount1) {\\n        require(amountSpecified != 0, 'AS');\\n\\n        Slot0 memory slot0Start = slot0;\\n\\n        require(slot0Start.unlocked, 'LOK');\\n        require(\\n            zeroForOne\\n                ? sqrtPriceLimitX96 < slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 > TickMath.MIN_SQRT_RATIO\\n                : sqrtPriceLimitX96 > slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 < TickMath.MAX_SQRT_RATIO,\\n            'SPL'\\n        );\\n\\n        slot0.unlocked = false;\\n\\n        SwapCache memory cache =\\n            SwapCache({\\n                liquidityStart: liquidity,\\n                blockTimestamp: _blockTimestamp(),\\n                feeProtocol: zeroForOne ? (slot0Start.feeProtocol % 16) : (slot0Start.feeProtocol >> 4),\\n                secondsPerLiquidityCumulativeX128: 0,\\n                tickCumulative: 0,\\n                computedLatestObservation: false\\n            });\\n\\n        bool exactInput = amountSpecified > 0;\\n\\n        SwapState memory state =\\n            SwapState({\\n                amountSpecifiedRemaining: amountSpecified,\\n                amountCalculated: 0,\\n                sqrtPriceX96: slot0Start.sqrtPriceX96,\\n                tick: slot0Start.tick,\\n                feeGrowthGlobalX128: zeroForOne ? feeGrowthGlobal0X128 : feeGrowthGlobal1X128,\\n                protocolFee: 0,\\n                liquidity: cache.liquidityStart\\n            });\\n\\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\\n            StepComputations memory step;\\n\\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\\n\\n            (step.tickNext, step.initialized) = tickBitmap.nextInitializedTickWithinOneWord(\\n                state.tick,\\n                tickSpacing,\\n                zeroForOne\\n            );\\n\\n            // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\\n            if (step.tickNext < TickMath.MIN_TICK) {\\n                step.tickNext = TickMath.MIN_TICK;\\n            } else if (step.tickNext > TickMath.MAX_TICK) {\\n                step.tickNext = TickMath.MAX_TICK;\\n            }\\n\\n            // get the price for the next tick\\n            step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);\\n\\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\\n                state.sqrtPriceX96,\\n                (zeroForOne ? step.sqrtPriceNextX96 < sqrtPriceLimitX96 : step.sqrtPriceNextX96 > sqrtPriceLimitX96)\\n                    ? sqrtPriceLimitX96\\n                    : step.sqrtPriceNextX96,\\n                state.liquidity,\\n                state.amountSpecifiedRemaining,\\n                fee\\n            );\\n\\n            if (exactInput) {\\n                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\\n                state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());\\n            } else {\\n                state.amountSpecifiedRemaining += step.amountOut.toInt256();\\n                state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());\\n            }\\n\\n            // if the protocol fee is on, calculate how much is owed, decrement feeAmount, and increment protocolFee\\n            if (cache.feeProtocol > 0) {\\n                uint256 delta = step.feeAmount / cache.feeProtocol;\\n                step.feeAmount -= delta;\\n                state.protocolFee += uint128(delta);\\n            }\\n\\n            // update global fee tracker\\n            if (state.liquidity > 0)\\n                state.feeGrowthGlobalX128 += FullMath.mulDiv(step.feeAmount, FixedPoint128.Q128, state.liquidity);\\n\\n            // shift tick if we reached the next price\\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\\n                // if the tick is initialized, run the tick transition\\n                if (step.initialized) {\\n                    // check for the placeholder value, which we replace with the actual value the first time the swap\\n                    // crosses an initialized tick\\n                    if (!cache.computedLatestObservation) {\\n                        (cache.tickCumulative, cache.secondsPerLiquidityCumulativeX128) = observations.observeSingle(\\n                            cache.blockTimestamp,\\n                            0,\\n                            slot0Start.tick,\\n                            slot0Start.observationIndex,\\n                            cache.liquidityStart,\\n                            slot0Start.observationCardinality\\n                        );\\n                        cache.computedLatestObservation = true;\\n                    }\\n                    int128 liquidityNet =\\n                        ticks.cross(\\n                            step.tickNext,\\n                            (zeroForOne ? state.feeGrowthGlobalX128 : feeGrowthGlobal0X128),\\n                            (zeroForOne ? feeGrowthGlobal1X128 : state.feeGrowthGlobalX128),\\n                            cache.secondsPerLiquidityCumulativeX128,\\n                            cache.tickCumulative,\\n                            cache.blockTimestamp\\n                        );\\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\\n                    // safe because liquidityNet cannot be type(int128).min\\n                    if (zeroForOne) liquidityNet = -liquidityNet;\\n\\n                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\\n                }\\n\\n                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\\n            }\\n        }\\n\\n        // update tick and write an oracle entry if the tick change\\n        if (state.tick != slot0Start.tick) {\\n            (uint16 observationIndex, uint16 observationCardinality) =\\n                observations.write(\\n                    slot0Start.observationIndex,\\n                    cache.blockTimestamp,\\n                    slot0Start.tick,\\n                    cache.liquidityStart,\\n                    slot0Start.observationCardinality,\\n                    slot0Start.observationCardinalityNext\\n                );\\n            (slot0.sqrtPriceX96, slot0.tick, slot0.observationIndex, slot0.observationCardinality) = (\\n                state.sqrtPriceX96,\\n                state.tick,\\n                observationIndex,\\n                observationCardinality\\n            );\\n        } else {\\n            // otherwise just update the price\\n            slot0.sqrtPriceX96 = state.sqrtPriceX96;\\n        }\\n\\n        // update liquidity if it changed\\n        if (cache.liquidityStart != state.liquidity) liquidity = state.liquidity;\\n\\n        // update fee growth global and, if necessary, protocol fees\\n        // overflow is acceptable, protocol has to withdraw before it hits type(uint128).max fees\\n        if (zeroForOne) {\\n            feeGrowthGlobal0X128 = state.feeGrowthGlobalX128;\\n            if (state.protocolFee > 0) protocolFees.token0 += state.protocolFee;\\n        } else {\\n            feeGrowthGlobal1X128 = state.feeGrowthGlobalX128;\\n            if (state.protocolFee > 0) protocolFees.token1 += state.protocolFee;\\n        }\\n\\n        (amount0, amount1) = zeroForOne == exactInput\\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\\n\\n        // do the transfers and collect payment\\n        if (zeroForOne) {\\n            if (amount1 < 0) TransferHelper.safeTransfer(token1, recipient, uint256(-amount1));\\n\\n            uint256 balance0Before = balance0();\\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);\\n            require(balance0Before.add(uint256(amount0)) <= balance0(), 'IIA');\\n        } else {\\n            if (amount0 < 0) TransferHelper.safeTransfer(token0, recipient, uint256(-amount0));\\n\\n            uint256 balance1Before = balance1();\\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);\\n            require(balance1Before.add(uint256(amount1)) <= balance1(), 'IIA');\\n        }\\n\\n        emit Swap(msg.sender, recipient, amount0, amount1, state.sqrtPriceX96, state.liquidity, state.tick);\\n        slot0.unlocked = true;\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external override lock noDelegateCall {\\n        uint128 _liquidity = liquidity;\\n        require(_liquidity > 0, 'L');\\n\\n        uint256 fee0 = FullMath.mulDivRoundingUp(amount0, fee, 1e6);\\n        uint256 fee1 = FullMath.mulDivRoundingUp(amount1, fee, 1e6);\\n        uint256 balance0Before = balance0();\\n        uint256 balance1Before = balance1();\\n\\n        if (amount0 > 0) TransferHelper.safeTransfer(token0, recipient, amount0);\\n        if (amount1 > 0) TransferHelper.safeTransfer(token1, recipient, amount1);\\n\\n        IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0, fee1, data);\\n\\n        uint256 balance0After = balance0();\\n        uint256 balance1After = balance1();\\n\\n        require(balance0Before.add(fee0) <= balance0After, 'F0');\\n        require(balance1Before.add(fee1) <= balance1After, 'F1');\\n\\n        // sub is safe because we know balanceAfter is gt balanceBefore by at least fee\\n        uint256 paid0 = balance0After - balance0Before;\\n        uint256 paid1 = balance1After - balance1Before;\\n\\n        if (paid0 > 0) {\\n            uint8 feeProtocol0 = slot0.feeProtocol % 16;\\n            uint256 fees0 = feeProtocol0 == 0 ? 0 : paid0 / feeProtocol0;\\n            if (uint128(fees0) > 0) protocolFees.token0 += uint128(fees0);\\n            feeGrowthGlobal0X128 += FullMath.mulDiv(paid0 - fees0, FixedPoint128.Q128, _liquidity);\\n        }\\n        if (paid1 > 0) {\\n            uint8 feeProtocol1 = slot0.feeProtocol >> 4;\\n            uint256 fees1 = feeProtocol1 == 0 ? 0 : paid1 / feeProtocol1;\\n            if (uint128(fees1) > 0) protocolFees.token1 += uint128(fees1);\\n            feeGrowthGlobal1X128 += FullMath.mulDiv(paid1 - fees1, FixedPoint128.Q128, _liquidity);\\n        }\\n\\n        emit Flash(msg.sender, recipient, amount0, amount1, paid0, paid1);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolOwnerActions\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external override lock onlyFactoryOwner {\\n        require(\\n            (feeProtocol0 == 0 || (feeProtocol0 >= 4 && feeProtocol0 <= 10)) &&\\n                (feeProtocol1 == 0 || (feeProtocol1 >= 4 && feeProtocol1 <= 10))\\n        );\\n        uint8 feeProtocolOld = slot0.feeProtocol;\\n        slot0.feeProtocol = feeProtocol0 + (feeProtocol1 << 4);\\n        emit SetFeeProtocol(feeProtocolOld % 16, feeProtocolOld >> 4, feeProtocol0, feeProtocol1);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolOwnerActions\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external override lock onlyFactoryOwner returns (uint128 amount0, uint128 amount1) {\\n        amount0 = amount0Requested > protocolFees.token0 ? protocolFees.token0 : amount0Requested;\\n        amount1 = amount1Requested > protocolFees.token1 ? protocolFees.token1 : amount1Requested;\\n\\n        if (amount0 > 0) {\\n            if (amount0 == protocolFees.token0) amount0--; // ensure that the slot is not cleared, for gas savings\\n            protocolFees.token0 -= amount0;\\n            TransferHelper.safeTransfer(token0, recipient, amount0);\\n        }\\n        if (amount1 > 0) {\\n            if (amount1 == protocolFees.token1) amount1--; // ensure that the slot is not cleared, for gas savings\\n            protocolFees.token1 -= amount1;\\n            TransferHelper.safeTransfer(token1, recipient, amount1);\\n        }\\n\\n        emit CollectProtocol(msg.sender, recipient, amount0, amount1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\"\r\n    },\r\n    \"contracts/NoDelegateCall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.7.6;\\n\\n/// @title Prevents delegatecall to a contract\\n/// @notice Base contract that provides a modifier for preventing delegatecall to methods in a child contract\\nabstract contract NoDelegateCall {\\n    /// @dev The original address of this contract\\n    address private immutable original;\\n\\n    constructor() {\\n        // Immutables are computed in the init code of the contract, and then inlined into the deployed bytecode.\\n        // In other words, this variable won't change when it's checked at runtime.\\n        original = address(this);\\n    }\\n\\n    /// @dev Private method is used instead of inlining into modifier because modifiers are copied into each method,\\n    ///     and the use of immutable means the address bytes are copied in every place the modifier is used.\\n    function checkNotDelegateCall() private view {\\n        require(address(this) == original);\\n    }\\n\\n    /// @notice Prevents delegatecall into the modified method\\n    modifier noDelegateCall() {\\n        checkNotDelegateCall();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LowGasSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Tick.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0 <0.8.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './TickMath.sol';\\nimport './LiquidityMath.sol';\\n\\n/// @title Tick\\n/// @notice Contains functions for managing tick processes and relevant calculations\\nlibrary Tick {\\n    using LowGasSafeMath for int256;\\n    using SafeCast for int256;\\n\\n    // info stored for each initialized individual tick\\n    struct Info {\\n        // the total position liquidity that references this tick\\n        uint128 liquidityGross;\\n        // amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),\\n        int128 liquidityNet;\\n        // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\\n        uint256 feeGrowthOutside0X128;\\n        uint256 feeGrowthOutside1X128;\\n        // the cumulative tick value on the other side of the tick\\n        int56 tickCumulativeOutside;\\n        // the seconds per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\\n        uint160 secondsPerLiquidityOutsideX128;\\n        // the seconds spent on the other side of the tick (relative to the current tick)\\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\\n        uint32 secondsOutside;\\n        // true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0\\n        // these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks\\n        bool initialized;\\n    }\\n\\n    /// @notice Derives max liquidity per tick from given tick spacing\\n    /// @dev Executed within the pool constructor\\n    /// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\\n    ///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// @return The max liquidity per tick\\n    function tickSpacingToMaxLiquidityPerTick(int24 tickSpacing) internal pure returns (uint128) {\\n        int24 minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing;\\n        int24 maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing;\\n        uint24 numTicks = uint24((maxTick - minTick) / tickSpacing) + 1;\\n        return type(uint128).max / numTicks;\\n    }\\n\\n    /// @notice Retrieves fee growth data\\n    /// @param self The mapping containing all tick information for initialized ticks\\n    /// @param tickLower The lower tick boundary of the position\\n    /// @param tickUpper The upper tick boundary of the position\\n    /// @param tickCurrent The current tick\\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\\n    /// @return feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\\n    /// @return feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\\n    function getFeeGrowthInside(\\n        mapping(int24 => Tick.Info) storage self,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int24 tickCurrent,\\n        uint256 feeGrowthGlobal0X128,\\n        uint256 feeGrowthGlobal1X128\\n    ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {\\n        Info storage lower = self[tickLower];\\n        Info storage upper = self[tickUpper];\\n\\n        // calculate fee growth below\\n        uint256 feeGrowthBelow0X128;\\n        uint256 feeGrowthBelow1X128;\\n        if (tickCurrent >= tickLower) {\\n            feeGrowthBelow0X128 = lower.feeGrowthOutside0X128;\\n            feeGrowthBelow1X128 = lower.feeGrowthOutside1X128;\\n        } else {\\n            feeGrowthBelow0X128 = feeGrowthGlobal0X128 - lower.feeGrowthOutside0X128;\\n            feeGrowthBelow1X128 = feeGrowthGlobal1X128 - lower.feeGrowthOutside1X128;\\n        }\\n\\n        // calculate fee growth above\\n        uint256 feeGrowthAbove0X128;\\n        uint256 feeGrowthAbove1X128;\\n        if (tickCurrent < tickUpper) {\\n            feeGrowthAbove0X128 = upper.feeGrowthOutside0X128;\\n            feeGrowthAbove1X128 = upper.feeGrowthOutside1X128;\\n        } else {\\n            feeGrowthAbove0X128 = feeGrowthGlobal0X128 - upper.feeGrowthOutside0X128;\\n            feeGrowthAbove1X128 = feeGrowthGlobal1X128 - upper.feeGrowthOutside1X128;\\n        }\\n\\n        feeGrowthInside0X128 = feeGrowthGlobal0X128 - feeGrowthBelow0X128 - feeGrowthAbove0X128;\\n        feeGrowthInside1X128 = feeGrowthGlobal1X128 - feeGrowthBelow1X128 - feeGrowthAbove1X128;\\n    }\\n\\n    /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\\n    /// @param self The mapping containing all tick information for initialized ticks\\n    /// @param tick The tick that will be updated\\n    /// @param tickCurrent The current tick\\n    /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\\n    /// @param secondsPerLiquidityCumulativeX128 The all-time seconds per max(1, liquidity) of the pool\\n    /// @param tickCumulative The tick * time elapsed since the pool was first initialized\\n    /// @param time The current block timestamp cast to a uint32\\n    /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\\n    /// @param maxLiquidity The maximum liquidity allocation for a single tick\\n    /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\\n    function update(\\n        mapping(int24 => Tick.Info) storage self,\\n        int24 tick,\\n        int24 tickCurrent,\\n        int128 liquidityDelta,\\n        uint256 feeGrowthGlobal0X128,\\n        uint256 feeGrowthGlobal1X128,\\n        uint160 secondsPerLiquidityCumulativeX128,\\n        int56 tickCumulative,\\n        uint32 time,\\n        bool upper,\\n        uint128 maxLiquidity\\n    ) internal returns (bool flipped) {\\n        Tick.Info storage info = self[tick];\\n\\n        uint128 liquidityGrossBefore = info.liquidityGross;\\n        uint128 liquidityGrossAfter = LiquidityMath.addDelta(liquidityGrossBefore, liquidityDelta);\\n\\n        require(liquidityGrossAfter <= maxLiquidity, 'LO');\\n\\n        flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\\n\\n        if (liquidityGrossBefore == 0) {\\n            // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\\n            if (tick <= tickCurrent) {\\n                info.feeGrowthOutside0X128 = feeGrowthGlobal0X128;\\n                info.feeGrowthOutside1X128 = feeGrowthGlobal1X128;\\n                info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128;\\n                info.tickCumulativeOutside = tickCumulative;\\n                info.secondsOutside = time;\\n            }\\n            info.initialized = true;\\n        }\\n\\n        info.liquidityGross = liquidityGrossAfter;\\n\\n        // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\\n        info.liquidityNet = upper\\n            ? int256(info.liquidityNet).sub(liquidityDelta).toInt128()\\n            : int256(info.liquidityNet).add(liquidityDelta).toInt128();\\n    }\\n\\n    /// @notice Clears tick data\\n    /// @param self The mapping containing all initialized tick information for initialized ticks\\n    /// @param tick The tick that will be cleared\\n    function clear(mapping(int24 => Tick.Info) storage self, int24 tick) internal {\\n        delete self[tick];\\n    }\\n\\n    /// @notice Transitions to next tick as needed by price movement\\n    /// @param self The mapping containing all tick information for initialized ticks\\n    /// @param tick The destination tick of the transition\\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\\n    /// @param secondsPerLiquidityCumulativeX128 The current seconds per liquidity\\n    /// @param tickCumulative The tick * time elapsed since the pool was first initialized\\n    /// @param time The current block.timestamp\\n    /// @return liquidityNet The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)\\n    function cross(\\n        mapping(int24 => Tick.Info) storage self,\\n        int24 tick,\\n        uint256 feeGrowthGlobal0X128,\\n        uint256 feeGrowthGlobal1X128,\\n        uint160 secondsPerLiquidityCumulativeX128,\\n        int56 tickCumulative,\\n        uint32 time\\n    ) internal returns (int128 liquidityNet) {\\n        Tick.Info storage info = self[tick];\\n        info.feeGrowthOutside0X128 = feeGrowthGlobal0X128 - info.feeGrowthOutside0X128;\\n        info.feeGrowthOutside1X128 = feeGrowthGlobal1X128 - info.feeGrowthOutside1X128;\\n        info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128 - info.secondsPerLiquidityOutsideX128;\\n        info.tickCumulativeOutside = tickCumulative - info.tickCumulativeOutside;\\n        info.secondsOutside = time - info.secondsOutside;\\n        liquidityNet = info.liquidityNet;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TickBitmap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './BitMath.sol';\\n\\n/// @title Packed tick initialized state library\\n/// @notice Stores a packed mapping of tick index to its initialized state\\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\nlibrary TickBitmap {\\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\\n    /// @param tick The tick for which to compute the position\\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\\n    /// @return bitPos The bit position in the word where the flag is stored\\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\\n        wordPos = int16(tick >> 8);\\n        bitPos = uint8(tick % 256);\\n    }\\n\\n    /// @notice Flips the initialized state for a given tick from false to true, or vice versa\\n    /// @param self The mapping in which to flip the tick\\n    /// @param tick The tick to flip\\n    /// @param tickSpacing The spacing between usable ticks\\n    function flipTick(\\n        mapping(int16 => uint256) storage self,\\n        int24 tick,\\n        int24 tickSpacing\\n    ) internal {\\n        require(tick % tickSpacing == 0); // ensure that the tick is spaced\\n        (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);\\n        uint256 mask = 1 << bitPos;\\n        self[wordPos] ^= mask;\\n    }\\n\\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\n    /// to the left (less than or equal to) or right (greater than) of the given tick\\n    /// @param self The mapping in which to compute the next initialized tick\\n    /// @param tick The starting tick\\n    /// @param tickSpacing The spacing between usable ticks\\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\n    function nextInitializedTickWithinOneWord(\\n        mapping(int16 => uint256) storage self,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool lte\\n    ) internal view returns (int24 next, bool initialized) {\\n        int24 compressed = tick / tickSpacing;\\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n        if (lte) {\\n            (int16 wordPos, uint8 bitPos) = position(compressed);\\n            // all the 1s at or to the right of the current bitPos\\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n            uint256 masked = self[wordPos] & mask;\\n\\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\\n                : (compressed - int24(bitPos)) * tickSpacing;\\n        } else {\\n            // start from the word of the next tick, since the current tick state doesn't matter\\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\\n            // all the 1s at or to the left of the bitPos\\n            uint256 mask = ~((1 << bitPos) - 1);\\n            uint256 masked = self[wordPos] & mask;\\n\\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Position.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0 <0.8.0;\\n\\nimport './FullMath.sol';\\nimport './FixedPoint128.sol';\\nimport './LiquidityMath.sol';\\n\\n/// @title Position\\n/// @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\\n/// @dev Positions store additional state for tracking fees owed to the position\\nlibrary Position {\\n    // info stored for each user's position\\n    struct Info {\\n        // the amount of liquidity owned by this position\\n        uint128 liquidity;\\n        // fee growth per unit of liquidity as of the last update to liquidity or fees owed\\n        uint256 feeGrowthInside0LastX128;\\n        uint256 feeGrowthInside1LastX128;\\n        // the fees owed to the position owner in token0/token1\\n        uint128 tokensOwed0;\\n        uint128 tokensOwed1;\\n    }\\n\\n    /// @notice Returns the Info struct of a position, given an owner and position boundaries\\n    /// @param self The mapping containing all user positions\\n    /// @param owner The address of the position owner\\n    /// @param tickLower The lower tick boundary of the position\\n    /// @param tickUpper The upper tick boundary of the position\\n    /// @return position The position info struct of the given owners' position\\n    function get(\\n        mapping(bytes32 => Info) storage self,\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[keccak256(abi.encodePacked(owner, tickLower, tickUpper))];\\n    }\\n\\n    /// @notice Credits accumulated fees to a user's position\\n    /// @param self The individual position to update\\n    /// @param liquidityDelta The change in pool liquidity as a result of the position update\\n    /// @param feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\\n    /// @param feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\\n    function update(\\n        Info storage self,\\n        int128 liquidityDelta,\\n        uint256 feeGrowthInside0X128,\\n        uint256 feeGrowthInside1X128\\n    ) internal {\\n        Info memory _self = self;\\n\\n        uint128 liquidityNext;\\n        if (liquidityDelta == 0) {\\n            require(_self.liquidity > 0, 'NP'); // disallow pokes for 0 liquidity positions\\n            liquidityNext = _self.liquidity;\\n        } else {\\n            liquidityNext = LiquidityMath.addDelta(_self.liquidity, liquidityDelta);\\n        }\\n\\n        // calculate accumulated fees\\n        uint128 tokensOwed0 =\\n            uint128(\\n                FullMath.mulDiv(\\n                    feeGrowthInside0X128 - _self.feeGrowthInside0LastX128,\\n                    _self.liquidity,\\n                    FixedPoint128.Q128\\n                )\\n            );\\n        uint128 tokensOwed1 =\\n            uint128(\\n                FullMath.mulDiv(\\n                    feeGrowthInside1X128 - _self.feeGrowthInside1LastX128,\\n                    _self.liquidity,\\n                    FixedPoint128.Q128\\n                )\\n            );\\n\\n        // update the position\\n        if (liquidityDelta != 0) self.liquidity = liquidityNext;\\n        self.feeGrowthInside0LastX128 = feeGrowthInside0X128;\\n        self.feeGrowthInside1LastX128 = feeGrowthInside1X128;\\n        if (tokensOwed0 > 0 || tokensOwed1 > 0) {\\n            // overflow is acceptable, have to withdraw before you hit type(uint128).max fees\\n            self.tokensOwed0 += tokensOwed0;\\n            self.tokensOwed1 += tokensOwed1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Oracle\\n/// @notice Provides price and liquidity data useful for a wide variety of system designs\\n/// @dev Instances of stored oracle data, \\\"observations\\\", are collected in the oracle array\\n/// Every pool is initialized with an oracle array length of 1. Anyone can pay the SSTOREs to increase the\\n/// maximum length of the oracle array. New slots will be added when the array is fully populated.\\n/// Observations are overwritten when the full length of the oracle array is populated.\\n/// The most recent observation is available, independent of the length of the oracle array, by passing 0 to observe()\\nlibrary Oracle {\\n    struct Observation {\\n        // the block timestamp of the observation\\n        uint32 blockTimestamp;\\n        // the tick accumulator, i.e. tick * time elapsed since the pool was first initialized\\n        int56 tickCumulative;\\n        // the seconds per liquidity, i.e. seconds elapsed / max(1, liquidity) since the pool was first initialized\\n        uint160 secondsPerLiquidityCumulativeX128;\\n        // whether or not the observation is initialized\\n        bool initialized;\\n    }\\n\\n    /// @notice Transforms a previous observation into a new observation, given the passage of time and the current tick and liquidity values\\n    /// @dev blockTimestamp _must_ be chronologically equal to or greater than last.blockTimestamp, safe for 0 or 1 overflows\\n    /// @param last The specified observation to be transformed\\n    /// @param blockTimestamp The timestamp of the new observation\\n    /// @param tick The active tick at the time of the new observation\\n    /// @param liquidity The total in-range liquidity at the time of the new observation\\n    /// @return Observation The newly populated observation\\n    function transform(\\n        Observation memory last,\\n        uint32 blockTimestamp,\\n        int24 tick,\\n        uint128 liquidity\\n    ) private pure returns (Observation memory) {\\n        uint32 delta = blockTimestamp - last.blockTimestamp;\\n        return\\n            Observation({\\n                blockTimestamp: blockTimestamp,\\n                tickCumulative: last.tickCumulative + int56(tick) * delta,\\n                secondsPerLiquidityCumulativeX128: last.secondsPerLiquidityCumulativeX128 +\\n                    ((uint160(delta) << 128) / (liquidity > 0 ? liquidity : 1)),\\n                initialized: true\\n            });\\n    }\\n\\n    /// @notice Initialize the oracle array by writing the first slot. Called once for the lifecycle of the observations array\\n    /// @param self The stored oracle array\\n    /// @param time The time of the oracle initialization, via block.timestamp truncated to uint32\\n    /// @return cardinality The number of populated elements in the oracle array\\n    /// @return cardinalityNext The new length of the oracle array, independent of population\\n    function initialize(Observation[65535] storage self, uint32 time)\\n        internal\\n        returns (uint16 cardinality, uint16 cardinalityNext)\\n    {\\n        self[0] = Observation({\\n            blockTimestamp: time,\\n            tickCumulative: 0,\\n            secondsPerLiquidityCumulativeX128: 0,\\n            initialized: true\\n        });\\n        return (1, 1);\\n    }\\n\\n    /// @notice Writes an oracle observation to the array\\n    /// @dev Writable at most once per block. Index represents the most recently written element. cardinality and index must be tracked externally.\\n    /// If the index is at the end of the allowable array length (according to cardinality), and the next cardinality\\n    /// is greater than the current one, cardinality may be increased. This restriction is created to preserve ordering.\\n    /// @param self The stored oracle array\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param blockTimestamp The timestamp of the new observation\\n    /// @param tick The active tick at the time of the new observation\\n    /// @param liquidity The total in-range liquidity at the time of the new observation\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @param cardinalityNext The new length of the oracle array, independent of population\\n    /// @return indexUpdated The new index of the most recently written element in the oracle array\\n    /// @return cardinalityUpdated The new cardinality of the oracle array\\n    function write(\\n        Observation[65535] storage self,\\n        uint16 index,\\n        uint32 blockTimestamp,\\n        int24 tick,\\n        uint128 liquidity,\\n        uint16 cardinality,\\n        uint16 cardinalityNext\\n    ) internal returns (uint16 indexUpdated, uint16 cardinalityUpdated) {\\n        Observation memory last = self[index];\\n\\n        // early return if we've already written an observation this block\\n        if (last.blockTimestamp == blockTimestamp) return (index, cardinality);\\n\\n        // if the conditions are right, we can bump the cardinality\\n        if (cardinalityNext > cardinality && index == (cardinality - 1)) {\\n            cardinalityUpdated = cardinalityNext;\\n        } else {\\n            cardinalityUpdated = cardinality;\\n        }\\n\\n        indexUpdated = (index + 1) % cardinalityUpdated;\\n        self[indexUpdated] = transform(last, blockTimestamp, tick, liquidity);\\n    }\\n\\n    /// @notice Prepares the oracle array to store up to `next` observations\\n    /// @param self The stored oracle array\\n    /// @param current The current next cardinality of the oracle array\\n    /// @param next The proposed next cardinality which will be populated in the oracle array\\n    /// @return next The next cardinality which will be populated in the oracle array\\n    function grow(\\n        Observation[65535] storage self,\\n        uint16 current,\\n        uint16 next\\n    ) internal returns (uint16) {\\n        require(current > 0, 'I');\\n        // no-op if the passed next value isn't greater than the current next value\\n        if (next <= current) return current;\\n        // store in each slot to prevent fresh SSTOREs in swaps\\n        // this data will not be used because the initialized boolean is still false\\n        for (uint16 i = current; i < next; i++) self[i].blockTimestamp = 1;\\n        return next;\\n    }\\n\\n    /// @notice comparator for 32-bit timestamps\\n    /// @dev safe for 0 or 1 overflows, a and b _must_ be chronologically before or equal to time\\n    /// @param time A timestamp truncated to 32 bits\\n    /// @param a A comparison timestamp from which to determine the relative position of `time`\\n    /// @param b From which to determine the relative position of `time`\\n    /// @return bool Whether `a` is chronologically <= `b`\\n    function lte(\\n        uint32 time,\\n        uint32 a,\\n        uint32 b\\n    ) private pure returns (bool) {\\n        // if there hasn't been overflow, no need to adjust\\n        if (a <= time && b <= time) return a <= b;\\n\\n        uint256 aAdjusted = a > time ? a : a + 2**32;\\n        uint256 bAdjusted = b > time ? b : b + 2**32;\\n\\n        return aAdjusted <= bAdjusted;\\n    }\\n\\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a target, i.e. where [beforeOrAt, atOrAfter] is satisfied.\\n    /// The result may be the same observation, or adjacent observations.\\n    /// @dev The answer must be contained in the array, used when the target is located within the stored observation\\n    /// boundaries: older than the most recent observation and younger, or the same age as, the oldest observation\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param target The timestamp at which the reserved observation should be for\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return beforeOrAt The observation recorded before, or at, the target\\n    /// @return atOrAfter The observation recorded at, or after, the target\\n    function binarySearch(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 target,\\n        uint16 index,\\n        uint16 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        uint256 l = (index + 1) % cardinality; // oldest observation\\n        uint256 r = l + cardinality - 1; // newest observation\\n        uint256 i;\\n        while (true) {\\n            i = (l + r) / 2;\\n\\n            beforeOrAt = self[i % cardinality];\\n\\n            // we've landed on an uninitialized tick, keep searching higher (more recently)\\n            if (!beforeOrAt.initialized) {\\n                l = i + 1;\\n                continue;\\n            }\\n\\n            atOrAfter = self[(i + 1) % cardinality];\\n\\n            bool targetAtOrAfter = lte(time, beforeOrAt.blockTimestamp, target);\\n\\n            // check if we've found the answer!\\n            if (targetAtOrAfter && lte(time, target, atOrAfter.blockTimestamp)) break;\\n\\n            if (!targetAtOrAfter) r = i - 1;\\n            else l = i + 1;\\n        }\\n    }\\n\\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a given target, i.e. where [beforeOrAt, atOrAfter] is satisfied\\n    /// @dev Assumes there is at least 1 initialized observation.\\n    /// Used by observeSingle() to compute the counterfactual accumulator values as of a given block timestamp.\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param target The timestamp at which the reserved observation should be for\\n    /// @param tick The active tick at the time of the returned or simulated observation\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The total pool liquidity at the time of the call\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return beforeOrAt The observation which occurred at, or before, the given timestamp\\n    /// @return atOrAfter The observation which occurred at, or after, the given timestamp\\n    function getSurroundingObservations(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 target,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        // optimistically set before to the newest observation\\n        beforeOrAt = self[index];\\n\\n        // if the target is chronologically at or after the newest observation, we can early return\\n        if (lte(time, beforeOrAt.blockTimestamp, target)) {\\n            if (beforeOrAt.blockTimestamp == target) {\\n                // if newest observation equals target, we're in the same block, so we can ignore atOrAfter\\n                return (beforeOrAt, atOrAfter);\\n            } else {\\n                // otherwise, we need to transform\\n                return (beforeOrAt, transform(beforeOrAt, target, tick, liquidity));\\n            }\\n        }\\n\\n        // now, set before to the oldest observation\\n        beforeOrAt = self[(index + 1) % cardinality];\\n        if (!beforeOrAt.initialized) beforeOrAt = self[0];\\n\\n        // ensure that the target is chronologically at or after the oldest observation\\n        require(lte(time, beforeOrAt.blockTimestamp, target), 'OLD');\\n\\n        // if we've reached this point, we have to binary search\\n        return binarySearch(self, time, target, index, cardinality);\\n    }\\n\\n    /// @dev Reverts if an observation at or before the desired observation timestamp does not exist.\\n    /// 0 may be passed as `secondsAgo' to return the current cumulative values.\\n    /// If called with a timestamp falling between two observations, returns the counterfactual accumulator values\\n    /// at exactly the timestamp between the two observations.\\n    /// @param self The stored oracle array\\n    /// @param time The current block timestamp\\n    /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an observation\\n    /// @param tick The current tick\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The current in-range pool liquidity\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return tickCumulative The tick * time elapsed since the pool was first initialized, as of `secondsAgo`\\n    /// @return secondsPerLiquidityCumulativeX128 The time elapsed / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\\n    function observeSingle(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 secondsAgo,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) internal view returns (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) {\\n        if (secondsAgo == 0) {\\n            Observation memory last = self[index];\\n            if (last.blockTimestamp != time) last = transform(last, time, tick, liquidity);\\n            return (last.tickCumulative, last.secondsPerLiquidityCumulativeX128);\\n        }\\n\\n        uint32 target = time - secondsAgo;\\n\\n        (Observation memory beforeOrAt, Observation memory atOrAfter) =\\n            getSurroundingObservations(self, time, target, tick, index, liquidity, cardinality);\\n\\n        if (target == beforeOrAt.blockTimestamp) {\\n            // we're at the left boundary\\n            return (beforeOrAt.tickCumulative, beforeOrAt.secondsPerLiquidityCumulativeX128);\\n        } else if (target == atOrAfter.blockTimestamp) {\\n            // we're at the right boundary\\n            return (atOrAfter.tickCumulative, atOrAfter.secondsPerLiquidityCumulativeX128);\\n        } else {\\n            // we're in the middle\\n            uint32 observationTimeDelta = atOrAfter.blockTimestamp - beforeOrAt.blockTimestamp;\\n            uint32 targetDelta = target - beforeOrAt.blockTimestamp;\\n            return (\\n                beforeOrAt.tickCumulative +\\n                    ((atOrAfter.tickCumulative - beforeOrAt.tickCumulative) / observationTimeDelta) *\\n                    targetDelta,\\n                beforeOrAt.secondsPerLiquidityCumulativeX128 +\\n                    uint160(\\n                        (uint256(\\n                            atOrAfter.secondsPerLiquidityCumulativeX128 - beforeOrAt.secondsPerLiquidityCumulativeX128\\n                        ) * targetDelta) / observationTimeDelta\\n                    )\\n            );\\n        }\\n    }\\n\\n    /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\\n    /// @dev Reverts if `secondsAgos` > oldest observation\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an observation\\n    /// @param tick The current tick\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The current in-range pool liquidity\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return tickCumulatives The tick * time elapsed since the pool was first initialized, as of each `secondsAgo`\\n    /// @return secondsPerLiquidityCumulativeX128s The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\\n    function observe(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32[] memory secondsAgos,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) internal view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) {\\n        require(cardinality > 0, 'I');\\n\\n        tickCumulatives = new int56[](secondsAgos.length);\\n        secondsPerLiquidityCumulativeX128s = new uint160[](secondsAgos.length);\\n        for (uint256 i = 0; i < secondsAgos.length; i++) {\\n            (tickCumulatives[i], secondsPerLiquidityCumulativeX128s[i]) = observeSingle(\\n                self,\\n                time,\\n                secondsAgos[i],\\n                tick,\\n                index,\\n                liquidity,\\n                cardinality\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FixedPoint128.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '../interfaces/IERC20Minimal.sol';\\n\\n/// @title TransferHelper\\n/// @notice Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Calls transfer on token contract, errors with TF if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20Minimal.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TF');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TickMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LiquidityMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SqrtPriceMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SwapMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './FullMath.sol';\\nimport './SqrtPriceMath.sol';\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint160 sqrtRatioNextX96,\\n            uint256 amountIn,\\n            uint256 amountOut,\\n            uint256 feeAmount\\n        )\\n    {\\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n        bool exactIn = amountRemaining >= 0;\\n\\n        if (exactIn) {\\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\\n            amountIn = zeroForOne\\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    amountRemainingLessFee,\\n                    zeroForOne\\n                );\\n        } else {\\n            amountOut = zeroForOne\\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    uint256(-amountRemaining),\\n                    zeroForOne\\n                );\\n        }\\n\\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n        // get the input/output amounts\\n        if (zeroForOne) {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\\n        } else {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\\n        }\\n\\n        // cap the output amount to not exceed the remaining output amount\\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n            amountOut = uint256(-amountRemaining);\\n        }\\n\\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n            // we didn't reach the target, so take the remainder of the maximum input as fee\\n            feeAmount = uint256(amountRemaining) - amountIn;\\n        } else {\\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3PoolDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title An interface for a contract that is capable of deploying Uniswap V3 Pools\\n/// @notice A contract that constructs a pool must implement this to pass arguments to the pool\\n/// @dev This is used to avoid having constructor arguments in the pool contract, which results in the init code hash\\n/// of the pool being constant allowing the CREATE2 address of the pool to be cheaply computed on-chain\\ninterface IUniswapV3PoolDeployer {\\n    /// @notice Get the parameters to be used in constructing the pool, set transiently during pool creation.\\n    /// @dev Called by the pool constructor to fetch the parameters of the pool\\n    /// Returns factory The factory address\\n    /// Returns token0 The first token of the pool by address sort order\\n    /// Returns token1 The second token of the pool by address sort order\\n    /// Returns fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// Returns tickSpacing The minimum number of ticks between initialized ticks\\n    function parameters()\\n        external\\n        view\\n        returns (\\n            address factory,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickSpacing\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Minimal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Minimal ERC20 interface for Uniswap\\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\\ninterface IERC20Minimal {\\n    /// @notice Returns the balance of a token\\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\n    /// @return The number of tokens held by the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\n    /// @param recipient The account that will receive the amount transferred\\n    /// @param amount The number of tokens to send from the sender to the recipient\\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Returns the current allowance given to a spender by an owner\\n    /// @param owner The account of the token owner\\n    /// @param spender The account of the token spender\\n    /// @return The current allowance granted by `owner` to `spender`\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\n    /// @param amount The amount of tokens allowed to be used by `spender`\\n    /// @return Returns true for a successful approval, false for unsuccessful\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\n    /// @param sender The account from which the transfer will be initiated\\n    /// @param recipient The recipient of the transfer\\n    /// @param amount The amount of the transfer\\n    /// @return Returns true for a successful transfer, false for unsuccessful\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\\n    /// @param value The amount of tokens that were transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\\n    /// @param owner The account that approved spending of its tokens\\n    /// @param spender The account for which the spending allowance was modified\\n    /// @param value The new allowance from the owner to the spender\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/callback/IUniswapV3MintCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#mint\\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\\ninterface IUniswapV3MintCallback {\\n    /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\\n    function uniswapV3MintCallback(\\n        uint256 amount0Owed,\\n        uint256 amount1Owed,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/callback/IUniswapV3FlashCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#flash\\n/// @notice Any contract that calls IUniswapV3PoolActions#flash must implement this interface\\ninterface IUniswapV3FlashCallback {\\n    /// @notice Called to `msg.sender` after transferring to the recipient from IUniswapV3Pool#flash.\\n    /// @dev In the implementation you must repay the pool the tokens sent by flash plus the computed fee amounts.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// @param fee0 The fee amount in token0 due to the pool by the end of the flash\\n    /// @param fee1 The fee amount in token1 due to the pool by the end of the flash\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#flash call\\n    function uniswapV3FlashCallback(\\n        uint256 fee0,\\n        uint256 fee1,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IUniswapV3PoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IUniswapV3PoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IUniswapV3PoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/BitMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/UnsafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FixedPoint96.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}",
      "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "contract_name": "UniswapV3Pool",
      "compiler_version": "v0.7.6+commit.7338295f",
      "optimization_used": "1",
      "runs": "800",
      "constructor_arguments": "",
      "evm_version": "Default",
      "library": "",
      "license_type": "",
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0xbc303acda8b2a0dcd3d17f05adddf854edd6da59": {
      "address": "0xbc303acda8b2a0dcd3d17f05adddf854edd6da59",
      "has_source_code": true,
      "source_code": "// File: contracts\\libraries\\SafeMath.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\r\n// Subject to the MIT license.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction underflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\IERC20.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n// File: contracts\\ImpermaxERC20.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract ImpermaxERC20 is IERC20 {\r\n\tusing SafeMath for uint;\r\n\t\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals = 18;\r\n\tuint public totalSupply;\r\n\tmapping(address => uint) public balanceOf;\r\n\tmapping(address => mapping(address => uint)) public allowance;\r\n\t\r\n\tbytes32 public DOMAIN_SEPARATOR;\r\n\tmapping(address => uint) public nonces;\r\n\r\n\tconstructor() public {}\t\r\n\t\r\n\tfunction _setName(string memory _name, string memory _symbol) internal {\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\tuint chainId;\r\n\t\tassembly {\r\n\t\t\tchainId := chainid\r\n\t\t}\r\n\t\tDOMAIN_SEPARATOR = keccak256(\r\n\t\t\tabi.encode(\r\n\t\t\t\tkeccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n\t\t\t\tkeccak256(bytes(_name)),\r\n\t\t\t\tkeccak256(bytes(\"1\")),\r\n\t\t\t\tchainId,\r\n\t\t\t\taddress(this)\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _mint(address to, uint value) internal {\r\n\t\ttotalSupply = totalSupply.add(value);\r\n\t\tbalanceOf[to] = balanceOf[to].add(value);\r\n\t\temit Transfer(address(0), to, value);\r\n\t}\r\n\r\n\tfunction _burn(address from, uint value) internal {\r\n\t\tbalanceOf[from] = balanceOf[from].sub(value);\r\n\t\ttotalSupply = totalSupply.sub(value);\r\n\t\temit Transfer(from, address(0), value);\r\n\t}\r\n\r\n\tfunction _approve(address owner, address spender, uint value) private {\r\n\t\tallowance[owner][spender] = value;\r\n\t\temit Approval(owner, spender, value);\r\n\t}\r\n\r\n\tfunction _transfer(address from, address to, uint value) internal {\r\n\t\tbalanceOf[from] = balanceOf[from].sub(value, \"ImpermaxERC20: TRANSFER_TOO_HIGH\");\r\n\t\tbalanceOf[to] = balanceOf[to].add(value);\r\n\t\temit Transfer(from, to, value);\r\n\t}\r\n\r\n\tfunction approve(address spender, uint value) external returns (bool) {\r\n\t\t_approve(msg.sender, spender, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transfer(address to, uint value) external returns (bool) {\r\n\t\t_transfer(msg.sender, to, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address from, address to, uint value) external returns (bool) {\r\n\t\tif (allowance[from][msg.sender] != uint(-1)) {\r\n\t\t\tallowance[from][msg.sender] = allowance[from][msg.sender].sub(value, \"ImpermaxERC20: TRANSFER_NOT_ALLOWED\");\r\n\t\t}\r\n\t\t_transfer(from, to, value);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction _checkSignature(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s, bytes32 typehash) internal {\r\n\t\trequire(deadline >= block.timestamp, \"ImpermaxERC20: EXPIRED\");\r\n\t\tbytes32 digest = keccak256(\r\n\t\t\tabi.encodePacked(\r\n\t\t\t\t'\\x19\\x01',\r\n\t\t\t\tDOMAIN_SEPARATOR,\r\n\t\t\t\tkeccak256(abi.encode(typehash, owner, spender, value, nonces[owner]++, deadline))\r\n\t\t\t)\r\n\t\t);\r\n\t\taddress recoveredAddress = ecrecover(digest, v, r, s);\r\n\t\trequire(recoveredAddress != address(0) && recoveredAddress == owner, \"ImpermaxERC20: INVALID_SIGNATURE\");\t\r\n\t}\r\n\r\n\t// keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\tbytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n\t\t_checkSignature(owner, spender, value, deadline, v, r, s, PERMIT_TYPEHASH);\r\n\t\t_approve(owner, spender, value);\r\n\t}\r\n}\r\n\r\n// File: contracts\\interfaces\\IPoolToken.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IPoolToken {\r\n\r\n\t/*** Impermax ERC20 ***/\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction totalSupply() external view returns (uint);\r\n\tfunction balanceOf(address owner) external view returns (uint);\r\n\tfunction allowance(address owner, address spender) external view returns (uint);\r\n\tfunction approve(address spender, uint value) external returns (bool);\r\n\tfunction transfer(address to, uint value) external returns (bool);\r\n\tfunction transferFrom(address from, address to, uint value) external returns (bool);\r\n\t\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\tfunction nonces(address owner) external view returns (uint);\r\n\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\t\r\n\t/*** Pool Token ***/\r\n\t\r\n\tevent Mint(address indexed sender, address indexed minter, uint mintAmount, uint mintTokens);\r\n\tevent Redeem(address indexed sender, address indexed redeemer, uint redeemAmount, uint redeemTokens);\r\n\tevent Sync(uint totalBalance);\r\n\t\r\n\tfunction underlying() external view returns (address);\r\n\tfunction factory() external view returns (address);\r\n\tfunction totalBalance() external view returns (uint);\r\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n\tfunction exchangeRate() external returns (uint);\r\n\tfunction mint(address minter) external returns (uint mintTokens);\r\n\tfunction redeem(address redeemer) external returns (uint redeemAmount);\r\n\tfunction skim(address to) external;\r\n\tfunction sync() external;\r\n\t\r\n\tfunction _setFactory() external;\r\n}\r\n\r\n// File: contracts\\PoolToken.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract PoolToken is IPoolToken, ImpermaxERC20 {\r\n   \tuint internal constant initialExchangeRate = 1e18;\r\n\taddress public underlying;\r\n\taddress public factory;\r\n\tuint public totalBalance;\r\n\tuint public constant MINIMUM_LIQUIDITY = 1000;\r\n\t\r\n\tevent Mint(address indexed sender, address indexed minter, uint mintAmount, uint mintTokens);\r\n\tevent Redeem(address indexed sender, address indexed redeemer, uint redeemAmount, uint redeemTokens);\r\n\tevent Sync(uint totalBalance);\r\n\t\r\n\t/*** Initialize ***/\r\n\t\r\n\t// called once by the factory\r\n\tfunction _setFactory() external {\r\n\t\trequire(factory == address(0), \"PoolToken: FACTORY_ALREADY_SET\");\r\n\t\tfactory = msg.sender;\r\n\t}\r\n\t\r\n\t/*** PoolToken ***/\r\n\t\r\n\tfunction _update() internal {\r\n\t\ttotalBalance = IERC20(underlying).balanceOf(address(this));\r\n\t\temit Sync(totalBalance);\r\n\t}\r\n\r\n\tfunction exchangeRate() public returns (uint) \r\n\t{\r\n\t\tuint _totalSupply = totalSupply; // gas savings\r\n\t\tuint _totalBalance = totalBalance; // gas savings\r\n\t\tif (_totalSupply == 0 || _totalBalance == 0) return initialExchangeRate;\r\n\t\treturn _totalBalance.mul(1e18).div(_totalSupply);\r\n\t}\r\n\t\r\n\t// this low-level function should be called from another contract\r\n\tfunction mint(address minter) external nonReentrant update returns (uint mintTokens) {\r\n\t\tuint balance = IERC20(underlying).balanceOf(address(this));\r\n\t\tuint mintAmount = balance.sub(totalBalance);\r\n\t\tmintTokens = mintAmount.mul(1e18).div(exchangeRate());\r\n\r\n\t\tif(totalSupply == 0) {\r\n\t\t\t// permanently lock the first MINIMUM_LIQUIDITY tokens\r\n\t\t\tmintTokens = mintTokens.sub(MINIMUM_LIQUIDITY);\r\n\t\t\t_mint(address(0), MINIMUM_LIQUIDITY);\r\n\t\t}\r\n\t\trequire(mintTokens > 0, \"PoolToken: MINT_AMOUNT_ZERO\");\r\n\t\t_mint(minter, mintTokens);\r\n\t\temit Mint(msg.sender, minter, mintAmount, mintTokens);\r\n\t}\r\n\r\n\t// this low-level function should be called from another contract\r\n\tfunction redeem(address redeemer) external nonReentrant update returns (uint redeemAmount) {\r\n\t\tuint redeemTokens = balanceOf[address(this)];\r\n\t\tredeemAmount = redeemTokens.mul(exchangeRate()).div(1e18);\r\n\r\n\t\trequire(redeemAmount > 0, \"PoolToken: REDEEM_AMOUNT_ZERO\");\r\n\t\trequire(redeemAmount <= totalBalance, \"PoolToken: INSUFFICIENT_CASH\");\r\n\t\t_burn(address(this), redeemTokens);\r\n\t\t_safeTransfer(redeemer, redeemAmount);\r\n\t\temit Redeem(msg.sender, redeemer, redeemAmount, redeemTokens);\t\t\r\n\t}\r\n\r\n\t// force real balance to match totalBalance\r\n\tfunction skim(address to) external nonReentrant {\r\n\t\t_safeTransfer(to, IERC20(underlying).balanceOf(address(this)).sub(totalBalance));\r\n\t}\r\n\r\n\t// force totalBalance to match real balance\r\n\tfunction sync() external nonReentrant update {}\r\n\t\r\n\t/*** Utilities ***/\r\n\t\r\n\t// same safe transfer function used by UniSwapV2 (with fixed underlying)\r\n\tbytes4 private constant SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\r\n\tfunction _safeTransfer(address to, uint amount) internal {\r\n\t\trequire(underlying != address(0), \"PoolToken: NOT_INITIALIZED\");\r\n\t\t(bool success, bytes memory data) = underlying.call(abi.encodeWithSelector(SELECTOR, to, amount));\r\n\t\trequire(success && (data.length == 0 || abi.decode(data, (bool))), \"PoolToken: TRANSFER_FAILED\");\r\n\t}\r\n\t\r\n\t// prevents a contract from calling itself, directly or indirectly.\r\n\tbool internal _notEntered = true;\r\n\tmodifier nonReentrant() {\r\n\t\trequire(_notEntered, \"PoolToken: REENTERED\");\r\n\t\t_notEntered = false;\r\n\t\t_;\r\n\t\t_notEntered = true;\r\n\t}\r\n\t\r\n\t// update totalBalance with current balance\r\n\tmodifier update() {\r\n\t\t_;\r\n\t\t_update();\r\n\t}\r\n}\r\n\r\n// File: contracts\\BStorage.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ncontract BStorage {\r\n\r\n\taddress public collateral;\r\n\r\n\tmapping (address => mapping (address => uint256)) public borrowAllowance;\r\n\t\r\n\tstruct BorrowSnapshot {\r\n\t\tuint112 principal;\t\t// amount in underlying when the borrow was last updated\r\n\t\tuint112 interestIndex;\t// borrow index when borrow was last updated\r\n\t}\r\n\tmapping(uint256 => BorrowSnapshot) internal borrowBalances;\t\r\n\r\n\t// use one memory slot\r\n\tuint112 public borrowIndex = 1e18;\r\n\tuint112 public totalBorrows;\r\n\tuint32 public accrualTimestamp = uint32(block.timestamp % 2**32);\t\r\n\r\n\tuint public exchangeRateLast;\r\n\t\t\r\n\t// use one memory slot\r\n\tuint48 public borrowRate;\r\n\tuint48 public kinkBorrowRate = 6.3419584e9; //20% per year\r\n\tuint32 public rateUpdateTimestamp = uint32(block.timestamp % 2**32);\r\n\r\n\tuint public reserveFactor = 0.10e18; //10%\r\n\tuint public kinkUtilizationRate = 0.75e18; //75%\r\n\tuint public adjustSpeed = 5.787037e12; //50% per day\r\n\tuint public debtCeiling = uint(-1);\r\n\r\n    function safe112(uint n) internal pure returns (uint112) {\r\n        require(n < 2**112, \"Impermax: SAFE112\");\r\n        return uint112(n);\r\n    }\r\n}\r\n\r\n// File: contracts\\BAllowance.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract BAllowance is PoolToken, BStorage {\t\r\n\r\n\tevent BorrowApproval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\tfunction _borrowApprove(address owner, address spender, uint256 value) private {\r\n\t\tborrowAllowance[owner][spender] = value;\r\n\t\temit BorrowApproval(owner, spender, value);\r\n\t}\r\n\t\r\n\tfunction borrowApprove(address spender, uint256 value) external returns (bool) {\r\n\t\t_borrowApprove(msg.sender, spender, value);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction _checkBorrowAllowance(address owner, address spender, uint256 value) internal {\r\n\t\tif (spender == owner) return;\r\n\t\tuint _borrowAllowance = borrowAllowance[owner][spender];\r\n\t\tif (_borrowAllowance == uint256(-1)) return;\r\n\t\trequire(_borrowAllowance >= value, \"ImpermaxV3Borrowable: BORROW_NOT_ALLOWED\");\r\n\t\tborrowAllowance[owner][spender] = _borrowAllowance - value;\r\n\t}\r\n\r\n\t// keccak256(\"BorrowPermit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\tbytes32 public constant BORROW_PERMIT_TYPEHASH = 0xf6d86ed606f871fa1a557ac0ba607adce07767acf53f492fb215a1a4db4aea6f;\r\n\tfunction borrowPermit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n\t\t_checkSignature(owner, spender, value, deadline, v, r, s, BORROW_PERMIT_TYPEHASH);\r\n\t\t_borrowApprove(owner, spender, value);\r\n\t}\r\n}\r\n\r\n// File: contracts\\BInterestRateModel.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract BInterestRateModel is PoolToken, BStorage {\r\n\r\n\t// When utilization is 100% borrowRate is kinkBorrowRate * KINK_MULTIPLIER\r\n\t// kinkBorrowRate relative adjustment per second belongs to [1-adjustSpeed, 1+adjustSpeed*(KINK_MULTIPLIER-1)]\r\n\tuint public constant KINK_MULTIPLIER = 2;\r\n\tuint public constant KINK_BORROW_RATE_MAX = 792.744800e9; //2500% per year\r\n\tuint public constant KINK_BORROW_RATE_MIN = 0.31709792e9; //1% per year\r\n\r\n\tevent AccrueInterest(uint interestAccumulated, uint borrowIndex, uint totalBorrows);\r\n\tevent CalculateKinkBorrowRate(uint kinkBorrowRate);\r\n\tevent CalculateBorrowRate(uint borrowRate);\r\n\t\t\r\n\tfunction _calculateBorrowRate() internal {\r\n\t\tuint _kinkUtilizationRate = kinkUtilizationRate;\t\t\r\n\t\tuint _adjustSpeed = adjustSpeed;\r\n\t\tuint _borrowRate = borrowRate;\t\r\n\t\tuint _kinkBorrowRate = kinkBorrowRate;\r\n\t\tuint32 _rateUpdateTimestamp = rateUpdateTimestamp;\t\t\r\n\t\r\n\t\t// update kinkBorrowRate using previous borrowRate\r\n\t\tuint32 timeElapsed = getBlockTimestamp() - _rateUpdateTimestamp; // underflow is desired\r\n\t\tif(timeElapsed > 0) {\r\n\t\t\trateUpdateTimestamp = getBlockTimestamp();\r\n\t\t\tuint adjustFactor;\r\n\t\t\t\r\n\t\t\tif (_borrowRate < _kinkBorrowRate) {\r\n\t\t\t\t// never overflows, _kinkBorrowRate is never 0\r\n\t\t\t\tuint tmp = (_kinkBorrowRate - _borrowRate) * 1e18 / _kinkBorrowRate * _adjustSpeed * timeElapsed / 1e18;\r\n\t\t\t\tadjustFactor = tmp > 1e18 ? 0 : 1e18 - tmp;\r\n\t\t\t} else {\r\n\t\t\t\t// never overflows, _kinkBorrowRate is never 0\r\n\t\t\t\tuint tmp = (_borrowRate - _kinkBorrowRate) * 1e18 / _kinkBorrowRate * _adjustSpeed * timeElapsed / 1e18;\r\n\t\t\t\tadjustFactor = tmp + 1e18;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// never overflows\r\n\t\t\t_kinkBorrowRate = _kinkBorrowRate * adjustFactor / 1e18;\r\n\t\t\tif(_kinkBorrowRate > KINK_BORROW_RATE_MAX) _kinkBorrowRate = KINK_BORROW_RATE_MAX;\r\n\t\t\tif(_kinkBorrowRate < KINK_BORROW_RATE_MIN) _kinkBorrowRate = KINK_BORROW_RATE_MIN;\r\n\r\n\t\t\tkinkBorrowRate = uint48(_kinkBorrowRate);\r\n\t\t\temit CalculateKinkBorrowRate(_kinkBorrowRate);\r\n\t\t}\r\n\t\t\r\n\t\tuint _utilizationRate;\r\n\t\t{ // avoid stack to deep\r\n\t\tuint _totalBorrows = totalBorrows; // gas savings\r\n\t\tuint _actualBalance = totalBalance.add(_totalBorrows);\r\n\t\t_utilizationRate = (_actualBalance == 0) ? 0 : _totalBorrows * 1e18 / _actualBalance;\r\n\t\t}\r\n\t\t\r\n\t\t// update borrowRate using the new kinkBorrowRate\t\r\n\t\tif(_utilizationRate <= _kinkUtilizationRate) {\r\n\t\t\t// never overflows, _kinkUtilizationRate is never 0\r\n\t\t\t_borrowRate = _kinkBorrowRate * _utilizationRate / _kinkUtilizationRate;\r\n\t\t} else {\r\n\t\t\t// never overflows, _kinkUtilizationRate is always < 1e18\r\n\t\t\tuint overUtilization = (_utilizationRate - _kinkUtilizationRate) * 1e18 / (1e18 - _kinkUtilizationRate);\r\n\t\t\t// never overflows\r\n\t\t\t_borrowRate = ((KINK_MULTIPLIER - 1) * overUtilization + 1e18) * _kinkBorrowRate / 1e18;\r\n\t\t}\r\n\t\tborrowRate = uint48(_borrowRate);\r\n\t\temit CalculateBorrowRate(_borrowRate);\r\n\t}\r\n\t\r\n\t// applies accrued interest to total borrows and reserves\r\n\tfunction accrueInterest() public {\r\n\t\tuint _borrowIndex = borrowIndex;\r\n\t\tuint _totalBorrows = totalBorrows;\r\n\t\tuint32 _accrualTimestamp = accrualTimestamp;\r\n\t\t\r\n\t\tuint32 blockTimestamp = getBlockTimestamp();\r\n\t\tif (_accrualTimestamp == blockTimestamp) return;\r\n\t\tuint32 timeElapsed = blockTimestamp - _accrualTimestamp; // underflow is desired\r\n\t\taccrualTimestamp = blockTimestamp;\r\n\t\t\r\n\t\tuint interestFactor = uint(borrowRate).mul(timeElapsed);\t\r\n\t\tuint interestAccumulated = interestFactor.mul(_totalBorrows).div(1e18);\r\n\t\t_totalBorrows = _totalBorrows.add( interestAccumulated );\r\n\t\t_borrowIndex = _borrowIndex.add( interestFactor.mul(_borrowIndex).div(1e18) );\r\n\t\r\n\t\tborrowIndex = safe112(_borrowIndex);\r\n\t\ttotalBorrows = safe112(_totalBorrows);\r\n\t\temit AccrueInterest(interestAccumulated, _borrowIndex, _totalBorrows);\r\n\t}\r\n\t\t\r\n\tfunction getBlockTimestamp() public view returns (uint32) {\r\n\t\treturn uint32(block.timestamp % 2**32);\r\n\t}\r\n}\r\n\r\n// File: contracts\\interfaces\\IFactory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IFactory {\r\n\tevent LendingPoolInitialized(address indexed nftlp, address indexed token0, address indexed token1,\r\n\t\taddress collateral, address borrowable0, address borrowable1, uint lendingPoolId);\r\n\tevent NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\tevent NewAdmin(address oldAdmin, address newAdmin);\r\n\tevent NewReservesPendingAdmin(address oldReservesPendingAdmin, address newReservesPendingAdmin);\r\n\tevent NewReservesAdmin(address oldReservesAdmin, address newReservesAdmin);\r\n\tevent NewReservesManager(address oldReservesManager, address newReservesManager);\r\n\t\r\n\tfunction admin() external view returns (address);\r\n\tfunction pendingAdmin() external view returns (address);\r\n\tfunction reservesAdmin() external view returns (address);\r\n\tfunction reservesPendingAdmin() external view returns (address);\r\n\tfunction reservesManager() external view returns (address);\r\n\r\n\tfunction getLendingPool(address nftlp) external view returns (\r\n\t\tbool initialized, \r\n\t\tuint24 lendingPoolId, \r\n\t\taddress collateral, \r\n\t\taddress borrowable0, \r\n\t\taddress borrowable1\r\n\t);\r\n\tfunction allLendingPools(uint) external view returns (address nftlp);\r\n\tfunction allLendingPoolsLength() external view returns (uint);\r\n\t\r\n\tfunction bDeployer() external view returns (address);\r\n\tfunction cDeployer() external view returns (address);\r\n\r\n\tfunction createCollateral(address nftlp) external returns (address collateral);\r\n\tfunction createBorrowable0(address nftlp) external returns (address borrowable0);\r\n\tfunction createBorrowable1(address nftlp) external returns (address borrowable1);\r\n\tfunction initializeLendingPool(address nftlp) external;\r\n\r\n\tfunction _setPendingAdmin(address newPendingAdmin) external;\r\n\tfunction _acceptAdmin() external;\r\n\tfunction _setReservesPendingAdmin(address newPendingAdmin) external;\r\n\tfunction _acceptReservesAdmin() external;\r\n\tfunction _setReservesManager(address newReservesManager) external;\r\n}\r\n\r\n// File: contracts\\BSetter.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract BSetter is PoolToken, BStorage {\r\n\r\n\tuint public constant RESERVE_FACTOR_MAX = 0.20e18; //20%\r\n\tuint public constant KINK_UR_MIN = 0.50e18; //50%\r\n\tuint public constant KINK_UR_MAX = 0.99e18; //99%\r\n\tuint public constant ADJUST_SPEED_MIN = 0.05787037e12; //0.5% per day\r\n\tuint public constant ADJUST_SPEED_MAX = 57.87037e12; //500% per day\r\n\r\n\tevent NewReserveFactor(uint newReserveFactor);\r\n\tevent NewKinkUtilizationRate(uint newKinkUtilizationRate);\r\n\tevent NewAdjustSpeed(uint newAdjustSpeed);\r\n\tevent NewDebtCeiling(uint newDebtCeiling);\r\n\t\r\n\t// called once by the factory at time of deployment\r\n\tfunction _initialize (\r\n\t\tstring calldata _name, \r\n\t\tstring calldata _symbol,\r\n\t\taddress _underlying, \r\n\t\taddress _collateral\r\n\t) external {\r\n\t\trequire(msg.sender == factory, \"ImpermaxV3Borrowable: UNAUTHORIZED\"); // sufficient check\r\n\t\t_setName(_name, _symbol);\r\n\t\tunderlying = _underlying;\r\n\t\tcollateral = _collateral;\r\n\t\texchangeRateLast = initialExchangeRate;\r\n\t}\r\n\t\r\n\tfunction _setReserveFactor(uint newReserveFactor) external nonReentrant onlyAdmin {\r\n\t\t_checkSetting(newReserveFactor, 0, RESERVE_FACTOR_MAX);\r\n\t\treserveFactor = newReserveFactor;\r\n\t\temit NewReserveFactor(newReserveFactor);\r\n\t}\r\n\r\n\tfunction _setKinkUtilizationRate(uint newKinkUtilizationRate) external nonReentrant onlyAdmin {\r\n\t\t_checkSetting(newKinkUtilizationRate, KINK_UR_MIN, KINK_UR_MAX);\r\n\t\tkinkUtilizationRate = newKinkUtilizationRate;\r\n\t\temit NewKinkUtilizationRate(newKinkUtilizationRate);\r\n\t}\r\n\r\n\tfunction _setAdjustSpeed(uint newAdjustSpeed) external nonReentrant onlyAdmin {\r\n\t\t_checkSetting(newAdjustSpeed, ADJUST_SPEED_MIN, ADJUST_SPEED_MAX);\r\n\t\tadjustSpeed = newAdjustSpeed;\r\n\t\temit NewAdjustSpeed(newAdjustSpeed);\r\n\t}\r\n\r\n\tfunction _setDebtCeiling(uint newDebtCeiling) external nonReentrant onlyAdmin {\r\n\t\tdebtCeiling = newDebtCeiling;\r\n\t\temit NewDebtCeiling(newDebtCeiling);\r\n\t}\r\n\t\r\n\tfunction _checkSetting(uint parameter, uint min, uint max) internal view {\r\n\t\trequire(parameter >= min, \"ImpermaxV3Borrowable: INVALID_SETTING\");\r\n\t\trequire(parameter <= max, \"ImpermaxV3Borrowable: INVALID_SETTING\");\r\n\t}\r\n\r\n\tmodifier onlyAdmin() {\r\n\t\trequire(msg.sender == IFactory(factory).admin(), \"ImpermaxV3Borrowable: UNAUTHORIZED\");\r\n\t\t_;\r\n\t}\r\n}\r\n\r\n// File: contracts\\interfaces\\IBorrowable.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IBorrowable {\r\n\r\n\t/*** Impermax ERC20 ***/\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction totalSupply() external view returns (uint);\r\n\tfunction balanceOf(address owner) external view returns (uint);\r\n\tfunction allowance(address owner, address spender) external view returns (uint);\r\n\tfunction approve(address spender, uint value) external returns (bool);\r\n\tfunction transfer(address to, uint value) external returns (bool);\r\n\tfunction transferFrom(address from, address to, uint value) external returns (bool);\r\n\t\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\tfunction nonces(address owner) external view returns (uint);\r\n\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\t\r\n\t/*** Pool Token ***/\r\n\t\r\n\tevent Mint(address indexed sender, address indexed minter, uint mintAmount, uint mintTokens);\r\n\tevent Redeem(address indexed sender, address indexed redeemer, uint redeemAmount, uint redeemTokens);\r\n\tevent Sync(uint totalBalance);\r\n\t\r\n\tfunction underlying() external view returns (address);\r\n\tfunction factory() external view returns (address);\r\n\tfunction totalBalance() external view returns (uint);\r\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n\tfunction exchangeRate() external returns (uint);\r\n\tfunction mint(address minter) external returns (uint mintTokens);\r\n\tfunction redeem(address redeemer) external returns (uint redeemAmount);\r\n\tfunction skim(address to) external;\r\n\tfunction sync() external;\r\n\t\r\n\tfunction _setFactory() external;\r\n\t\r\n\t/*** Borrowable ***/\r\n\r\n\tevent BorrowApproval(address indexed owner, address indexed spender, uint value);\r\n\tevent Borrow(address indexed sender, uint256 indexed tokenId, address indexed receiver, uint borrowAmount, uint repayAmount, uint accountBorrowsPrior, uint accountBorrows, uint totalBorrows);\r\n\tevent Liquidate(address indexed sender, uint256 indexed tokenId, address indexed liquidator, uint seizeTokenId, uint repayAmount, uint accountBorrowsPrior, uint accountBorrows, uint totalBorrows);\r\n\tevent RestructureDebt(uint256 indexed tokenId, uint reduceToRatio, uint repayAmount, uint accountBorrowsPrior, uint accountBorrows, uint totalBorrows);\r\n\t\r\n\tfunction collateral() external view returns (address);\r\n\tfunction reserveFactor() external view returns (uint);\r\n\tfunction exchangeRateLast() external view returns (uint);\r\n\tfunction borrowIndex() external view returns (uint);\r\n\tfunction totalBorrows() external view returns (uint);\r\n\tfunction borrowAllowance(address owner, address spender) external view returns (uint);\r\n\tfunction borrowBalance(uint tokenId) external view returns (uint);\t\r\n\tfunction currentBorrowBalance(uint tokenId) external returns (uint);\t\r\n\t\r\n\tfunction BORROW_PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\tfunction borrowApprove(address spender, uint256 value) external returns (bool);\r\n\tfunction borrowPermit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\tfunction borrow(uint256 tokenId, address receiver, uint borrowAmount, bytes calldata data) external;\r\n\tfunction liquidate(uint256 tokenId, uint repayAmount, address liquidator, bytes calldata data) external returns (uint seizeTokenId);\r\n\tfunction restructureDebt(uint256 tokenId, uint256 reduceToRatio) external;\r\n\t\r\n\t/*** Borrowable Interest Rate Model ***/\r\n\r\n\tevent AccrueInterest(uint interestAccumulated, uint borrowIndex, uint totalBorrows);\r\n\tevent CalculateKink(uint kinkRate);\r\n\tevent CalculateBorrowRate(uint borrowRate);\r\n\t\r\n\tfunction KINK_BORROW_RATE_MAX() external pure returns (uint);\r\n\tfunction KINK_BORROW_RATE_MIN() external pure returns (uint);\r\n\tfunction KINK_MULTIPLIER() external pure returns (uint);\r\n\tfunction borrowRate() external view returns (uint);\r\n\tfunction kinkBorrowRate() external view returns (uint);\r\n\tfunction kinkUtilizationRate() external view returns (uint);\r\n\tfunction adjustSpeed() external view returns (uint);\r\n\tfunction rateUpdateTimestamp() external view returns (uint32);\r\n\tfunction accrualTimestamp() external view returns (uint32);\r\n\t\r\n\tfunction accrueInterest() external;\r\n\t\r\n\t/*** Borrowable Setter ***/\r\n\r\n\tevent NewReserveFactor(uint newReserveFactor);\r\n\tevent NewKinkUtilizationRate(uint newKinkUtilizationRate);\r\n\tevent NewAdjustSpeed(uint newAdjustSpeed);\r\n\tevent NewDebtCeiling(uint newDebtCeiling);\r\n\r\n\tfunction RESERVE_FACTOR_MAX() external pure returns (uint);\r\n\tfunction KINK_UR_MIN() external pure returns (uint);\r\n\tfunction KINK_UR_MAX() external pure returns (uint);\r\n\tfunction ADJUST_SPEED_MIN() external pure returns (uint);\r\n\tfunction ADJUST_SPEED_MAX() external pure returns (uint);\r\n\t\r\n\tfunction _initialize (\r\n\t\tstring calldata _name, \r\n\t\tstring calldata _symbol,\r\n\t\taddress _underlying, \r\n\t\taddress _collateral\r\n\t) external;\r\n\tfunction _setReserveFactor(uint newReserveFactor) external;\r\n\tfunction _setKinkUtilizationRate(uint newKinkUtilizationRate) external;\r\n\tfunction _setAdjustSpeed(uint newAdjustSpeed) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\ICollateral.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ICollateral {\r\n\t\r\n\t/* ImpermaxERC721 */\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\t\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction approve(address to, uint256 tokenId) external;\r\n\tfunction setApprovalForAll(address operator, bool approved) external;\r\n\tfunction permit(address spender, uint tokenId, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\t\r\n\t/* Collateral */\r\n\t\r\n\tevent Mint(address indexed to, uint tokenId);\r\n\tevent Redeem(address indexed to, uint tokenId, uint percentage, uint redeemTokenId);\r\n\tevent Seize(address indexed to, uint tokenId, uint percentage, uint redeemTokenId);\r\n\tevent RestructureBadDebt(uint tokenId, uint postLiquidationCollateralRatio);\r\n\t\r\n\tfunction underlying() external view returns (address);\r\n\tfunction factory() external view returns (address);\r\n\tfunction borrowable0() external view returns (address);\r\n\tfunction borrowable1() external view returns (address);\r\n\tfunction safetyMarginSqrt() external view returns (uint);\r\n\tfunction liquidationIncentive() external view returns (uint);\r\n\tfunction liquidationFee() external view returns (uint);\r\n\tfunction liquidationPenalty() external view returns (uint);\r\n\r\n\tfunction mint(address to, uint256 tokenId) external;\r\n\tfunction redeem(address to, uint256 tokenId, uint256 percentage, bytes calldata data) external returns (uint redeemTokenId);\r\n\tfunction redeem(address to, uint256 tokenId, uint256 percentage) external returns (uint redeemTokenId);\r\n\tfunction isLiquidatable(uint tokenId) external returns (bool);\r\n\tfunction isUnderwater(uint tokenId) external returns (bool);\r\n\tfunction canBorrow(uint tokenId, address borrowable, uint accountBorrows) external returns (bool);\r\n\tfunction restructureBadDebt(uint tokenId) external;\r\n\tfunction seize(uint tokenId, uint repayAmount, address liquidator, bytes calldata data) external returns (uint seizeTokenId);\r\n\t\r\n\t/* CSetter */\r\n\t\r\n\tevent NewSafetyMargin(uint newSafetyMarginSqrt);\r\n\tevent NewLiquidationIncentive(uint newLiquidationIncentive);\r\n\tevent NewLiquidationFee(uint newLiquidationFee);\r\n\r\n\tfunction SAFETY_MARGIN_SQRT_MIN() external pure returns (uint);\r\n\tfunction SAFETY_MARGIN_SQRT_MAX() external pure returns (uint);\r\n\tfunction LIQUIDATION_INCENTIVE_MIN() external pure returns (uint);\r\n\tfunction LIQUIDATION_INCENTIVE_MAX() external pure returns (uint);\r\n\tfunction LIQUIDATION_FEE_MAX() external pure returns (uint);\r\n\t\r\n\tfunction _setFactory() external;\r\n\tfunction _initialize (\r\n\t\tstring calldata _name,\r\n\t\tstring calldata _symbol,\r\n\t\taddress _underlying, \r\n\t\taddress _borrowable0, \r\n\t\taddress _borrowable1\r\n\t) external;\r\n\tfunction _setSafetyMarginSqrt(uint newSafetyMarginSqrt) external;\r\n\tfunction _setLiquidationIncentive(uint newLiquidationIncentive) external;\r\n\tfunction _setLiquidationFee(uint newLiquidationFee) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\IImpermaxCallee.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IImpermaxCallee {\r\n    function impermaxV3Borrow(address sender, uint256 tokenId, uint borrowAmount, bytes calldata data) external;\r\n    function impermaxV3Redeem(address sender, uint256 tokenId, uint256 redeemTokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\IERC721.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC721 {\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\t\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\tfunction nonces(uint256 tokenId) external view returns (uint256);\r\n\t\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction approve(address to, uint256 tokenId) external;\r\n\tfunction setApprovalForAll(address operator, bool approved) external;\r\n\tfunction permit(address spender, uint tokenId, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n// File: contracts\\libraries\\Math.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n// a library for performing various math operations\r\n// forked from: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/libraries/Math.sol\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\t\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        z = x > y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\ImpermaxV3Borrowable.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract ImpermaxV3Borrowable is IBorrowable, PoolToken, BStorage, BSetter, BInterestRateModel, BAllowance {\r\n\t\t\r\n\tconstructor() public {}\r\n\r\n\t/*** PoolToken ***/\r\n\t\r\n\tfunction _update() internal {\r\n\t\tsuper._update();\r\n\t\t_calculateBorrowRate();\r\n\t}\r\n\t\r\n\tfunction _mintReserves(uint _exchangeRate, uint _totalSupply) internal returns (uint) {\r\n\t\tuint _exchangeRateLast = exchangeRateLast;\r\n\t\tif (_exchangeRate > _exchangeRateLast) {\r\n\t\t\tuint _exchangeRateNew = _exchangeRate.sub( _exchangeRate.sub(_exchangeRateLast).mul(reserveFactor).div(1e18) );\r\n\t\t\tuint liquidity = _totalSupply.mul(_exchangeRate).div(_exchangeRateNew).sub(_totalSupply);\r\n\t\t\tif (liquidity > 0) {\r\n\t\t\t\taddress reservesManager = IFactory(factory).reservesManager();\r\n\t\t\t\t_mint(reservesManager, liquidity);\r\n\t\t\t}\r\n\t\t\texchangeRateLast = _exchangeRateNew;\r\n\t\t\treturn _exchangeRateNew;\r\n\t\t}\r\n\t\telse return _exchangeRate;\r\n\t}\r\n\t\r\n\tfunction exchangeRate() public accrue returns (uint) {\r\n\t\tuint _totalSupply = totalSupply;\r\n\t\tuint _actualBalance = totalBalance.add(totalBorrows);\r\n\t\tif (_totalSupply == 0 || _actualBalance == 0) return initialExchangeRate;\r\n\t\tuint _exchangeRate = _actualBalance.mul(1e18).div(_totalSupply);\r\n\t\treturn _mintReserves(_exchangeRate, _totalSupply);\r\n\t}\r\n\t\r\n\t// force totalBalance to match real balance\r\n\tfunction sync() external nonReentrant update accrue {}\r\n\t\r\n\t/*** Borrowable ***/\r\n\t\r\n\t// this is the stored borrow balance; the current borrow balance may be slightly higher\r\n\tfunction borrowBalance(uint256 tokenId) public view returns (uint) {\r\n\t\tBorrowSnapshot memory borrowSnapshot = borrowBalances[tokenId];\r\n\t\tif (borrowSnapshot.interestIndex == 0) return 0; // not initialized\r\n\t\treturn uint(borrowSnapshot.principal).mul(borrowIndex).div(borrowSnapshot.interestIndex);\r\n\t}\r\n\tfunction currentBorrowBalance(uint256 tokenId) external accrue returns (uint) {\r\n\t\treturn borrowBalance(tokenId);\r\n\t}\r\n\t\r\n\tfunction _updateBorrow(uint256 tokenId, uint borrowAmount, uint repayAmount) private returns (uint accountBorrowsPrior, uint accountBorrows, uint _totalBorrows) {\r\n\t\taccountBorrowsPrior = borrowBalance(tokenId);\r\n\t\tif (borrowAmount == repayAmount) return (accountBorrowsPrior, accountBorrowsPrior, totalBorrows);\r\n\t\tuint112 _borrowIndex = borrowIndex;\r\n\t\tif (borrowAmount > repayAmount) {\r\n\t\t\tBorrowSnapshot storage borrowSnapshot = borrowBalances[tokenId];\r\n\t\t\tuint increaseAmount = borrowAmount - repayAmount;\r\n\t\t\taccountBorrows = accountBorrowsPrior.add(increaseAmount);\r\n\t\t\tborrowSnapshot.principal = safe112(accountBorrows);\r\n\t\t\tborrowSnapshot.interestIndex = _borrowIndex;\r\n\t\t\t_totalBorrows = uint(totalBorrows).add(increaseAmount);\r\n\t\t\ttotalBorrows = safe112(_totalBorrows);\r\n\t\t\trequire(_totalBorrows <= debtCeiling, \"ImpermaxV3Borrowable: TOTAL_BORROWS_ABOVE_DEBT_CEILING\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\tBorrowSnapshot storage borrowSnapshot = borrowBalances[tokenId];\r\n\t\t\tuint decreaseAmount = repayAmount - borrowAmount;\t\t\r\n\t\t\taccountBorrows = accountBorrowsPrior > decreaseAmount ? accountBorrowsPrior - decreaseAmount : 0;\r\n\t\t\tborrowSnapshot.principal = safe112(accountBorrows);\r\n\t\t\tif(accountBorrows == 0) {\r\n\t\t\t\tborrowSnapshot.interestIndex = 0;\r\n\t\t\t} else {\r\n\t\t\t\tborrowSnapshot.interestIndex = _borrowIndex;\r\n\t\t\t}\r\n\t\t\tuint actualDecreaseAmount = accountBorrowsPrior.sub(accountBorrows);\r\n\t\t\t_totalBorrows = totalBorrows; // gas savings\r\n\t\t\t_totalBorrows = _totalBorrows > actualDecreaseAmount ? _totalBorrows - actualDecreaseAmount : 0;\r\n\t\t\ttotalBorrows = safe112(_totalBorrows);\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\t// this low-level function should be called from another contract\r\n\tfunction borrow(uint256 tokenId, address receiver, uint borrowAmount, bytes calldata data) external nonReentrant update accrue {\r\n\t\tuint _totalBalance = totalBalance;\r\n\t\trequire(borrowAmount <= _totalBalance, \"ImpermaxV3Borrowable: INSUFFICIENT_CASH\");\r\n\t\t\r\n\t\tif (borrowAmount > 0) {\r\n\t\t\taddress borrower = IERC721(collateral).ownerOf(tokenId);\r\n\t\t\t_checkBorrowAllowance(borrower, msg.sender, borrowAmount);\r\n\t\t}\r\n\t\t\r\n\t\t// optimistically transfer funds\r\n\t\tif (borrowAmount > 0) _safeTransfer(receiver, borrowAmount);\r\n\t\tif (data.length > 0) IImpermaxCallee(receiver).impermaxV3Borrow(msg.sender, tokenId, borrowAmount, data);\r\n\t\tuint balance = IERC20(underlying).balanceOf(address(this));\r\n\t\t\r\n\t\tuint repayAmount = balance.add(borrowAmount).sub(_totalBalance);\r\n\t\t(uint accountBorrowsPrior, uint accountBorrows, uint _totalBorrows) = _updateBorrow(tokenId, borrowAmount, repayAmount);\r\n\t\t\r\n\t\tif(borrowAmount > repayAmount) require(\r\n\t\t\tICollateral(collateral).canBorrow(tokenId, address(this), accountBorrows),\r\n\t\t\t\"ImpermaxV3Borrowable: INSUFFICIENT_LIQUIDITY\"\r\n\t\t);\r\n\t\t\r\n\t\temit Borrow(msg.sender, tokenId, receiver, borrowAmount, repayAmount, accountBorrowsPrior, accountBorrows, _totalBorrows);\r\n\t}\r\n\r\n\t// this low-level function should be called from another contract\r\n\tfunction liquidate(uint256 tokenId, uint repayAmount, address liquidator, bytes calldata data) external nonReentrant update accrue returns (uint seizeTokenId) {\r\n\t\trepayAmount = Math.min(repayAmount, borrowBalance(tokenId));\r\n\t\tseizeTokenId = ICollateral(collateral).seize(tokenId, repayAmount, liquidator, data);\r\n\t\t\r\n\t\tuint balance = IERC20(underlying).balanceOf(address(this));\r\n\t\trequire(balance.sub(totalBalance) >= repayAmount, \"ImpermaxV3Borrowable: INSUFFICIENT_ACTUAL_REPAY\");\r\n\t\t\r\n\t\t(uint accountBorrowsPrior, uint accountBorrows, uint _totalBorrows) = _updateBorrow(tokenId, 0, repayAmount);\r\n\t\t\r\n\t\temit Liquidate(msg.sender, tokenId, liquidator, seizeTokenId, repayAmount, accountBorrowsPrior, accountBorrows, _totalBorrows);\r\n\t}\r\n\t\r\n\t// this function must be called from collateral\r\n\tfunction restructureDebt(uint tokenId, uint reduceToRatio) public nonReentrant update accrue {\r\n\t\trequire(msg.sender == collateral, \"ImpermaxV3Borrowable: UNAUTHORIZED\");\r\n\t\trequire(reduceToRatio < 1e18, \"ImpermaxV3Borrowable: NOT_UNDERWATER\");\r\n\t\r\n\t\tuint _borrowBalance = borrowBalance(tokenId);\r\n\t\tif (_borrowBalance == 0) return;\r\n\t\tuint repayAmount = _borrowBalance.sub(_borrowBalance.mul(reduceToRatio).div(1e18));\r\n\t\t(uint accountBorrowsPrior, uint accountBorrows, uint _totalBorrows) = _updateBorrow(tokenId, 0, repayAmount);\r\n\t\t\r\n\t\temit RestructureDebt(tokenId, reduceToRatio, repayAmount, accountBorrowsPrior, accountBorrows, _totalBorrows);\r\n\t}\r\n\t\t\r\n\tmodifier accrue() {\r\n\t\taccrueInterest();\r\n\t\t_;\r\n\t}\r\n}\r\n\r\n// File: contracts\\interfaces\\IBDeployer.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IBDeployer {\r\n\tfunction deployBorrowable(address nftlp, uint8 index) external returns (address borrowable);\r\n}\r\n\r\n// File: contracts\\BDeployer.sol\r\n\r\npragma solidity =0.5.16;\r\n/*\r\n * This contract is used by the Factory to deploy Borrowable(s)\r\n * The bytecode would be too long to fit in the Factory\r\n */\r\n\r\ncontract BDeployer is IBDeployer {\r\n\tconstructor () public {}\r\n\t\r\n\tfunction deployBorrowable(address nftlp, uint8 index) external returns (address borrowable) {\r\n\t\tbytes memory bytecode = type(ImpermaxV3Borrowable).creationCode;\r\n\t\tbytes32 salt = keccak256(abi.encodePacked(msg.sender, nftlp, index));\r\n\t\tassembly {\r\n\t\t\tborrowable := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n\t\t}\r\n\t}\r\n}",
      "abi": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAccumulated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"AccrueInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrowsPrior\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BorrowApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"}],\"name\":\"CalculateBorrowRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kinkRate\",\"type\":\"uint256\"}],\"name\":\"CalculateKink\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kinkBorrowRate\",\"type\":\"uint256\"}],\"name\":\"CalculateKinkBorrowRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrowsPrior\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAdjustSpeed\",\"type\":\"uint256\"}],\"name\":\"NewAdjustSpeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebtCeiling\",\"type\":\"uint256\"}],\"name\":\"NewDebtCeiling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newKinkUtilizationRate\",\"type\":\"uint256\"}],\"name\":\"NewKinkUtilizationRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserveFactor\",\"type\":\"uint256\"}],\"name\":\"NewReserveFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reduceToRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrowsPrior\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"RestructureDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADJUST_SPEED_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADJUST_SPEED_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BORROW_PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KINK_BORROW_RATE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KINK_BORROW_RATE_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KINK_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KINK_UR_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KINK_UR_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVE_FACTOR_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"_initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAdjustSpeed\",\"type\":\"uint256\"}],\"name\":\"_setAdjustSpeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDebtCeiling\",\"type\":\"uint256\"}],\"name\":\"_setDebtCeiling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_setFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newKinkUtilizationRate\",\"type\":\"uint256\"}],\"name\":\"_setKinkUtilizationRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReserveFactor\",\"type\":\"uint256\"}],\"name\":\"_setReserveFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accrualTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adjustSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"borrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"borrowApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"borrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"borrowPermit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowRate\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"currentBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRateLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kinkBorrowRate\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kinkUtilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seizeTokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateUpdateTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reduceToRatio\",\"type\":\"uint256\"}],\"name\":\"restructureDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBorrows\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "contract_name": "ImpermaxV3Borrowable",
      "compiler_version": "v0.5.16+commit.9c3226ce",
      "optimization_used": "1",
      "runs": "999999",
      "constructor_arguments": "",
      "evm_version": "Default",
      "library": "",
      "license_type": "BSL 1.1",
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0x4200000000000000000000000000000000000006": {
      "address": "0x4200000000000000000000000000000000000006",
      "has_source_code": true,
      "source_code": "/**\r\n *Submitted for verification at goerli.basescan.org on 2023-02-28\r\n*/\r\n\r\n// Copyright (C) 2015, 2016, 2017 Dapphub\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.4.22 <0.6;\r\n\r\ncontract WETH9 {\r\n    string public name     = \"Wrapped Ether\";\r\n    string public symbol   = \"WETH\";\r\n    uint8  public decimals = 18;\r\n\r\n    event  Approval(address indexed src, address indexed guy, uint wad);\r\n    event  Transfer(address indexed src, address indexed dst, uint wad);\r\n    event  Deposit(address indexed dst, uint wad);\r\n    event  Withdrawal(address indexed src, uint wad);\r\n\r\n    mapping (address => uint)                       public  balanceOf;\r\n    mapping (address => mapping (address => uint))  public  allowance;\r\n\r\n    function() external payable {\r\n        deposit();\r\n    }\r\n    function deposit() public payable {\r\n        balanceOf[msg.sender] += msg.value;\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n    function withdraw(uint wad) public {\r\n        require(balanceOf[msg.sender] >= wad);\r\n        balanceOf[msg.sender] -= wad;\r\n        msg.sender.transfer(wad);\r\n        emit Withdrawal(msg.sender, wad);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function approve(address guy, uint wad) public returns (bool) {\r\n        allowance[msg.sender][guy] = wad;\r\n        emit Approval(msg.sender, guy, wad);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(balanceOf[src] >= wad);\r\n\r\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\r\n            require(allowance[src][msg.sender] >= wad);\r\n            allowance[src][msg.sender] -= wad;\r\n        }\r\n\r\n        balanceOf[src] -= wad;\r\n        balanceOf[dst] += wad;\r\n\r\n        emit Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n                    GNU GENERAL PUBLIC LICENSE\r\n                       Version 3, 29 June 2007\r\n\r\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\r\n Everyone is permitted to copy and distribute verbatim copies\r\n of this license document, but changing it is not allowed.\r\n\r\n                            Preamble\r\n\r\n  The GNU General Public License is a free, copyleft license for\r\nsoftware and other kinds of works.\r\n\r\n  The licenses for most software and other practical works are designed\r\nto take away your freedom to share and change the works.  By contrast,\r\nthe GNU General Public License is intended to guarantee your freedom to\r\nshare and change all versions of a program--to make sure it remains free\r\nsoftware for all its users.  We, the Free Software Foundation, use the\r\nGNU General Public License for most of our software; it applies also to\r\nany other work released this way by its authors.  You can apply it to\r\nyour programs, too.\r\n\r\n  When we speak of free software, we are referring to freedom, not\r\nprice.  Our General Public Licenses are designed to make sure that you\r\nhave the freedom to distribute copies of free software (and charge for\r\nthem if you wish), that you receive source code or can get it if you\r\nwant it, that you can change the software or use pieces of it in new\r\nfree programs, and that you know you can do these things.\r\n\r\n  To protect your rights, we need to prevent others from denying you\r\nthese rights or asking you to surrender the rights.  Therefore, you have\r\ncertain responsibilities if you distribute copies of the software, or if\r\nyou modify it: responsibilities to respect the freedom of others.\r\n\r\n  For example, if you distribute copies of such a program, whether\r\ngratis or for a fee, you must pass on to the recipients the same\r\nfreedoms that you received.  You must make sure that they, too, receive\r\nor can get the source code.  And you must show them these terms so they\r\nknow their rights.\r\n\r\n  Developers that use the GNU GPL protect your rights with two steps:\r\n(1) assert copyright on the software, and (2) offer you this License\r\ngiving you legal permission to copy, distribute and/or modify it.\r\n\r\n  For the developers' and authors' protection, the GPL clearly explains\r\nthat there is no warranty for this free software.  For both users' and\r\nauthors' sake, the GPL requires that modified versions be marked as\r\nchanged, so that their problems will not be attributed erroneously to\r\nauthors of previous versions.\r\n\r\n  Some devices are designed to deny users access to install or run\r\nmodified versions of the software inside them, although the manufacturer\r\ncan do so.  This is fundamentally incompatible with the aim of\r\nprotecting users' freedom to change the software.  The systematic\r\npattern of such abuse occurs in the area of products for individuals to\r\nuse, which is precisely where it is most unacceptable.  Therefore, we\r\nhave designed this version of the GPL to prohibit the practice for those\r\nproducts.  If such problems arise substantially in other domains, we\r\nstand ready to extend this provision to those domains in future versions\r\nof the GPL, as needed to protect the freedom of users.\r\n\r\n  Finally, every program is threatened constantly by software patents.\r\nStates should not allow patents to restrict development and use of\r\nsoftware on general-purpose computers, but in those that do, we wish to\r\navoid the special danger that patents applied to a free program could\r\nmake it effectively proprietary.  To prevent this, the GPL assures that\r\npatents cannot be used to render the program non-free.\r\n\r\n  The precise terms and conditions for copying, distribution and\r\nmodification follow.\r\n\r\n                       TERMS AND CONDITIONS\r\n\r\n  0. Definitions.\r\n\r\n  \"This License\" refers to version 3 of the GNU General Public License.\r\n\r\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\r\nworks, such as semiconductor masks.\r\n\r\n  \"The Program\" refers to any copyrightable work licensed under this\r\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\r\n\"recipients\" may be individuals or organizations.\r\n\r\n  To \"modify\" a work means to copy from or adapt all or part of the work\r\nin a fashion requiring copyright permission, other than the making of an\r\nexact copy.  The resulting work is called a \"modified version\" of the\r\nearlier work or a work \"based on\" the earlier work.\r\n\r\n  A \"covered work\" means either the unmodified Program or a work based\r\non the Program.\r\n\r\n  To \"propagate\" a work means to do anything with it that, without\r\npermission, would make you directly or secondarily liable for\r\ninfringement under applicable copyright law, except executing it on a\r\ncomputer or modifying a private copy.  Propagation includes copying,\r\ndistribution (with or without modification), making available to the\r\npublic, and in some countries other activities as well.\r\n\r\n  To \"convey\" a work means any kind of propagation that enables other\r\nparties to make or receive copies.  Mere interaction with a user through\r\na computer network, with no transfer of a copy, is not conveying.\r\n\r\n  An interactive user interface displays \"Appropriate Legal Notices\"\r\nto the extent that it includes a convenient and prominently visible\r\nfeature that (1) displays an appropriate copyright notice, and (2)\r\ntells the user that there is no warranty for the work (except to the\r\nextent that warranties are provided), that licensees may convey the\r\nwork under this License, and how to view a copy of this License.  If\r\nthe interface presents a list of user commands or options, such as a\r\nmenu, a prominent item in the list meets this criterion.\r\n\r\n  1. Source Code.\r\n\r\n  The \"source code\" for a work means the preferred form of the work\r\nfor making modifications to it.  \"Object code\" means any non-source\r\nform of a work.\r\n\r\n  A \"Standard Interface\" means an interface that either is an official\r\nstandard defined by a recognized standards body, or, in the case of\r\ninterfaces specified for a particular programming language, one that\r\nis widely used among developers working in that language.\r\n\r\n  The \"System Libraries\" of an executable work include anything, other\r\nthan the work as a whole, that (a) is included in the normal form of\r\npackaging a Major Component, but which is not part of that Major\r\nComponent, and (b) serves only to enable use of the work with that\r\nMajor Component, or to implement a Standard Interface for which an\r\nimplementation is available to the public in source code form.  A\r\n\"Major Component\", in this context, means a major essential component\r\n(kernel, window system, and so on) of the specific operating system\r\n(if any) on which the executable work runs, or a compiler used to\r\nproduce the work, or an object code interpreter used to run it.\r\n\r\n  The \"Corresponding Source\" for a work in object code form means all\r\nthe source code needed to generate, install, and (for an executable\r\nwork) run the object code and to modify the work, including scripts to\r\ncontrol those activities.  However, it does not include the work's\r\nSystem Libraries, or general-purpose tools or generally available free\r\nprograms which are used unmodified in performing those activities but\r\nwhich are not part of the work.  For example, Corresponding Source\r\nincludes interface definition files associated with source files for\r\nthe work, and the source code for shared libraries and dynamically\r\nlinked subprograms that the work is specifically designed to require,\r\nsuch as by intimate data communication or control flow between those\r\nsubprograms and other parts of the work.\r\n\r\n  The Corresponding Source need not include anything that users\r\ncan regenerate automatically from other parts of the Corresponding\r\nSource.\r\n\r\n  The Corresponding Source for a work in source code form is that\r\nsame work.\r\n\r\n  2. Basic Permissions.\r\n\r\n  All rights granted under this License are granted for the term of\r\ncopyright on the Program, and are irrevocable provided the stated\r\nconditions are met.  This License explicitly affirms your unlimited\r\npermission to run the unmodified Program.  The output from running a\r\ncovered work is covered by this License only if the output, given its\r\ncontent, constitutes a covered work.  This License acknowledges your\r\nrights of fair use or other equivalent, as provided by copyright law.\r\n\r\n  You may make, run and propagate covered works that you do not\r\nconvey, without conditions so long as your license otherwise remains\r\nin force.  You may convey covered works to others for the sole purpose\r\nof having them make modifications exclusively for you, or provide you\r\nwith facilities for running those works, provided that you comply with\r\nthe terms of this License in conveying all material for which you do\r\nnot control copyright.  Those thus making or running the covered works\r\nfor you must do so exclusively on your behalf, under your direction\r\nand control, on terms that prohibit them from making any copies of\r\nyour copyrighted material outside their relationship with you.\r\n\r\n  Conveying under any other circumstances is permitted solely under\r\nthe conditions stated below.  Sublicensing is not allowed; section 10\r\nmakes it unnecessary.\r\n\r\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\r\n\r\n  No covered work shall be deemed part of an effective technological\r\nmeasure under any applicable law fulfilling obligations under article\r\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\r\nsimilar laws prohibiting or restricting circumvention of such\r\nmeasures.\r\n\r\n  When you convey a covered work, you waive any legal power to forbid\r\ncircumvention of technological measures to the extent such circumvention\r\nis effected by exercising rights under this License with respect to\r\nthe covered work, and you disclaim any intention to limit operation or\r\nmodification of the work as a means of enforcing, against the work's\r\nusers, your or third parties' legal rights to forbid circumvention of\r\ntechnological measures.\r\n\r\n  4. Conveying Verbatim Copies.\r\n\r\n  You may convey verbatim copies of the Program's source code as you\r\nreceive it, in any medium, provided that you conspicuously and\r\nappropriately publish on each copy an appropriate copyright notice;\r\nkeep intact all notices stating that this License and any\r\nnon-permissive terms added in accord with section 7 apply to the code;\r\nkeep intact all notices of the absence of any warranty; and give all\r\nrecipients a copy of this License along with the Program.\r\n\r\n  You may charge any price or no price for each copy that you convey,\r\nand you may offer support or warranty protection for a fee.\r\n\r\n  5. Conveying Modified Source Versions.\r\n\r\n  You may convey a work based on the Program, or the modifications to\r\nproduce it from the Program, in the form of source code under the\r\nterms of section 4, provided that you also meet all of these conditions:\r\n\r\n    a) The work must carry prominent notices stating that you modified\r\n    it, and giving a relevant date.\r\n\r\n    b) The work must carry prominent notices stating that it is\r\n    released under this License and any conditions added under section\r\n    7.  This requirement modifies the requirement in section 4 to\r\n    \"keep intact all notices\".\r\n\r\n    c) You must license the entire work, as a whole, under this\r\n    License to anyone who comes into possession of a copy.  This\r\n    License will therefore apply, along with any applicable section 7\r\n    additional terms, to the whole of the work, and all its parts,\r\n    regardless of how they are packaged.  This License gives no\r\n    permission to license the work in any other way, but it does not\r\n    invalidate such permission if you have separately received it.\r\n\r\n    d) If the work has interactive user interfaces, each must display\r\n    Appropriate Legal Notices; however, if the Program has interactive\r\n    interfaces that do not display Appropriate Legal Notices, your\r\n    work need not make them do so.\r\n\r\n  A compilation of a covered work with other separate and independent\r\nworks, which are not by their nature extensions of the covered work,\r\nand which are not combined with it such as to form a larger program,\r\nin or on a volume of a storage or distribution medium, is called an\r\n\"aggregate\" if the compilation and its resulting copyright are not\r\nused to limit the access or legal rights of the compilation's users\r\nbeyond what the individual works permit.  Inclusion of a covered work\r\nin an aggregate does not cause this License to apply to the other\r\nparts of the aggregate.\r\n\r\n  6. Conveying Non-Source Forms.\r\n\r\n  You may convey a covered work in object code form under the terms\r\nof sections 4 and 5, provided that you also convey the\r\nmachine-readable Corresponding Source under the terms of this License,\r\nin one of these ways:\r\n\r\n    a) Convey the object code in, or embodied in, a physical product\r\n    (including a physical distribution medium), accompanied by the\r\n    Corresponding Source fixed on a durable physical medium\r\n    customarily used for software interchange.\r\n\r\n    b) Convey the object code in, or embodied in, a physical product\r\n    (including a physical distribution medium), accompanied by a\r\n    written offer, valid for at least three years and valid for as\r\n    long as you offer spare parts or customer support for that product\r\n    model, to give anyone who possesses the object code either (1) a\r\n    copy of the Corresponding Source for all the software in the\r\n    product that is covered by this License, on a durable physical\r\n    medium customarily used for software interchange, for a price no\r\n    more than your reasonable cost of physically performing this\r\n    conveying of source, or (2) access to copy the\r\n    Corresponding Source from a network server at no charge.\r\n\r\n    c) Convey individual copies of the object code with a copy of the\r\n    written offer to provide the Corresponding Source.  This\r\n    alternative is allowed only occasionally and noncommercially, and\r\n    only if you received the object code with such an offer, in accord\r\n    with subsection 6b.\r\n\r\n    d) Convey the object code by offering access from a designated\r\n    place (gratis or for a charge), and offer equivalent access to the\r\n    Corresponding Source in the same way through the same place at no\r\n    further charge.  You need not require recipients to copy the\r\n    Corresponding Source along with the object code.  If the place to\r\n    copy the object code is a network server, the Corresponding Source\r\n    may be on a different server (operated by you or a third party)\r\n    that supports equivalent copying facilities, provided you maintain\r\n    clear directions next to the object code saying where to find the\r\n    Corresponding Source.  Regardless of what server hosts the\r\n    Corresponding Source, you remain obligated to ensure that it is\r\n    available for as long as needed to satisfy these requirements.\r\n\r\n    e) Convey the object code using peer-to-peer transmission, provided\r\n    you inform other peers where the object code and Corresponding\r\n    Source of the work are being offered to the general public at no\r\n    charge under subsection 6d.\r\n\r\n  A separable portion of the object code, whose source code is excluded\r\nfrom the Corresponding Source as a System Library, need not be\r\nincluded in conveying the object code work.\r\n\r\n  A \"User Product\" is either (1) a \"consumer product\", which means any\r\ntangible personal property which is normally used for personal, family,\r\nor household purposes, or (2) anything designed or sold for incorporation\r\ninto a dwelling.  In determining whether a product is a consumer product,\r\ndoubtful cases shall be resolved in favor of coverage.  For a particular\r\nproduct received by a particular user, \"normally used\" refers to a\r\ntypical or common use of that class of product, regardless of the status\r\nof the particular user or of the way in which the particular user\r\nactually uses, or expects or is expected to use, the product.  A product\r\nis a consumer product regardless of whether the product has substantial\r\ncommercial, industrial or non-consumer uses, unless such uses represent\r\nthe only significant mode of use of the product.\r\n\r\n  \"Installation Information\" for a User Product means any methods,\r\nprocedures, authorization keys, or other information required to install\r\nand execute modified versions of a covered work in that User Product from\r\na modified version of its Corresponding Source.  The information must\r\nsuffice to ensure that the continued functioning of the modified object\r\ncode is in no case prevented or interfered with solely because\r\nmodification has been made.\r\n\r\n  If you convey an object code work under this section in, or with, or\r\nspecifically for use in, a User Product, and the conveying occurs as\r\npart of a transaction in which the right of possession and use of the\r\nUser Product is transferred to the recipient in perpetuity or for a\r\nfixed term (regardless of how the transaction is characterized), the\r\nCorresponding Source conveyed under this section must be accompanied\r\nby the Installation Information.  But this requirement does not apply\r\nif neither you nor any third party retains the ability to install\r\nmodified object code on the User Product (for example, the work has\r\nbeen installed in ROM).\r\n\r\n  The requirement to provide Installation Information does not include a\r\nrequirement to continue to provide support service, warranty, or updates\r\nfor a work that has been modified or installed by the recipient, or for\r\nthe User Product in which it has been modified or installed.  Access to a\r\nnetwork may be denied when the modification itself materially and\r\nadversely affects the operation of the network or violates the rules and\r\nprotocols for communication across the network.\r\n\r\n  Corresponding Source conveyed, and Installation Information provided,\r\nin accord with this section must be in a format that is publicly\r\ndocumented (and with an implementation available to the public in\r\nsource code form), and must require no special password or key for\r\nunpacking, reading or copying.\r\n\r\n  7. Additional Terms.\r\n\r\n  \"Additional permissions\" are terms that supplement the terms of this\r\nLicense by making exceptions from one or more of its conditions.\r\nAdditional permissions that are applicable to the entire Program shall\r\nbe treated as though they were included in this License, to the extent\r\nthat they are valid under applicable law.  If additional permissions\r\napply only to part of the Program, that part may be used separately\r\nunder those permissions, but the entire Program remains governed by\r\nthis License without regard to the additional permissions.\r\n\r\n  When you convey a copy of a covered work, you may at your option\r\nremove any additional permissions from that copy, or from any part of\r\nit.  (Additional permissions may be written to require their own\r\nremoval in certain cases when you modify the work.)  You may place\r\nadditional permissions on material, added by you to a covered work,\r\nfor which you have or can give appropriate copyright permission.\r\n\r\n  Notwithstanding any other provision of this License, for material you\r\nadd to a covered work, you may (if authorized by the copyright holders of\r\nthat material) supplement the terms of this License with terms:\r\n\r\n    a) Disclaiming warranty or limiting liability differently from the\r\n    terms of sections 15 and 16 of this License; or\r\n\r\n    b) Requiring preservation of specified reasonable legal notices or\r\n    author attributions in that material or in the Appropriate Legal\r\n    Notices displayed by works containing it; or\r\n\r\n    c) Prohibiting misrepresentation of the origin of that material, or\r\n    requiring that modified versions of such material be marked in\r\n    reasonable ways as different from the original version; or\r\n\r\n    d) Limiting the use for publicity purposes of names of licensors or\r\n    authors of the material; or\r\n\r\n    e) Declining to grant rights under trademark law for use of some\r\n    trade names, trademarks, or service marks; or\r\n\r\n    f) Requiring indemnification of licensors and authors of that\r\n    material by anyone who conveys the material (or modified versions of\r\n    it) with contractual assumptions of liability to the recipient, for\r\n    any liability that these contractual assumptions directly impose on\r\n    those licensors and authors.\r\n\r\n  All other non-permissive additional terms are considered \"further\r\nrestrictions\" within the meaning of section 10.  If the Program as you\r\nreceived it, or any part of it, contains a notice stating that it is\r\ngoverned by this License along with a term that is a further\r\nrestriction, you may remove that term.  If a license document contains\r\na further restriction but permits relicensing or conveying under this\r\nLicense, you may add to a covered work material governed by the terms\r\nof that license document, provided that the further restriction does\r\nnot survive such relicensing or conveying.\r\n\r\n  If you add terms to a covered work in accord with this section, you\r\nmust place, in the relevant source files, a statement of the\r\nadditional terms that apply to those files, or a notice indicating\r\nwhere to find the applicable terms.\r\n\r\n  Additional terms, permissive or non-permissive, may be stated in the\r\nform of a separately written license, or stated as exceptions;\r\nthe above requirements apply either way.\r\n\r\n  8. Termination.\r\n\r\n  You may not propagate or modify a covered work except as expressly\r\nprovided under this License.  Any attempt otherwise to propagate or\r\nmodify it is void, and will automatically terminate your rights under\r\nthis License (including any patent licenses granted under the third\r\nparagraph of section 11).\r\n\r\n  However, if you cease all violation of this License, then your\r\nlicense from a particular copyright holder is reinstated (a)\r\nprovisionally, unless and until the copyright holder explicitly and\r\nfinally terminates your license, and (b) permanently, if the copyright\r\nholder fails to notify you of the violation by some reasonable means\r\nprior to 60 days after the cessation.\r\n\r\n  Moreover, your license from a particular copyright holder is\r\nreinstated permanently if the copyright holder notifies you of the\r\nviolation by some reasonable means, this is the first time you have\r\nreceived notice of violation of this License (for any work) from that\r\ncopyright holder, and you cure the violation prior to 30 days after\r\nyour receipt of the notice.\r\n\r\n  Termination of your rights under this section does not terminate the\r\nlicenses of parties who have received copies or rights from you under\r\nthis License.  If your rights have been terminated and not permanently\r\nreinstated, you do not qualify to receive new licenses for the same\r\nmaterial under section 10.\r\n\r\n  9. Acceptance Not Required for Having Copies.\r\n\r\n  You are not required to accept this License in order to receive or\r\nrun a copy of the Program.  Ancillary propagation of a covered work\r\noccurring solely as a consequence of using peer-to-peer transmission\r\nto receive a copy likewise does not require acceptance.  However,\r\nnothing other than this License grants you permission to propagate or\r\nmodify any covered work.  These actions infringe copyright if you do\r\nnot accept this License.  Therefore, by modifying or propagating a\r\ncovered work, you indicate your acceptance of this License to do so.\r\n\r\n  10. Automatic Licensing of Downstream Recipients.\r\n\r\n  Each time you convey a covered work, the recipient automatically\r\nreceives a license from the original licensors, to run, modify and\r\npropagate that work, subject to this License.  You are not responsible\r\nfor enforcing compliance by third parties with this License.\r\n\r\n  An \"entity transaction\" is a transaction transferring control of an\r\norganization, or substantially all assets of one, or subdividing an\r\norganization, or merging organizations.  If propagation of a covered\r\nwork results from an entity transaction, each party to that\r\ntransaction who receives a copy of the work also receives whatever\r\nlicenses to the work the party's predecessor in interest had or could\r\ngive under the previous paragraph, plus a right to possession of the\r\nCorresponding Source of the work from the predecessor in interest, if\r\nthe predecessor has it or can get it with reasonable efforts.\r\n\r\n  You may not impose any further restrictions on the exercise of the\r\nrights granted or affirmed under this License.  For example, you may\r\nnot impose a license fee, royalty, or other charge for exercise of\r\nrights granted under this License, and you may not initiate litigation\r\n(including a cross-claim or counterclaim in a lawsuit) alleging that\r\nany patent claim is infringed by making, using, selling, offering for\r\nsale, or importing the Program or any portion of it.\r\n\r\n  11. Patents.\r\n\r\n  A \"contributor\" is a copyright holder who authorizes use under this\r\nLicense of the Program or a work on which the Program is based.  The\r\nwork thus licensed is called the contributor's \"contributor version\".\r\n\r\n  A contributor's \"essential patent claims\" are all patent claims\r\nowned or controlled by the contributor, whether already acquired or\r\nhereafter acquired, that would be infringed by some manner, permitted\r\nby this License, of making, using, or selling its contributor version,\r\nbut do not include claims that would be infringed only as a\r\nconsequence of further modification of the contributor version.  For\r\npurposes of this definition, \"control\" includes the right to grant\r\npatent sublicenses in a manner consistent with the requirements of\r\nthis License.\r\n\r\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\r\npatent license under the contributor's essential patent claims, to\r\nmake, use, sell, offer for sale, import and otherwise run, modify and\r\npropagate the contents of its contributor version.\r\n\r\n  In the following three paragraphs, a \"patent license\" is any express\r\nagreement or commitment, however denominated, not to enforce a patent\r\n(such as an express permission to practice a patent or covenant not to\r\nsue for patent infringement).  To \"grant\" such a patent license to a\r\nparty means to make such an agreement or commitment not to enforce a\r\npatent against the party.\r\n\r\n  If you convey a covered work, knowingly relying on a patent license,\r\nand the Corresponding Source of the work is not available for anyone\r\nto copy, free of charge and under the terms of this License, through a\r\npublicly available network server or other readily accessible means,\r\nthen you must either (1) cause the Corresponding Source to be so\r\navailable, or (2) arrange to deprive yourself of the benefit of the\r\npatent license for this particular work, or (3) arrange, in a manner\r\nconsistent with the requirements of this License, to extend the patent\r\nlicense to downstream recipients.  \"Knowingly relying\" means you have\r\nactual knowledge that, but for the patent license, your conveying the\r\ncovered work in a country, or your recipient's use of the covered work\r\nin a country, would infringe one or more identifiable patents in that\r\ncountry that you have reason to believe are valid.\r\n\r\n  If, pursuant to or in connection with a single transaction or\r\narrangement, you convey, or propagate by procuring conveyance of, a\r\ncovered work, and grant a patent license to some of the parties\r\nreceiving the covered work authorizing them to use, propagate, modify\r\nor convey a specific copy of the covered work, then the patent license\r\nyou grant is automatically extended to all recipients of the covered\r\nwork and works based on it.\r\n\r\n  A patent license is \"discriminatory\" if it does not include within\r\nthe scope of its coverage, prohibits the exercise of, or is\r\nconditioned on the non-exercise of one or more of the rights that are\r\nspecifically granted under this License.  You may not convey a covered\r\nwork if you are a party to an arrangement with a third party that is\r\nin the business of distributing software, under which you make payment\r\nto the third party based on the extent of your activity of conveying\r\nthe work, and under which the third party grants, to any of the\r\nparties who would receive the covered work from you, a discriminatory\r\npatent license (a) in connection with copies of the covered work\r\nconveyed by you (or copies made from those copies), or (b) primarily\r\nfor and in connection with specific products or compilations that\r\ncontain the covered work, unless you entered into that arrangement,\r\nor that patent license was granted, prior to 28 March 2007.\r\n\r\n  Nothing in this License shall be construed as excluding or limiting\r\nany implied license or other defenses to infringement that may\r\notherwise be available to you under applicable patent law.\r\n\r\n  12. No Surrender of Others' Freedom.\r\n\r\n  If conditions are imposed on you (whether by court order, agreement or\r\notherwise) that contradict the conditions of this License, they do not\r\nexcuse you from the conditions of this License.  If you cannot convey a\r\ncovered work so as to satisfy simultaneously your obligations under this\r\nLicense and any other pertinent obligations, then as a consequence you may\r\nnot convey it at all.  For example, if you agree to terms that obligate you\r\nto collect a royalty for further conveying from those to whom you convey\r\nthe Program, the only way you could satisfy both those terms and this\r\nLicense would be to refrain entirely from conveying the Program.\r\n\r\n  13. Use with the GNU Affero General Public License.\r\n\r\n  Notwithstanding any other provision of this License, you have\r\npermission to link or combine any covered work with a work licensed\r\nunder version 3 of the GNU Affero General Public License into a single\r\ncombined work, and to convey the resulting work.  The terms of this\r\nLicense will continue to apply to the part which is the covered work,\r\nbut the special requirements of the GNU Affero General Public License,\r\nsection 13, concerning interaction through a network will apply to the\r\ncombination as such.\r\n\r\n  14. Revised Versions of this License.\r\n\r\n  The Free Software Foundation may publish revised and/or new versions of\r\nthe GNU General Public License from time to time.  Such new versions will\r\nbe similar in spirit to the present version, but may differ in detail to\r\naddress new problems or concerns.\r\n\r\n  Each version is given a distinguishing version number.  If the\r\nProgram specifies that a certain numbered version of the GNU General\r\nPublic License \"or any later version\" applies to it, you have the\r\noption of following the terms and conditions either of that numbered\r\nversion or of any later version published by the Free Software\r\nFoundation.  If the Program does not specify a version number of the\r\nGNU General Public License, you may choose any version ever published\r\nby the Free Software Foundation.\r\n\r\n  If the Program specifies that a proxy can decide which future\r\nversions of the GNU General Public License can be used, that proxy's\r\npublic statement of acceptance of a version permanently authorizes you\r\nto choose that version for the Program.\r\n\r\n  Later license versions may give you additional or different\r\npermissions.  However, no additional obligations are imposed on any\r\nauthor or copyright holder as a result of your choosing to follow a\r\nlater version.\r\n\r\n  15. Disclaimer of Warranty.\r\n\r\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\r\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\r\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\r\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\r\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\r\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\r\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\r\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\r\n\r\n  16. Limitation of Liability.\r\n\r\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\r\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\r\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\r\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\r\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\r\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\r\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\r\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\r\nSUCH DAMAGES.\r\n\r\n  17. Interpretation of Sections 15 and 16.\r\n\r\n  If the disclaimer of warranty and limitation of liability provided\r\nabove cannot be given local legal effect according to their terms,\r\nreviewing courts shall apply local law that most closely approximates\r\nan absolute waiver of all civil liability in connection with the\r\nProgram, unless a warranty or assumption of liability accompanies a\r\ncopy of the Program in return for a fee.\r\n\r\n                     END OF TERMS AND CONDITIONS\r\n\r\n            How to Apply These Terms to Your New Programs\r\n\r\n  If you develop a new program, and you want it to be of the greatest\r\npossible use to the public, the best way to achieve this is to make it\r\nfree software which everyone can redistribute and change under these terms.\r\n\r\n  To do so, attach the following notices to the program.  It is safest\r\nto attach them to the start of each source file to most effectively\r\nstate the exclusion of warranty; and each file should have at least\r\nthe \"copyright\" line and a pointer to where the full notice is found.\r\n\r\n    <one line to give the program's name and a brief idea of what it does.>\r\n    Copyright (C) <year>  <name of author>\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nAlso add information on how to contact you by electronic and paper mail.\r\n\r\n  If the program does terminal interaction, make it output a short\r\nnotice like this when it starts in an interactive mode:\r\n\r\n    <program>  Copyright (C) <year>  <name of author>\r\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\r\n    This is free software, and you are welcome to redistribute it\r\n    under certain conditions; type `show c' for details.\r\n\r\nThe hypothetical commands `show w' and `show c' should show the appropriate\r\nparts of the General Public License.  Of course, your program's commands\r\nmight be different; for a GUI interface, you would use an \"about box\".\r\n\r\n  You should also get your employer (if you work as a programmer) or school,\r\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\r\nFor more information on this, and how to apply and follow the GNU GPL, see\r\n<http://www.gnu.org/licenses/>.\r\n\r\n  The GNU General Public License does not permit incorporating your program\r\ninto proprietary programs.  If your program is a subroutine library, you\r\nmay consider it more useful to permit linking proprietary applications with\r\nthe library.  If this is what you want to do, use the GNU Lesser General\r\nPublic License instead of this License.  But first, please read\r\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\r\n\r\n*/",
      "abi": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "contract_name": "WETH9",
      "compiler_version": "v0.5.17+commit.d19bba13",
      "optimization_used": "1",
      "runs": "10000",
      "constructor_arguments": "",
      "evm_version": "Default",
      "library": "",
      "license_type": "GNU LGPLv3",
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0xd0b53d9277642d899df5c87a3966a349a798f224": {
      "address": "0xd0b53d9277642d899df5c87a3966a349a798f224",
      "has_source_code": true,
      "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/UniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.7.6;\\n\\nimport './interfaces/IUniswapV3Pool.sol';\\n\\nimport './NoDelegateCall.sol';\\n\\nimport './libraries/LowGasSafeMath.sol';\\nimport './libraries/SafeCast.sol';\\nimport './libraries/Tick.sol';\\nimport './libraries/TickBitmap.sol';\\nimport './libraries/Position.sol';\\nimport './libraries/Oracle.sol';\\n\\nimport './libraries/FullMath.sol';\\nimport './libraries/FixedPoint128.sol';\\nimport './libraries/TransferHelper.sol';\\nimport './libraries/TickMath.sol';\\nimport './libraries/LiquidityMath.sol';\\nimport './libraries/SqrtPriceMath.sol';\\nimport './libraries/SwapMath.sol';\\n\\nimport './interfaces/IUniswapV3PoolDeployer.sol';\\nimport './interfaces/IUniswapV3Factory.sol';\\nimport './interfaces/IERC20Minimal.sol';\\nimport './interfaces/callback/IUniswapV3MintCallback.sol';\\nimport './interfaces/callback/IUniswapV3SwapCallback.sol';\\nimport './interfaces/callback/IUniswapV3FlashCallback.sol';\\n\\ncontract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {\\n    using LowGasSafeMath for uint256;\\n    using LowGasSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using Tick for mapping(int24 => Tick.Info);\\n    using TickBitmap for mapping(int16 => uint256);\\n    using Position for mapping(bytes32 => Position.Info);\\n    using Position for Position.Info;\\n    using Oracle for Oracle.Observation[65535];\\n\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    address public immutable override factory;\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    address public immutable override token0;\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    address public immutable override token1;\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    uint24 public immutable override fee;\\n\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    int24 public immutable override tickSpacing;\\n\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    uint128 public immutable override maxLiquidityPerTick;\\n\\n    struct Slot0 {\\n        // the current price\\n        uint160 sqrtPriceX96;\\n        // the current tick\\n        int24 tick;\\n        // the most-recently updated index of the observations array\\n        uint16 observationIndex;\\n        // the current maximum number of observations that are being stored\\n        uint16 observationCardinality;\\n        // the next maximum number of observations to store, triggered in observations.write\\n        uint16 observationCardinalityNext;\\n        // the current protocol fee as a percentage of the swap fee taken on withdrawal\\n        // represented as an integer denominator (1/x)%\\n        uint8 feeProtocol;\\n        // whether the pool is locked\\n        bool unlocked;\\n    }\\n    /// @inheritdoc IUniswapV3PoolState\\n    Slot0 public override slot0;\\n\\n    /// @inheritdoc IUniswapV3PoolState\\n    uint256 public override feeGrowthGlobal0X128;\\n    /// @inheritdoc IUniswapV3PoolState\\n    uint256 public override feeGrowthGlobal1X128;\\n\\n    // accumulated protocol fees in token0/token1 units\\n    struct ProtocolFees {\\n        uint128 token0;\\n        uint128 token1;\\n    }\\n    /// @inheritdoc IUniswapV3PoolState\\n    ProtocolFees public override protocolFees;\\n\\n    /// @inheritdoc IUniswapV3PoolState\\n    uint128 public override liquidity;\\n\\n    /// @inheritdoc IUniswapV3PoolState\\n    mapping(int24 => Tick.Info) public override ticks;\\n    /// @inheritdoc IUniswapV3PoolState\\n    mapping(int16 => uint256) public override tickBitmap;\\n    /// @inheritdoc IUniswapV3PoolState\\n    mapping(bytes32 => Position.Info) public override positions;\\n    /// @inheritdoc IUniswapV3PoolState\\n    Oracle.Observation[65535] public override observations;\\n\\n    /// @dev Mutually exclusive reentrancy protection into the pool to/from a method. This method also prevents entrance\\n    /// to a function before the pool is initialized. The reentrancy guard is required throughout the contract because\\n    /// we use balance checks to determine the payment status of interactions such as mint, swap and flash.\\n    modifier lock() {\\n        require(slot0.unlocked, 'LOK');\\n        slot0.unlocked = false;\\n        _;\\n        slot0.unlocked = true;\\n    }\\n\\n    /// @dev Prevents calling a function from anyone except the address returned by IUniswapV3Factory#owner()\\n    modifier onlyFactoryOwner() {\\n        require(msg.sender == IUniswapV3Factory(factory).owner());\\n        _;\\n    }\\n\\n    constructor() {\\n        int24 _tickSpacing;\\n        (factory, token0, token1, fee, _tickSpacing) = IUniswapV3PoolDeployer(msg.sender).parameters();\\n        tickSpacing = _tickSpacing;\\n\\n        maxLiquidityPerTick = Tick.tickSpacingToMaxLiquidityPerTick(_tickSpacing);\\n    }\\n\\n    /// @dev Common checks for valid tick inputs.\\n    function checkTicks(int24 tickLower, int24 tickUpper) private pure {\\n        require(tickLower < tickUpper, 'TLU');\\n        require(tickLower >= TickMath.MIN_TICK, 'TLM');\\n        require(tickUpper <= TickMath.MAX_TICK, 'TUM');\\n    }\\n\\n    /// @dev Returns the block timestamp truncated to 32 bits, i.e. mod 2**32. This method is overridden in tests.\\n    function _blockTimestamp() internal view virtual returns (uint32) {\\n        return uint32(block.timestamp); // truncation is desired\\n    }\\n\\n    /// @dev Get the pool's balance of token0\\n    /// @dev This function is gas optimized to avoid a redundant extcodesize check in addition to the returndatasize\\n    /// check\\n    function balance0() private view returns (uint256) {\\n        (bool success, bytes memory data) =\\n            token0.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, address(this)));\\n        require(success && data.length >= 32);\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Get the pool's balance of token1\\n    /// @dev This function is gas optimized to avoid a redundant extcodesize check in addition to the returndatasize\\n    /// check\\n    function balance1() private view returns (uint256) {\\n        (bool success, bytes memory data) =\\n            token1.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, address(this)));\\n        require(success && data.length >= 32);\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolDerivedState\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        override\\n        noDelegateCall\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        )\\n    {\\n        checkTicks(tickLower, tickUpper);\\n\\n        int56 tickCumulativeLower;\\n        int56 tickCumulativeUpper;\\n        uint160 secondsPerLiquidityOutsideLowerX128;\\n        uint160 secondsPerLiquidityOutsideUpperX128;\\n        uint32 secondsOutsideLower;\\n        uint32 secondsOutsideUpper;\\n\\n        {\\n            Tick.Info storage lower = ticks[tickLower];\\n            Tick.Info storage upper = ticks[tickUpper];\\n            bool initializedLower;\\n            (tickCumulativeLower, secondsPerLiquidityOutsideLowerX128, secondsOutsideLower, initializedLower) = (\\n                lower.tickCumulativeOutside,\\n                lower.secondsPerLiquidityOutsideX128,\\n                lower.secondsOutside,\\n                lower.initialized\\n            );\\n            require(initializedLower);\\n\\n            bool initializedUpper;\\n            (tickCumulativeUpper, secondsPerLiquidityOutsideUpperX128, secondsOutsideUpper, initializedUpper) = (\\n                upper.tickCumulativeOutside,\\n                upper.secondsPerLiquidityOutsideX128,\\n                upper.secondsOutside,\\n                upper.initialized\\n            );\\n            require(initializedUpper);\\n        }\\n\\n        Slot0 memory _slot0 = slot0;\\n\\n        if (_slot0.tick < tickLower) {\\n            return (\\n                tickCumulativeLower - tickCumulativeUpper,\\n                secondsPerLiquidityOutsideLowerX128 - secondsPerLiquidityOutsideUpperX128,\\n                secondsOutsideLower - secondsOutsideUpper\\n            );\\n        } else if (_slot0.tick < tickUpper) {\\n            uint32 time = _blockTimestamp();\\n            (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) =\\n                observations.observeSingle(\\n                    time,\\n                    0,\\n                    _slot0.tick,\\n                    _slot0.observationIndex,\\n                    liquidity,\\n                    _slot0.observationCardinality\\n                );\\n            return (\\n                tickCumulative - tickCumulativeLower - tickCumulativeUpper,\\n                secondsPerLiquidityCumulativeX128 -\\n                    secondsPerLiquidityOutsideLowerX128 -\\n                    secondsPerLiquidityOutsideUpperX128,\\n                time - secondsOutsideLower - secondsOutsideUpper\\n            );\\n        } else {\\n            return (\\n                tickCumulativeUpper - tickCumulativeLower,\\n                secondsPerLiquidityOutsideUpperX128 - secondsPerLiquidityOutsideLowerX128,\\n                secondsOutsideUpper - secondsOutsideLower\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolDerivedState\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        override\\n        noDelegateCall\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s)\\n    {\\n        return\\n            observations.observe(\\n                _blockTimestamp(),\\n                secondsAgos,\\n                slot0.tick,\\n                slot0.observationIndex,\\n                liquidity,\\n                slot0.observationCardinality\\n            );\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext)\\n        external\\n        override\\n        lock\\n        noDelegateCall\\n    {\\n        uint16 observationCardinalityNextOld = slot0.observationCardinalityNext; // for the event\\n        uint16 observationCardinalityNextNew =\\n            observations.grow(observationCardinalityNextOld, observationCardinalityNext);\\n        slot0.observationCardinalityNext = observationCardinalityNextNew;\\n        if (observationCardinalityNextOld != observationCardinalityNextNew)\\n            emit IncreaseObservationCardinalityNext(observationCardinalityNextOld, observationCardinalityNextNew);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    /// @dev not locked because it initializes unlocked\\n    function initialize(uint160 sqrtPriceX96) external override {\\n        require(slot0.sqrtPriceX96 == 0, 'AI');\\n\\n        int24 tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96);\\n\\n        (uint16 cardinality, uint16 cardinalityNext) = observations.initialize(_blockTimestamp());\\n\\n        slot0 = Slot0({\\n            sqrtPriceX96: sqrtPriceX96,\\n            tick: tick,\\n            observationIndex: 0,\\n            observationCardinality: cardinality,\\n            observationCardinalityNext: cardinalityNext,\\n            feeProtocol: 0,\\n            unlocked: true\\n        });\\n\\n        emit Initialize(sqrtPriceX96, tick);\\n    }\\n\\n    struct ModifyPositionParams {\\n        // the address that owns the position\\n        address owner;\\n        // the lower and upper tick of the position\\n        int24 tickLower;\\n        int24 tickUpper;\\n        // any change in liquidity\\n        int128 liquidityDelta;\\n    }\\n\\n    /// @dev Effect some changes to a position\\n    /// @param params the position details and the change to the position's liquidity to effect\\n    /// @return position a storage pointer referencing the position with the given owner and tick range\\n    /// @return amount0 the amount of token0 owed to the pool, negative if the pool should pay the recipient\\n    /// @return amount1 the amount of token1 owed to the pool, negative if the pool should pay the recipient\\n    function _modifyPosition(ModifyPositionParams memory params)\\n        private\\n        noDelegateCall\\n        returns (\\n            Position.Info storage position,\\n            int256 amount0,\\n            int256 amount1\\n        )\\n    {\\n        checkTicks(params.tickLower, params.tickUpper);\\n\\n        Slot0 memory _slot0 = slot0; // SLOAD for gas optimization\\n\\n        position = _updatePosition(\\n            params.owner,\\n            params.tickLower,\\n            params.tickUpper,\\n            params.liquidityDelta,\\n            _slot0.tick\\n        );\\n\\n        if (params.liquidityDelta != 0) {\\n            if (_slot0.tick < params.tickLower) {\\n                // current tick is below the passed range; liquidity can only become in range by crossing from left to\\n                // right, when we'll need _more_ token0 (it's becoming more valuable) so user must provide it\\n                amount0 = SqrtPriceMath.getAmount0Delta(\\n                    TickMath.getSqrtRatioAtTick(params.tickLower),\\n                    TickMath.getSqrtRatioAtTick(params.tickUpper),\\n                    params.liquidityDelta\\n                );\\n            } else if (_slot0.tick < params.tickUpper) {\\n                // current tick is inside the passed range\\n                uint128 liquidityBefore = liquidity; // SLOAD for gas optimization\\n\\n                // write an oracle entry\\n                (slot0.observationIndex, slot0.observationCardinality) = observations.write(\\n                    _slot0.observationIndex,\\n                    _blockTimestamp(),\\n                    _slot0.tick,\\n                    liquidityBefore,\\n                    _slot0.observationCardinality,\\n                    _slot0.observationCardinalityNext\\n                );\\n\\n                amount0 = SqrtPriceMath.getAmount0Delta(\\n                    _slot0.sqrtPriceX96,\\n                    TickMath.getSqrtRatioAtTick(params.tickUpper),\\n                    params.liquidityDelta\\n                );\\n                amount1 = SqrtPriceMath.getAmount1Delta(\\n                    TickMath.getSqrtRatioAtTick(params.tickLower),\\n                    _slot0.sqrtPriceX96,\\n                    params.liquidityDelta\\n                );\\n\\n                liquidity = LiquidityMath.addDelta(liquidityBefore, params.liquidityDelta);\\n            } else {\\n                // current tick is above the passed range; liquidity can only become in range by crossing from right to\\n                // left, when we'll need _more_ token1 (it's becoming more valuable) so user must provide it\\n                amount1 = SqrtPriceMath.getAmount1Delta(\\n                    TickMath.getSqrtRatioAtTick(params.tickLower),\\n                    TickMath.getSqrtRatioAtTick(params.tickUpper),\\n                    params.liquidityDelta\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @dev Gets and updates a position with the given liquidity delta\\n    /// @param owner the owner of the position\\n    /// @param tickLower the lower tick of the position's tick range\\n    /// @param tickUpper the upper tick of the position's tick range\\n    /// @param tick the current tick, passed to avoid sloads\\n    function _updatePosition(\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int128 liquidityDelta,\\n        int24 tick\\n    ) private returns (Position.Info storage position) {\\n        position = positions.get(owner, tickLower, tickUpper);\\n\\n        uint256 _feeGrowthGlobal0X128 = feeGrowthGlobal0X128; // SLOAD for gas optimization\\n        uint256 _feeGrowthGlobal1X128 = feeGrowthGlobal1X128; // SLOAD for gas optimization\\n\\n        // if we need to update the ticks, do it\\n        bool flippedLower;\\n        bool flippedUpper;\\n        if (liquidityDelta != 0) {\\n            uint32 time = _blockTimestamp();\\n            (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) =\\n                observations.observeSingle(\\n                    time,\\n                    0,\\n                    slot0.tick,\\n                    slot0.observationIndex,\\n                    liquidity,\\n                    slot0.observationCardinality\\n                );\\n\\n            flippedLower = ticks.update(\\n                tickLower,\\n                tick,\\n                liquidityDelta,\\n                _feeGrowthGlobal0X128,\\n                _feeGrowthGlobal1X128,\\n                secondsPerLiquidityCumulativeX128,\\n                tickCumulative,\\n                time,\\n                false,\\n                maxLiquidityPerTick\\n            );\\n            flippedUpper = ticks.update(\\n                tickUpper,\\n                tick,\\n                liquidityDelta,\\n                _feeGrowthGlobal0X128,\\n                _feeGrowthGlobal1X128,\\n                secondsPerLiquidityCumulativeX128,\\n                tickCumulative,\\n                time,\\n                true,\\n                maxLiquidityPerTick\\n            );\\n\\n            if (flippedLower) {\\n                tickBitmap.flipTick(tickLower, tickSpacing);\\n            }\\n            if (flippedUpper) {\\n                tickBitmap.flipTick(tickUpper, tickSpacing);\\n            }\\n        }\\n\\n        (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) =\\n            ticks.getFeeGrowthInside(tickLower, tickUpper, tick, _feeGrowthGlobal0X128, _feeGrowthGlobal1X128);\\n\\n        position.update(liquidityDelta, feeGrowthInside0X128, feeGrowthInside1X128);\\n\\n        // clear any tick data that is no longer needed\\n        if (liquidityDelta < 0) {\\n            if (flippedLower) {\\n                ticks.clear(tickLower);\\n            }\\n            if (flippedUpper) {\\n                ticks.clear(tickUpper);\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    /// @dev noDelegateCall is applied indirectly via _modifyPosition\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external override lock returns (uint256 amount0, uint256 amount1) {\\n        require(amount > 0);\\n        (, int256 amount0Int, int256 amount1Int) =\\n            _modifyPosition(\\n                ModifyPositionParams({\\n                    owner: recipient,\\n                    tickLower: tickLower,\\n                    tickUpper: tickUpper,\\n                    liquidityDelta: int256(amount).toInt128()\\n                })\\n            );\\n\\n        amount0 = uint256(amount0Int);\\n        amount1 = uint256(amount1Int);\\n\\n        uint256 balance0Before;\\n        uint256 balance1Before;\\n        if (amount0 > 0) balance0Before = balance0();\\n        if (amount1 > 0) balance1Before = balance1();\\n        IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0, amount1, data);\\n        if (amount0 > 0) require(balance0Before.add(amount0) <= balance0(), 'M0');\\n        if (amount1 > 0) require(balance1Before.add(amount1) <= balance1(), 'M1');\\n\\n        emit Mint(msg.sender, recipient, tickLower, tickUpper, amount, amount0, amount1);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external override lock returns (uint128 amount0, uint128 amount1) {\\n        // we don't need to checkTicks here, because invalid positions will never have non-zero tokensOwed{0,1}\\n        Position.Info storage position = positions.get(msg.sender, tickLower, tickUpper);\\n\\n        amount0 = amount0Requested > position.tokensOwed0 ? position.tokensOwed0 : amount0Requested;\\n        amount1 = amount1Requested > position.tokensOwed1 ? position.tokensOwed1 : amount1Requested;\\n\\n        if (amount0 > 0) {\\n            position.tokensOwed0 -= amount0;\\n            TransferHelper.safeTransfer(token0, recipient, amount0);\\n        }\\n        if (amount1 > 0) {\\n            position.tokensOwed1 -= amount1;\\n            TransferHelper.safeTransfer(token1, recipient, amount1);\\n        }\\n\\n        emit Collect(msg.sender, recipient, tickLower, tickUpper, amount0, amount1);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    /// @dev noDelegateCall is applied indirectly via _modifyPosition\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external override lock returns (uint256 amount0, uint256 amount1) {\\n        (Position.Info storage position, int256 amount0Int, int256 amount1Int) =\\n            _modifyPosition(\\n                ModifyPositionParams({\\n                    owner: msg.sender,\\n                    tickLower: tickLower,\\n                    tickUpper: tickUpper,\\n                    liquidityDelta: -int256(amount).toInt128()\\n                })\\n            );\\n\\n        amount0 = uint256(-amount0Int);\\n        amount1 = uint256(-amount1Int);\\n\\n        if (amount0 > 0 || amount1 > 0) {\\n            (position.tokensOwed0, position.tokensOwed1) = (\\n                position.tokensOwed0 + uint128(amount0),\\n                position.tokensOwed1 + uint128(amount1)\\n            );\\n        }\\n\\n        emit Burn(msg.sender, tickLower, tickUpper, amount, amount0, amount1);\\n    }\\n\\n    struct SwapCache {\\n        // the protocol fee for the input token\\n        uint8 feeProtocol;\\n        // liquidity at the beginning of the swap\\n        uint128 liquidityStart;\\n        // the timestamp of the current block\\n        uint32 blockTimestamp;\\n        // the current value of the tick accumulator, computed only if we cross an initialized tick\\n        int56 tickCumulative;\\n        // the current value of seconds per liquidity accumulator, computed only if we cross an initialized tick\\n        uint160 secondsPerLiquidityCumulativeX128;\\n        // whether we've computed and cached the above two accumulators\\n        bool computedLatestObservation;\\n    }\\n\\n    // the top level state of the swap, the results of which are recorded in storage at the end\\n    struct SwapState {\\n        // the amount remaining to be swapped in/out of the input/output asset\\n        int256 amountSpecifiedRemaining;\\n        // the amount already swapped out/in of the output/input asset\\n        int256 amountCalculated;\\n        // current sqrt(price)\\n        uint160 sqrtPriceX96;\\n        // the tick associated with the current price\\n        int24 tick;\\n        // the global fee growth of the input token\\n        uint256 feeGrowthGlobalX128;\\n        // amount of input token paid as protocol fee\\n        uint128 protocolFee;\\n        // the current liquidity in range\\n        uint128 liquidity;\\n    }\\n\\n    struct StepComputations {\\n        // the price at the beginning of the step\\n        uint160 sqrtPriceStartX96;\\n        // the next tick to swap to from the current tick in the swap direction\\n        int24 tickNext;\\n        // whether tickNext is initialized or not\\n        bool initialized;\\n        // sqrt(price) for the next tick (1/0)\\n        uint160 sqrtPriceNextX96;\\n        // how much is being swapped in in this step\\n        uint256 amountIn;\\n        // how much is being swapped out\\n        uint256 amountOut;\\n        // how much fee is being paid in\\n        uint256 feeAmount;\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external override noDelegateCall returns (int256 amount0, int256 amount1) {\\n        require(amountSpecified != 0, 'AS');\\n\\n        Slot0 memory slot0Start = slot0;\\n\\n        require(slot0Start.unlocked, 'LOK');\\n        require(\\n            zeroForOne\\n                ? sqrtPriceLimitX96 < slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 > TickMath.MIN_SQRT_RATIO\\n                : sqrtPriceLimitX96 > slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 < TickMath.MAX_SQRT_RATIO,\\n            'SPL'\\n        );\\n\\n        slot0.unlocked = false;\\n\\n        SwapCache memory cache =\\n            SwapCache({\\n                liquidityStart: liquidity,\\n                blockTimestamp: _blockTimestamp(),\\n                feeProtocol: zeroForOne ? (slot0Start.feeProtocol % 16) : (slot0Start.feeProtocol >> 4),\\n                secondsPerLiquidityCumulativeX128: 0,\\n                tickCumulative: 0,\\n                computedLatestObservation: false\\n            });\\n\\n        bool exactInput = amountSpecified > 0;\\n\\n        SwapState memory state =\\n            SwapState({\\n                amountSpecifiedRemaining: amountSpecified,\\n                amountCalculated: 0,\\n                sqrtPriceX96: slot0Start.sqrtPriceX96,\\n                tick: slot0Start.tick,\\n                feeGrowthGlobalX128: zeroForOne ? feeGrowthGlobal0X128 : feeGrowthGlobal1X128,\\n                protocolFee: 0,\\n                liquidity: cache.liquidityStart\\n            });\\n\\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\\n            StepComputations memory step;\\n\\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\\n\\n            (step.tickNext, step.initialized) = tickBitmap.nextInitializedTickWithinOneWord(\\n                state.tick,\\n                tickSpacing,\\n                zeroForOne\\n            );\\n\\n            // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\\n            if (step.tickNext < TickMath.MIN_TICK) {\\n                step.tickNext = TickMath.MIN_TICK;\\n            } else if (step.tickNext > TickMath.MAX_TICK) {\\n                step.tickNext = TickMath.MAX_TICK;\\n            }\\n\\n            // get the price for the next tick\\n            step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);\\n\\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\\n                state.sqrtPriceX96,\\n                (zeroForOne ? step.sqrtPriceNextX96 < sqrtPriceLimitX96 : step.sqrtPriceNextX96 > sqrtPriceLimitX96)\\n                    ? sqrtPriceLimitX96\\n                    : step.sqrtPriceNextX96,\\n                state.liquidity,\\n                state.amountSpecifiedRemaining,\\n                fee\\n            );\\n\\n            if (exactInput) {\\n                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\\n                state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());\\n            } else {\\n                state.amountSpecifiedRemaining += step.amountOut.toInt256();\\n                state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());\\n            }\\n\\n            // if the protocol fee is on, calculate how much is owed, decrement feeAmount, and increment protocolFee\\n            if (cache.feeProtocol > 0) {\\n                uint256 delta = step.feeAmount / cache.feeProtocol;\\n                step.feeAmount -= delta;\\n                state.protocolFee += uint128(delta);\\n            }\\n\\n            // update global fee tracker\\n            if (state.liquidity > 0)\\n                state.feeGrowthGlobalX128 += FullMath.mulDiv(step.feeAmount, FixedPoint128.Q128, state.liquidity);\\n\\n            // shift tick if we reached the next price\\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\\n                // if the tick is initialized, run the tick transition\\n                if (step.initialized) {\\n                    // check for the placeholder value, which we replace with the actual value the first time the swap\\n                    // crosses an initialized tick\\n                    if (!cache.computedLatestObservation) {\\n                        (cache.tickCumulative, cache.secondsPerLiquidityCumulativeX128) = observations.observeSingle(\\n                            cache.blockTimestamp,\\n                            0,\\n                            slot0Start.tick,\\n                            slot0Start.observationIndex,\\n                            cache.liquidityStart,\\n                            slot0Start.observationCardinality\\n                        );\\n                        cache.computedLatestObservation = true;\\n                    }\\n                    int128 liquidityNet =\\n                        ticks.cross(\\n                            step.tickNext,\\n                            (zeroForOne ? state.feeGrowthGlobalX128 : feeGrowthGlobal0X128),\\n                            (zeroForOne ? feeGrowthGlobal1X128 : state.feeGrowthGlobalX128),\\n                            cache.secondsPerLiquidityCumulativeX128,\\n                            cache.tickCumulative,\\n                            cache.blockTimestamp\\n                        );\\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\\n                    // safe because liquidityNet cannot be type(int128).min\\n                    if (zeroForOne) liquidityNet = -liquidityNet;\\n\\n                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\\n                }\\n\\n                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\\n            }\\n        }\\n\\n        // update tick and write an oracle entry if the tick change\\n        if (state.tick != slot0Start.tick) {\\n            (uint16 observationIndex, uint16 observationCardinality) =\\n                observations.write(\\n                    slot0Start.observationIndex,\\n                    cache.blockTimestamp,\\n                    slot0Start.tick,\\n                    cache.liquidityStart,\\n                    slot0Start.observationCardinality,\\n                    slot0Start.observationCardinalityNext\\n                );\\n            (slot0.sqrtPriceX96, slot0.tick, slot0.observationIndex, slot0.observationCardinality) = (\\n                state.sqrtPriceX96,\\n                state.tick,\\n                observationIndex,\\n                observationCardinality\\n            );\\n        } else {\\n            // otherwise just update the price\\n            slot0.sqrtPriceX96 = state.sqrtPriceX96;\\n        }\\n\\n        // update liquidity if it changed\\n        if (cache.liquidityStart != state.liquidity) liquidity = state.liquidity;\\n\\n        // update fee growth global and, if necessary, protocol fees\\n        // overflow is acceptable, protocol has to withdraw before it hits type(uint128).max fees\\n        if (zeroForOne) {\\n            feeGrowthGlobal0X128 = state.feeGrowthGlobalX128;\\n            if (state.protocolFee > 0) protocolFees.token0 += state.protocolFee;\\n        } else {\\n            feeGrowthGlobal1X128 = state.feeGrowthGlobalX128;\\n            if (state.protocolFee > 0) protocolFees.token1 += state.protocolFee;\\n        }\\n\\n        (amount0, amount1) = zeroForOne == exactInput\\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\\n\\n        // do the transfers and collect payment\\n        if (zeroForOne) {\\n            if (amount1 < 0) TransferHelper.safeTransfer(token1, recipient, uint256(-amount1));\\n\\n            uint256 balance0Before = balance0();\\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);\\n            require(balance0Before.add(uint256(amount0)) <= balance0(), 'IIA');\\n        } else {\\n            if (amount0 < 0) TransferHelper.safeTransfer(token0, recipient, uint256(-amount0));\\n\\n            uint256 balance1Before = balance1();\\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);\\n            require(balance1Before.add(uint256(amount1)) <= balance1(), 'IIA');\\n        }\\n\\n        emit Swap(msg.sender, recipient, amount0, amount1, state.sqrtPriceX96, state.liquidity, state.tick);\\n        slot0.unlocked = true;\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external override lock noDelegateCall {\\n        uint128 _liquidity = liquidity;\\n        require(_liquidity > 0, 'L');\\n\\n        uint256 fee0 = FullMath.mulDivRoundingUp(amount0, fee, 1e6);\\n        uint256 fee1 = FullMath.mulDivRoundingUp(amount1, fee, 1e6);\\n        uint256 balance0Before = balance0();\\n        uint256 balance1Before = balance1();\\n\\n        if (amount0 > 0) TransferHelper.safeTransfer(token0, recipient, amount0);\\n        if (amount1 > 0) TransferHelper.safeTransfer(token1, recipient, amount1);\\n\\n        IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0, fee1, data);\\n\\n        uint256 balance0After = balance0();\\n        uint256 balance1After = balance1();\\n\\n        require(balance0Before.add(fee0) <= balance0After, 'F0');\\n        require(balance1Before.add(fee1) <= balance1After, 'F1');\\n\\n        // sub is safe because we know balanceAfter is gt balanceBefore by at least fee\\n        uint256 paid0 = balance0After - balance0Before;\\n        uint256 paid1 = balance1After - balance1Before;\\n\\n        if (paid0 > 0) {\\n            uint8 feeProtocol0 = slot0.feeProtocol % 16;\\n            uint256 fees0 = feeProtocol0 == 0 ? 0 : paid0 / feeProtocol0;\\n            if (uint128(fees0) > 0) protocolFees.token0 += uint128(fees0);\\n            feeGrowthGlobal0X128 += FullMath.mulDiv(paid0 - fees0, FixedPoint128.Q128, _liquidity);\\n        }\\n        if (paid1 > 0) {\\n            uint8 feeProtocol1 = slot0.feeProtocol >> 4;\\n            uint256 fees1 = feeProtocol1 == 0 ? 0 : paid1 / feeProtocol1;\\n            if (uint128(fees1) > 0) protocolFees.token1 += uint128(fees1);\\n            feeGrowthGlobal1X128 += FullMath.mulDiv(paid1 - fees1, FixedPoint128.Q128, _liquidity);\\n        }\\n\\n        emit Flash(msg.sender, recipient, amount0, amount1, paid0, paid1);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolOwnerActions\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external override lock onlyFactoryOwner {\\n        require(\\n            (feeProtocol0 == 0 || (feeProtocol0 >= 4 && feeProtocol0 <= 10)) &&\\n                (feeProtocol1 == 0 || (feeProtocol1 >= 4 && feeProtocol1 <= 10))\\n        );\\n        uint8 feeProtocolOld = slot0.feeProtocol;\\n        slot0.feeProtocol = feeProtocol0 + (feeProtocol1 << 4);\\n        emit SetFeeProtocol(feeProtocolOld % 16, feeProtocolOld >> 4, feeProtocol0, feeProtocol1);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolOwnerActions\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external override lock onlyFactoryOwner returns (uint128 amount0, uint128 amount1) {\\n        amount0 = amount0Requested > protocolFees.token0 ? protocolFees.token0 : amount0Requested;\\n        amount1 = amount1Requested > protocolFees.token1 ? protocolFees.token1 : amount1Requested;\\n\\n        if (amount0 > 0) {\\n            if (amount0 == protocolFees.token0) amount0--; // ensure that the slot is not cleared, for gas savings\\n            protocolFees.token0 -= amount0;\\n            TransferHelper.safeTransfer(token0, recipient, amount0);\\n        }\\n        if (amount1 > 0) {\\n            if (amount1 == protocolFees.token1) amount1--; // ensure that the slot is not cleared, for gas savings\\n            protocolFees.token1 -= amount1;\\n            TransferHelper.safeTransfer(token1, recipient, amount1);\\n        }\\n\\n        emit CollectProtocol(msg.sender, recipient, amount0, amount1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\"\r\n    },\r\n    \"contracts/NoDelegateCall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.7.6;\\n\\n/// @title Prevents delegatecall to a contract\\n/// @notice Base contract that provides a modifier for preventing delegatecall to methods in a child contract\\nabstract contract NoDelegateCall {\\n    /// @dev The original address of this contract\\n    address private immutable original;\\n\\n    constructor() {\\n        // Immutables are computed in the init code of the contract, and then inlined into the deployed bytecode.\\n        // In other words, this variable won't change when it's checked at runtime.\\n        original = address(this);\\n    }\\n\\n    /// @dev Private method is used instead of inlining into modifier because modifiers are copied into each method,\\n    ///     and the use of immutable means the address bytes are copied in every place the modifier is used.\\n    function checkNotDelegateCall() private view {\\n        require(address(this) == original);\\n    }\\n\\n    /// @notice Prevents delegatecall into the modified method\\n    modifier noDelegateCall() {\\n        checkNotDelegateCall();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LowGasSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Tick.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0 <0.8.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './TickMath.sol';\\nimport './LiquidityMath.sol';\\n\\n/// @title Tick\\n/// @notice Contains functions for managing tick processes and relevant calculations\\nlibrary Tick {\\n    using LowGasSafeMath for int256;\\n    using SafeCast for int256;\\n\\n    // info stored for each initialized individual tick\\n    struct Info {\\n        // the total position liquidity that references this tick\\n        uint128 liquidityGross;\\n        // amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),\\n        int128 liquidityNet;\\n        // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\\n        uint256 feeGrowthOutside0X128;\\n        uint256 feeGrowthOutside1X128;\\n        // the cumulative tick value on the other side of the tick\\n        int56 tickCumulativeOutside;\\n        // the seconds per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\\n        uint160 secondsPerLiquidityOutsideX128;\\n        // the seconds spent on the other side of the tick (relative to the current tick)\\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\\n        uint32 secondsOutside;\\n        // true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0\\n        // these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks\\n        bool initialized;\\n    }\\n\\n    /// @notice Derives max liquidity per tick from given tick spacing\\n    /// @dev Executed within the pool constructor\\n    /// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\\n    ///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// @return The max liquidity per tick\\n    function tickSpacingToMaxLiquidityPerTick(int24 tickSpacing) internal pure returns (uint128) {\\n        int24 minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing;\\n        int24 maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing;\\n        uint24 numTicks = uint24((maxTick - minTick) / tickSpacing) + 1;\\n        return type(uint128).max / numTicks;\\n    }\\n\\n    /// @notice Retrieves fee growth data\\n    /// @param self The mapping containing all tick information for initialized ticks\\n    /// @param tickLower The lower tick boundary of the position\\n    /// @param tickUpper The upper tick boundary of the position\\n    /// @param tickCurrent The current tick\\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\\n    /// @return feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\\n    /// @return feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\\n    function getFeeGrowthInside(\\n        mapping(int24 => Tick.Info) storage self,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int24 tickCurrent,\\n        uint256 feeGrowthGlobal0X128,\\n        uint256 feeGrowthGlobal1X128\\n    ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {\\n        Info storage lower = self[tickLower];\\n        Info storage upper = self[tickUpper];\\n\\n        // calculate fee growth below\\n        uint256 feeGrowthBelow0X128;\\n        uint256 feeGrowthBelow1X128;\\n        if (tickCurrent >= tickLower) {\\n            feeGrowthBelow0X128 = lower.feeGrowthOutside0X128;\\n            feeGrowthBelow1X128 = lower.feeGrowthOutside1X128;\\n        } else {\\n            feeGrowthBelow0X128 = feeGrowthGlobal0X128 - lower.feeGrowthOutside0X128;\\n            feeGrowthBelow1X128 = feeGrowthGlobal1X128 - lower.feeGrowthOutside1X128;\\n        }\\n\\n        // calculate fee growth above\\n        uint256 feeGrowthAbove0X128;\\n        uint256 feeGrowthAbove1X128;\\n        if (tickCurrent < tickUpper) {\\n            feeGrowthAbove0X128 = upper.feeGrowthOutside0X128;\\n            feeGrowthAbove1X128 = upper.feeGrowthOutside1X128;\\n        } else {\\n            feeGrowthAbove0X128 = feeGrowthGlobal0X128 - upper.feeGrowthOutside0X128;\\n            feeGrowthAbove1X128 = feeGrowthGlobal1X128 - upper.feeGrowthOutside1X128;\\n        }\\n\\n        feeGrowthInside0X128 = feeGrowthGlobal0X128 - feeGrowthBelow0X128 - feeGrowthAbove0X128;\\n        feeGrowthInside1X128 = feeGrowthGlobal1X128 - feeGrowthBelow1X128 - feeGrowthAbove1X128;\\n    }\\n\\n    /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\\n    /// @param self The mapping containing all tick information for initialized ticks\\n    /// @param tick The tick that will be updated\\n    /// @param tickCurrent The current tick\\n    /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\\n    /// @param secondsPerLiquidityCumulativeX128 The all-time seconds per max(1, liquidity) of the pool\\n    /// @param tickCumulative The tick * time elapsed since the pool was first initialized\\n    /// @param time The current block timestamp cast to a uint32\\n    /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\\n    /// @param maxLiquidity The maximum liquidity allocation for a single tick\\n    /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\\n    function update(\\n        mapping(int24 => Tick.Info) storage self,\\n        int24 tick,\\n        int24 tickCurrent,\\n        int128 liquidityDelta,\\n        uint256 feeGrowthGlobal0X128,\\n        uint256 feeGrowthGlobal1X128,\\n        uint160 secondsPerLiquidityCumulativeX128,\\n        int56 tickCumulative,\\n        uint32 time,\\n        bool upper,\\n        uint128 maxLiquidity\\n    ) internal returns (bool flipped) {\\n        Tick.Info storage info = self[tick];\\n\\n        uint128 liquidityGrossBefore = info.liquidityGross;\\n        uint128 liquidityGrossAfter = LiquidityMath.addDelta(liquidityGrossBefore, liquidityDelta);\\n\\n        require(liquidityGrossAfter <= maxLiquidity, 'LO');\\n\\n        flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\\n\\n        if (liquidityGrossBefore == 0) {\\n            // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\\n            if (tick <= tickCurrent) {\\n                info.feeGrowthOutside0X128 = feeGrowthGlobal0X128;\\n                info.feeGrowthOutside1X128 = feeGrowthGlobal1X128;\\n                info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128;\\n                info.tickCumulativeOutside = tickCumulative;\\n                info.secondsOutside = time;\\n            }\\n            info.initialized = true;\\n        }\\n\\n        info.liquidityGross = liquidityGrossAfter;\\n\\n        // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\\n        info.liquidityNet = upper\\n            ? int256(info.liquidityNet).sub(liquidityDelta).toInt128()\\n            : int256(info.liquidityNet).add(liquidityDelta).toInt128();\\n    }\\n\\n    /// @notice Clears tick data\\n    /// @param self The mapping containing all initialized tick information for initialized ticks\\n    /// @param tick The tick that will be cleared\\n    function clear(mapping(int24 => Tick.Info) storage self, int24 tick) internal {\\n        delete self[tick];\\n    }\\n\\n    /// @notice Transitions to next tick as needed by price movement\\n    /// @param self The mapping containing all tick information for initialized ticks\\n    /// @param tick The destination tick of the transition\\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\\n    /// @param secondsPerLiquidityCumulativeX128 The current seconds per liquidity\\n    /// @param tickCumulative The tick * time elapsed since the pool was first initialized\\n    /// @param time The current block.timestamp\\n    /// @return liquidityNet The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)\\n    function cross(\\n        mapping(int24 => Tick.Info) storage self,\\n        int24 tick,\\n        uint256 feeGrowthGlobal0X128,\\n        uint256 feeGrowthGlobal1X128,\\n        uint160 secondsPerLiquidityCumulativeX128,\\n        int56 tickCumulative,\\n        uint32 time\\n    ) internal returns (int128 liquidityNet) {\\n        Tick.Info storage info = self[tick];\\n        info.feeGrowthOutside0X128 = feeGrowthGlobal0X128 - info.feeGrowthOutside0X128;\\n        info.feeGrowthOutside1X128 = feeGrowthGlobal1X128 - info.feeGrowthOutside1X128;\\n        info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128 - info.secondsPerLiquidityOutsideX128;\\n        info.tickCumulativeOutside = tickCumulative - info.tickCumulativeOutside;\\n        info.secondsOutside = time - info.secondsOutside;\\n        liquidityNet = info.liquidityNet;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TickBitmap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './BitMath.sol';\\n\\n/// @title Packed tick initialized state library\\n/// @notice Stores a packed mapping of tick index to its initialized state\\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\nlibrary TickBitmap {\\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\\n    /// @param tick The tick for which to compute the position\\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\\n    /// @return bitPos The bit position in the word where the flag is stored\\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\\n        wordPos = int16(tick >> 8);\\n        bitPos = uint8(tick % 256);\\n    }\\n\\n    /// @notice Flips the initialized state for a given tick from false to true, or vice versa\\n    /// @param self The mapping in which to flip the tick\\n    /// @param tick The tick to flip\\n    /// @param tickSpacing The spacing between usable ticks\\n    function flipTick(\\n        mapping(int16 => uint256) storage self,\\n        int24 tick,\\n        int24 tickSpacing\\n    ) internal {\\n        require(tick % tickSpacing == 0); // ensure that the tick is spaced\\n        (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);\\n        uint256 mask = 1 << bitPos;\\n        self[wordPos] ^= mask;\\n    }\\n\\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\n    /// to the left (less than or equal to) or right (greater than) of the given tick\\n    /// @param self The mapping in which to compute the next initialized tick\\n    /// @param tick The starting tick\\n    /// @param tickSpacing The spacing between usable ticks\\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\n    function nextInitializedTickWithinOneWord(\\n        mapping(int16 => uint256) storage self,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool lte\\n    ) internal view returns (int24 next, bool initialized) {\\n        int24 compressed = tick / tickSpacing;\\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n        if (lte) {\\n            (int16 wordPos, uint8 bitPos) = position(compressed);\\n            // all the 1s at or to the right of the current bitPos\\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n            uint256 masked = self[wordPos] & mask;\\n\\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\\n                : (compressed - int24(bitPos)) * tickSpacing;\\n        } else {\\n            // start from the word of the next tick, since the current tick state doesn't matter\\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\\n            // all the 1s at or to the left of the bitPos\\n            uint256 mask = ~((1 << bitPos) - 1);\\n            uint256 masked = self[wordPos] & mask;\\n\\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Position.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0 <0.8.0;\\n\\nimport './FullMath.sol';\\nimport './FixedPoint128.sol';\\nimport './LiquidityMath.sol';\\n\\n/// @title Position\\n/// @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\\n/// @dev Positions store additional state for tracking fees owed to the position\\nlibrary Position {\\n    // info stored for each user's position\\n    struct Info {\\n        // the amount of liquidity owned by this position\\n        uint128 liquidity;\\n        // fee growth per unit of liquidity as of the last update to liquidity or fees owed\\n        uint256 feeGrowthInside0LastX128;\\n        uint256 feeGrowthInside1LastX128;\\n        // the fees owed to the position owner in token0/token1\\n        uint128 tokensOwed0;\\n        uint128 tokensOwed1;\\n    }\\n\\n    /// @notice Returns the Info struct of a position, given an owner and position boundaries\\n    /// @param self The mapping containing all user positions\\n    /// @param owner The address of the position owner\\n    /// @param tickLower The lower tick boundary of the position\\n    /// @param tickUpper The upper tick boundary of the position\\n    /// @return position The position info struct of the given owners' position\\n    function get(\\n        mapping(bytes32 => Info) storage self,\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[keccak256(abi.encodePacked(owner, tickLower, tickUpper))];\\n    }\\n\\n    /// @notice Credits accumulated fees to a user's position\\n    /// @param self The individual position to update\\n    /// @param liquidityDelta The change in pool liquidity as a result of the position update\\n    /// @param feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\\n    /// @param feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\\n    function update(\\n        Info storage self,\\n        int128 liquidityDelta,\\n        uint256 feeGrowthInside0X128,\\n        uint256 feeGrowthInside1X128\\n    ) internal {\\n        Info memory _self = self;\\n\\n        uint128 liquidityNext;\\n        if (liquidityDelta == 0) {\\n            require(_self.liquidity > 0, 'NP'); // disallow pokes for 0 liquidity positions\\n            liquidityNext = _self.liquidity;\\n        } else {\\n            liquidityNext = LiquidityMath.addDelta(_self.liquidity, liquidityDelta);\\n        }\\n\\n        // calculate accumulated fees\\n        uint128 tokensOwed0 =\\n            uint128(\\n                FullMath.mulDiv(\\n                    feeGrowthInside0X128 - _self.feeGrowthInside0LastX128,\\n                    _self.liquidity,\\n                    FixedPoint128.Q128\\n                )\\n            );\\n        uint128 tokensOwed1 =\\n            uint128(\\n                FullMath.mulDiv(\\n                    feeGrowthInside1X128 - _self.feeGrowthInside1LastX128,\\n                    _self.liquidity,\\n                    FixedPoint128.Q128\\n                )\\n            );\\n\\n        // update the position\\n        if (liquidityDelta != 0) self.liquidity = liquidityNext;\\n        self.feeGrowthInside0LastX128 = feeGrowthInside0X128;\\n        self.feeGrowthInside1LastX128 = feeGrowthInside1X128;\\n        if (tokensOwed0 > 0 || tokensOwed1 > 0) {\\n            // overflow is acceptable, have to withdraw before you hit type(uint128).max fees\\n            self.tokensOwed0 += tokensOwed0;\\n            self.tokensOwed1 += tokensOwed1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Oracle\\n/// @notice Provides price and liquidity data useful for a wide variety of system designs\\n/// @dev Instances of stored oracle data, \\\"observations\\\", are collected in the oracle array\\n/// Every pool is initialized with an oracle array length of 1. Anyone can pay the SSTOREs to increase the\\n/// maximum length of the oracle array. New slots will be added when the array is fully populated.\\n/// Observations are overwritten when the full length of the oracle array is populated.\\n/// The most recent observation is available, independent of the length of the oracle array, by passing 0 to observe()\\nlibrary Oracle {\\n    struct Observation {\\n        // the block timestamp of the observation\\n        uint32 blockTimestamp;\\n        // the tick accumulator, i.e. tick * time elapsed since the pool was first initialized\\n        int56 tickCumulative;\\n        // the seconds per liquidity, i.e. seconds elapsed / max(1, liquidity) since the pool was first initialized\\n        uint160 secondsPerLiquidityCumulativeX128;\\n        // whether or not the observation is initialized\\n        bool initialized;\\n    }\\n\\n    /// @notice Transforms a previous observation into a new observation, given the passage of time and the current tick and liquidity values\\n    /// @dev blockTimestamp _must_ be chronologically equal to or greater than last.blockTimestamp, safe for 0 or 1 overflows\\n    /// @param last The specified observation to be transformed\\n    /// @param blockTimestamp The timestamp of the new observation\\n    /// @param tick The active tick at the time of the new observation\\n    /// @param liquidity The total in-range liquidity at the time of the new observation\\n    /// @return Observation The newly populated observation\\n    function transform(\\n        Observation memory last,\\n        uint32 blockTimestamp,\\n        int24 tick,\\n        uint128 liquidity\\n    ) private pure returns (Observation memory) {\\n        uint32 delta = blockTimestamp - last.blockTimestamp;\\n        return\\n            Observation({\\n                blockTimestamp: blockTimestamp,\\n                tickCumulative: last.tickCumulative + int56(tick) * delta,\\n                secondsPerLiquidityCumulativeX128: last.secondsPerLiquidityCumulativeX128 +\\n                    ((uint160(delta) << 128) / (liquidity > 0 ? liquidity : 1)),\\n                initialized: true\\n            });\\n    }\\n\\n    /// @notice Initialize the oracle array by writing the first slot. Called once for the lifecycle of the observations array\\n    /// @param self The stored oracle array\\n    /// @param time The time of the oracle initialization, via block.timestamp truncated to uint32\\n    /// @return cardinality The number of populated elements in the oracle array\\n    /// @return cardinalityNext The new length of the oracle array, independent of population\\n    function initialize(Observation[65535] storage self, uint32 time)\\n        internal\\n        returns (uint16 cardinality, uint16 cardinalityNext)\\n    {\\n        self[0] = Observation({\\n            blockTimestamp: time,\\n            tickCumulative: 0,\\n            secondsPerLiquidityCumulativeX128: 0,\\n            initialized: true\\n        });\\n        return (1, 1);\\n    }\\n\\n    /// @notice Writes an oracle observation to the array\\n    /// @dev Writable at most once per block. Index represents the most recently written element. cardinality and index must be tracked externally.\\n    /// If the index is at the end of the allowable array length (according to cardinality), and the next cardinality\\n    /// is greater than the current one, cardinality may be increased. This restriction is created to preserve ordering.\\n    /// @param self The stored oracle array\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param blockTimestamp The timestamp of the new observation\\n    /// @param tick The active tick at the time of the new observation\\n    /// @param liquidity The total in-range liquidity at the time of the new observation\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @param cardinalityNext The new length of the oracle array, independent of population\\n    /// @return indexUpdated The new index of the most recently written element in the oracle array\\n    /// @return cardinalityUpdated The new cardinality of the oracle array\\n    function write(\\n        Observation[65535] storage self,\\n        uint16 index,\\n        uint32 blockTimestamp,\\n        int24 tick,\\n        uint128 liquidity,\\n        uint16 cardinality,\\n        uint16 cardinalityNext\\n    ) internal returns (uint16 indexUpdated, uint16 cardinalityUpdated) {\\n        Observation memory last = self[index];\\n\\n        // early return if we've already written an observation this block\\n        if (last.blockTimestamp == blockTimestamp) return (index, cardinality);\\n\\n        // if the conditions are right, we can bump the cardinality\\n        if (cardinalityNext > cardinality && index == (cardinality - 1)) {\\n            cardinalityUpdated = cardinalityNext;\\n        } else {\\n            cardinalityUpdated = cardinality;\\n        }\\n\\n        indexUpdated = (index + 1) % cardinalityUpdated;\\n        self[indexUpdated] = transform(last, blockTimestamp, tick, liquidity);\\n    }\\n\\n    /// @notice Prepares the oracle array to store up to `next` observations\\n    /// @param self The stored oracle array\\n    /// @param current The current next cardinality of the oracle array\\n    /// @param next The proposed next cardinality which will be populated in the oracle array\\n    /// @return next The next cardinality which will be populated in the oracle array\\n    function grow(\\n        Observation[65535] storage self,\\n        uint16 current,\\n        uint16 next\\n    ) internal returns (uint16) {\\n        require(current > 0, 'I');\\n        // no-op if the passed next value isn't greater than the current next value\\n        if (next <= current) return current;\\n        // store in each slot to prevent fresh SSTOREs in swaps\\n        // this data will not be used because the initialized boolean is still false\\n        for (uint16 i = current; i < next; i++) self[i].blockTimestamp = 1;\\n        return next;\\n    }\\n\\n    /// @notice comparator for 32-bit timestamps\\n    /// @dev safe for 0 or 1 overflows, a and b _must_ be chronologically before or equal to time\\n    /// @param time A timestamp truncated to 32 bits\\n    /// @param a A comparison timestamp from which to determine the relative position of `time`\\n    /// @param b From which to determine the relative position of `time`\\n    /// @return bool Whether `a` is chronologically <= `b`\\n    function lte(\\n        uint32 time,\\n        uint32 a,\\n        uint32 b\\n    ) private pure returns (bool) {\\n        // if there hasn't been overflow, no need to adjust\\n        if (a <= time && b <= time) return a <= b;\\n\\n        uint256 aAdjusted = a > time ? a : a + 2**32;\\n        uint256 bAdjusted = b > time ? b : b + 2**32;\\n\\n        return aAdjusted <= bAdjusted;\\n    }\\n\\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a target, i.e. where [beforeOrAt, atOrAfter] is satisfied.\\n    /// The result may be the same observation, or adjacent observations.\\n    /// @dev The answer must be contained in the array, used when the target is located within the stored observation\\n    /// boundaries: older than the most recent observation and younger, or the same age as, the oldest observation\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param target The timestamp at which the reserved observation should be for\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return beforeOrAt The observation recorded before, or at, the target\\n    /// @return atOrAfter The observation recorded at, or after, the target\\n    function binarySearch(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 target,\\n        uint16 index,\\n        uint16 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        uint256 l = (index + 1) % cardinality; // oldest observation\\n        uint256 r = l + cardinality - 1; // newest observation\\n        uint256 i;\\n        while (true) {\\n            i = (l + r) / 2;\\n\\n            beforeOrAt = self[i % cardinality];\\n\\n            // we've landed on an uninitialized tick, keep searching higher (more recently)\\n            if (!beforeOrAt.initialized) {\\n                l = i + 1;\\n                continue;\\n            }\\n\\n            atOrAfter = self[(i + 1) % cardinality];\\n\\n            bool targetAtOrAfter = lte(time, beforeOrAt.blockTimestamp, target);\\n\\n            // check if we've found the answer!\\n            if (targetAtOrAfter && lte(time, target, atOrAfter.blockTimestamp)) break;\\n\\n            if (!targetAtOrAfter) r = i - 1;\\n            else l = i + 1;\\n        }\\n    }\\n\\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a given target, i.e. where [beforeOrAt, atOrAfter] is satisfied\\n    /// @dev Assumes there is at least 1 initialized observation.\\n    /// Used by observeSingle() to compute the counterfactual accumulator values as of a given block timestamp.\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param target The timestamp at which the reserved observation should be for\\n    /// @param tick The active tick at the time of the returned or simulated observation\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The total pool liquidity at the time of the call\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return beforeOrAt The observation which occurred at, or before, the given timestamp\\n    /// @return atOrAfter The observation which occurred at, or after, the given timestamp\\n    function getSurroundingObservations(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 target,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        // optimistically set before to the newest observation\\n        beforeOrAt = self[index];\\n\\n        // if the target is chronologically at or after the newest observation, we can early return\\n        if (lte(time, beforeOrAt.blockTimestamp, target)) {\\n            if (beforeOrAt.blockTimestamp == target) {\\n                // if newest observation equals target, we're in the same block, so we can ignore atOrAfter\\n                return (beforeOrAt, atOrAfter);\\n            } else {\\n                // otherwise, we need to transform\\n                return (beforeOrAt, transform(beforeOrAt, target, tick, liquidity));\\n            }\\n        }\\n\\n        // now, set before to the oldest observation\\n        beforeOrAt = self[(index + 1) % cardinality];\\n        if (!beforeOrAt.initialized) beforeOrAt = self[0];\\n\\n        // ensure that the target is chronologically at or after the oldest observation\\n        require(lte(time, beforeOrAt.blockTimestamp, target), 'OLD');\\n\\n        // if we've reached this point, we have to binary search\\n        return binarySearch(self, time, target, index, cardinality);\\n    }\\n\\n    /// @dev Reverts if an observation at or before the desired observation timestamp does not exist.\\n    /// 0 may be passed as `secondsAgo' to return the current cumulative values.\\n    /// If called with a timestamp falling between two observations, returns the counterfactual accumulator values\\n    /// at exactly the timestamp between the two observations.\\n    /// @param self The stored oracle array\\n    /// @param time The current block timestamp\\n    /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an observation\\n    /// @param tick The current tick\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The current in-range pool liquidity\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return tickCumulative The tick * time elapsed since the pool was first initialized, as of `secondsAgo`\\n    /// @return secondsPerLiquidityCumulativeX128 The time elapsed / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\\n    function observeSingle(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 secondsAgo,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) internal view returns (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) {\\n        if (secondsAgo == 0) {\\n            Observation memory last = self[index];\\n            if (last.blockTimestamp != time) last = transform(last, time, tick, liquidity);\\n            return (last.tickCumulative, last.secondsPerLiquidityCumulativeX128);\\n        }\\n\\n        uint32 target = time - secondsAgo;\\n\\n        (Observation memory beforeOrAt, Observation memory atOrAfter) =\\n            getSurroundingObservations(self, time, target, tick, index, liquidity, cardinality);\\n\\n        if (target == beforeOrAt.blockTimestamp) {\\n            // we're at the left boundary\\n            return (beforeOrAt.tickCumulative, beforeOrAt.secondsPerLiquidityCumulativeX128);\\n        } else if (target == atOrAfter.blockTimestamp) {\\n            // we're at the right boundary\\n            return (atOrAfter.tickCumulative, atOrAfter.secondsPerLiquidityCumulativeX128);\\n        } else {\\n            // we're in the middle\\n            uint32 observationTimeDelta = atOrAfter.blockTimestamp - beforeOrAt.blockTimestamp;\\n            uint32 targetDelta = target - beforeOrAt.blockTimestamp;\\n            return (\\n                beforeOrAt.tickCumulative +\\n                    ((atOrAfter.tickCumulative - beforeOrAt.tickCumulative) / observationTimeDelta) *\\n                    targetDelta,\\n                beforeOrAt.secondsPerLiquidityCumulativeX128 +\\n                    uint160(\\n                        (uint256(\\n                            atOrAfter.secondsPerLiquidityCumulativeX128 - beforeOrAt.secondsPerLiquidityCumulativeX128\\n                        ) * targetDelta) / observationTimeDelta\\n                    )\\n            );\\n        }\\n    }\\n\\n    /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\\n    /// @dev Reverts if `secondsAgos` > oldest observation\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an observation\\n    /// @param tick The current tick\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The current in-range pool liquidity\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return tickCumulatives The tick * time elapsed since the pool was first initialized, as of each `secondsAgo`\\n    /// @return secondsPerLiquidityCumulativeX128s The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\\n    function observe(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32[] memory secondsAgos,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) internal view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) {\\n        require(cardinality > 0, 'I');\\n\\n        tickCumulatives = new int56[](secondsAgos.length);\\n        secondsPerLiquidityCumulativeX128s = new uint160[](secondsAgos.length);\\n        for (uint256 i = 0; i < secondsAgos.length; i++) {\\n            (tickCumulatives[i], secondsPerLiquidityCumulativeX128s[i]) = observeSingle(\\n                self,\\n                time,\\n                secondsAgos[i],\\n                tick,\\n                index,\\n                liquidity,\\n                cardinality\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FixedPoint128.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '../interfaces/IERC20Minimal.sol';\\n\\n/// @title TransferHelper\\n/// @notice Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Calls transfer on token contract, errors with TF if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20Minimal.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TF');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TickMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LiquidityMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SqrtPriceMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SwapMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './FullMath.sol';\\nimport './SqrtPriceMath.sol';\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint160 sqrtRatioNextX96,\\n            uint256 amountIn,\\n            uint256 amountOut,\\n            uint256 feeAmount\\n        )\\n    {\\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n        bool exactIn = amountRemaining >= 0;\\n\\n        if (exactIn) {\\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\\n            amountIn = zeroForOne\\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    amountRemainingLessFee,\\n                    zeroForOne\\n                );\\n        } else {\\n            amountOut = zeroForOne\\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    uint256(-amountRemaining),\\n                    zeroForOne\\n                );\\n        }\\n\\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n        // get the input/output amounts\\n        if (zeroForOne) {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\\n        } else {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\\n        }\\n\\n        // cap the output amount to not exceed the remaining output amount\\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n            amountOut = uint256(-amountRemaining);\\n        }\\n\\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n            // we didn't reach the target, so take the remainder of the maximum input as fee\\n            feeAmount = uint256(amountRemaining) - amountIn;\\n        } else {\\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3PoolDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title An interface for a contract that is capable of deploying Uniswap V3 Pools\\n/// @notice A contract that constructs a pool must implement this to pass arguments to the pool\\n/// @dev This is used to avoid having constructor arguments in the pool contract, which results in the init code hash\\n/// of the pool being constant allowing the CREATE2 address of the pool to be cheaply computed on-chain\\ninterface IUniswapV3PoolDeployer {\\n    /// @notice Get the parameters to be used in constructing the pool, set transiently during pool creation.\\n    /// @dev Called by the pool constructor to fetch the parameters of the pool\\n    /// Returns factory The factory address\\n    /// Returns token0 The first token of the pool by address sort order\\n    /// Returns token1 The second token of the pool by address sort order\\n    /// Returns fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// Returns tickSpacing The minimum number of ticks between initialized ticks\\n    function parameters()\\n        external\\n        view\\n        returns (\\n            address factory,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickSpacing\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Minimal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Minimal ERC20 interface for Uniswap\\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\\ninterface IERC20Minimal {\\n    /// @notice Returns the balance of a token\\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\n    /// @return The number of tokens held by the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\n    /// @param recipient The account that will receive the amount transferred\\n    /// @param amount The number of tokens to send from the sender to the recipient\\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Returns the current allowance given to a spender by an owner\\n    /// @param owner The account of the token owner\\n    /// @param spender The account of the token spender\\n    /// @return The current allowance granted by `owner` to `spender`\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\n    /// @param amount The amount of tokens allowed to be used by `spender`\\n    /// @return Returns true for a successful approval, false for unsuccessful\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\n    /// @param sender The account from which the transfer will be initiated\\n    /// @param recipient The recipient of the transfer\\n    /// @param amount The amount of the transfer\\n    /// @return Returns true for a successful transfer, false for unsuccessful\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\\n    /// @param value The amount of tokens that were transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\\n    /// @param owner The account that approved spending of its tokens\\n    /// @param spender The account for which the spending allowance was modified\\n    /// @param value The new allowance from the owner to the spender\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/callback/IUniswapV3MintCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#mint\\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\\ninterface IUniswapV3MintCallback {\\n    /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\\n    function uniswapV3MintCallback(\\n        uint256 amount0Owed,\\n        uint256 amount1Owed,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/callback/IUniswapV3FlashCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#flash\\n/// @notice Any contract that calls IUniswapV3PoolActions#flash must implement this interface\\ninterface IUniswapV3FlashCallback {\\n    /// @notice Called to `msg.sender` after transferring to the recipient from IUniswapV3Pool#flash.\\n    /// @dev In the implementation you must repay the pool the tokens sent by flash plus the computed fee amounts.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// @param fee0 The fee amount in token0 due to the pool by the end of the flash\\n    /// @param fee1 The fee amount in token1 due to the pool by the end of the flash\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#flash call\\n    function uniswapV3FlashCallback(\\n        uint256 fee0,\\n        uint256 fee1,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IUniswapV3PoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IUniswapV3PoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IUniswapV3PoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/BitMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/UnsafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FixedPoint96.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}",
      "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "contract_name": "UniswapV3Pool",
      "compiler_version": "v0.7.6+commit.7338295f",
      "optimization_used": "1",
      "runs": "800",
      "constructor_arguments": "",
      "evm_version": "Default",
      "library": "",
      "license_type": "",
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0x98e938899902217465f17cf0b76d12b3dca8ce1b": {
      "address": "0x98e938899902217465f17cf0b76d12b3dca8ce1b",
      "has_source_code": false,
      "source_code": null,
      "abi": "Contract source code not verified",
      "contract_name": "Unknown",
      "compiler_version": null,
      "optimization_used": null,
      "runs": null,
      "constructor_arguments": null,
      "evm_version": null,
      "library": null,
      "license_type": null,
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0xe5d6cf969c01bf8d6c46840ed784d7f209038d7a": {
      "address": "0xe5d6cf969c01bf8d6c46840ed784d7f209038d7a",
      "has_source_code": true,
      "source_code": "// File: contracts\\extensions\\interfaces\\ITokenizedUniswapV3Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ITokenizedUniswapV3Factory {\r\n\tevent NFTLPCreated(address indexed token0, address indexed token1, address NFTLP, uint);\r\n\tevent NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\tevent NewAdmin(address oldAdmin, address newAdmin);\r\n\tevent NewAcModule(address oldAcModule, address newAcModule);\r\n\t\r\n\tfunction admin() external view returns (address);\r\n\tfunction pendingAdmin() external view returns (address);\r\n\t\r\n\tfunction uniswapV3Factory() external view returns (address);\r\n\tfunction deployer() external view returns (address);\r\n\tfunction oracle() external view returns (address);\r\n\tfunction acModule() external view returns (address);\r\n\t\r\n\tfunction getNFTLP(address tokenA, address tokenB) external view returns (address);\r\n\tfunction allNFTLP(uint) external view returns (address);\r\n\tfunction allNFTLPLength() external view returns (uint);\r\n\t\r\n\tfunction createNFTLP(address tokenA, address tokenB) external returns (address NFTLP);\r\n\t\r\n\tfunction _setPendingAdmin(address newPendingAdmin) external;\r\n\tfunction _acceptAdmin() external;\r\n\tfunction _setAcModule(address newAcModule) external;\r\n}\r\n\r\n// File: contracts\\extensions\\interfaces\\ITokenizedUniswapV3Deployer.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ITokenizedUniswapV3Deployer {\r\n\tfunction deployNFTLP(address token0, address token1) external returns (address NFTLP);\r\n}\r\n\r\n// File: contracts\\interfaces\\INFTLP.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface INFTLP {\r\n\tstruct RealXY {\r\n\t\tuint256 realX;\r\n\t\tuint256 realY;\r\n\t}\r\n\t\r\n\tstruct RealXYs {\r\n\t\tRealXY lowestPrice;\r\n\t\tRealXY currentPrice;\r\n\t\tRealXY highestPrice;\r\n\t}\r\n\t\r\n\t// ERC-721\r\n\tfunction ownerOf(uint256 _tokenId) external view returns (address);\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\r\n\t\r\n\t// Global state\r\n\tfunction token0() external view returns (address);\r\n\tfunction token1() external view returns (address);\r\n\t\r\n\t// Position state\r\n\tfunction getPositionData(uint256 _tokenId, uint256 _safetyMarginSqrt) external returns (\r\n\t\tuint256 priceSqrtX96,\r\n\t\tRealXYs memory realXYs\r\n\t);\r\n\t\r\n\t// Interactions\r\n\t\r\n\tfunction split(uint256 tokenId, uint256 percentage) external returns (uint256 newTokenId);\r\n\tfunction join(uint256 tokenId, uint256 tokenToJoin) external;\r\n}\r\n\r\n// File: contracts\\extensions\\interfaces\\ITokenizedUniswapV3Position.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ITokenizedUniswapV3Position {\r\n\t\r\n\t// ERC-721\r\n\t\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\t\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\tfunction nonces(uint256 tokenId) external view returns (uint256);\r\n\t\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\r\n\tfunction approve(address to, uint256 tokenId) external;\r\n\tfunction setApprovalForAll(address operator, bool approved) external;\r\n\tfunction permit(address spender, uint tokenId, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\t\r\n\t// INFTLP\r\n\t\r\n\tfunction token0() external view returns (address);\r\n\tfunction token1() external view returns (address);\r\n\tfunction getPositionData(uint256 _tokenId, uint256 _safetyMarginSqrt) external returns (\r\n\t\tuint256 priceSqrtX96,\r\n\t\tINFTLP.RealXYs memory realXYs\r\n\t);\r\n\t\r\n\tfunction join(uint256 tokenId, uint256 tokenToJoin) external;\r\n\tfunction split(uint256 tokenId, uint256 percentage) external returns (uint256 newTokenId);\r\n\t\r\n\t// ITokenizedUniswapV3Position\r\n\t\r\n\tstruct Position {\r\n\t\tuint24 fee;\r\n\t\tint24 tickLower;\r\n\t\tint24 tickUpper;\r\n\t\tuint128 liquidity;\r\n\t\tuint256 feeGrowthInside0LastX128;\r\n\t\tuint256 feeGrowthInside1LastX128;\r\n\t\tuint256 unclaimedFees0;\t\r\n\t\tuint256 unclaimedFees1;\t\r\n\t}\r\n\t\r\n\tfunction factory() external view returns (address);\r\n\tfunction uniswapV3Factory() external view returns (address);\r\n\t\r\n\tfunction totalBalance(uint24 fee, int24 tickLower, int24 tickUpper) external view returns (uint256);\r\n\t\r\n\tfunction positions(uint256 tokenId) external view returns (\r\n\t\tuint24 fee,\r\n\t\tint24 tickLower,\r\n\t\tint24 tickUpper,\r\n\t\tuint128 liquidity,\r\n\t\tuint256 feeGrowthInside0LastX128,\r\n\t\tuint256 feeGrowthInside1LastX128,\r\n\t\tuint256 unclaimedFees0,\r\n\t\tuint256 unclaimedFees1\r\n\t);\r\n\tfunction positionsLength() external view returns (uint256);\r\n\t\r\n\tfunction getPool(uint24 fee) external view returns (address pool);\r\n\t\r\n\tfunction oraclePriceSqrtX96() external returns (uint256);\r\n\t\r\n\tevent MintPosition(uint256 indexed tokenId, uint24 fee, int24 tickLower, int24 tickUpper);\r\n\tevent UpdatePositionLiquidity(uint256 indexed tokenId, uint256 liquidity);\r\n\tevent UpdatePositionFeeGrowthInside(uint256 indexed tokenId, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128);\r\n\tevent UpdatePositionUnclaimedFees(uint256 indexed tokenId, uint256 unclaimedFees0, uint256 unclaimedFees1);\r\n\r\n\tfunction _initialize (\r\n\t\taddress _uniswapV3Factory, \r\n\t\taddress _oracle, \r\n\t\taddress _token0, \r\n\t\taddress _token1\r\n\t) external;\r\n\t\r\n\tfunction mint(address to, uint24 fee, int24 tickLower, int24 tickUpper) external  returns (uint256 newTokenId);\r\n\tfunction redeem(address to, uint256 tokenId) external  returns (uint256 amount0, uint256 amount1);\r\n\r\n}\r\n\r\n// File: contracts\\extensions\\TokenizedUniswapV3Factory.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract TokenizedUniswapV3Factory is ITokenizedUniswapV3Factory {\r\n\taddress public admin;\r\n\taddress public pendingAdmin;\r\n\t\r\n\taddress public uniswapV3Factory;\r\n\taddress public oracle;\r\n\taddress public acModule;\r\n\t\r\n\tITokenizedUniswapV3Deployer public deployer;\r\n\r\n\tmapping(address => mapping(address => address)) public getNFTLP;\r\n\taddress[] public allNFTLP;\r\n\r\n\tconstructor(address _admin, address _uniswapV3Factory, ITokenizedUniswapV3Deployer _deployer, address _oracle) public {\r\n\t\tadmin = _admin;\r\n\t\tuniswapV3Factory = _uniswapV3Factory;\r\n\t\tdeployer = _deployer;\r\n\t\toracle = _oracle;\r\n\t\temit NewAdmin(address(0), _admin);\r\n\t}\r\n\r\n\tfunction allNFTLPLength() external view returns (uint) {\r\n\t\treturn allNFTLP.length;\r\n\t}\r\n\r\n\tfunction createNFTLP(address tokenA, address tokenB) external returns (address NFTLP) {\r\n\t\trequire(tokenA != tokenB);\r\n\t\t(address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n\t\trequire(token0 != address(0));\r\n\t\trequire(getNFTLP[token0][token1] == address(0), \"TokenizedUniswapV3Factory: PAIR_EXISTS\");\r\n\t\tNFTLP = deployer.deployNFTLP(token0, token1);\r\n\t\tITokenizedUniswapV3Position(NFTLP)._initialize(uniswapV3Factory, oracle, token0, token1);\r\n\t\tgetNFTLP[token0][token1] = NFTLP;\r\n\t\tgetNFTLP[token1][token0] = NFTLP;\r\n\t\tallNFTLP.push(NFTLP);\r\n\t\temit NFTLPCreated(token0, token1, NFTLP, allNFTLP.length);\r\n\t}\r\n\t\r\n\t/***  acModule ***/\r\n\t\r\n\tfunction _setPendingAdmin(address newPendingAdmin) external {\r\n\t\trequire(msg.sender == admin, \"TokenizedUniswapV3Factory: UNAUTHORIZED\");\r\n\t\taddress oldPendingAdmin = pendingAdmin;\r\n\t\tpendingAdmin = newPendingAdmin;\r\n\t\temit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n\t}\r\n\r\n\tfunction _acceptAdmin() external {\r\n\t\trequire(msg.sender == pendingAdmin, \"TokenizedUniswapV3Factory: UNAUTHORIZED\");\r\n\t\taddress oldAdmin = admin;\r\n\t\taddress oldPendingAdmin = pendingAdmin;\r\n\t\tadmin = pendingAdmin;\r\n\t\tpendingAdmin = address(0);\r\n\t\temit NewAdmin(oldAdmin, admin);\r\n\t\temit NewPendingAdmin(oldPendingAdmin, address(0));\r\n\t}\r\n\t\r\n\tfunction _setAcModule(address newAcModule) external {\r\n\t\trequire(msg.sender == admin, \"TokenizedUniswapV3Factory: UNAUTHORIZED\");\r\n\t\taddress oldAcModule = acModule;\r\n\t\tacModule = newAcModule;\r\n\t\temit NewAcModule(oldAcModule, newAcModule);\r\n\t}\r\n}",
      "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV3Factory\",\"type\":\"address\"},{\"internalType\":\"contract ITokenizedUniswapV3Deployer\",\"name\":\"_deployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NFTLP\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NFTLPCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAcModule\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAcModule\",\"type\":\"address\"}],\"name\":\"NewAcModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAcModule\",\"type\":\"address\"}],\"name\":\"_setAcModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"acModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allNFTLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allNFTLPLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createNFTLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"NFTLP\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"contract ITokenizedUniswapV3Deployer\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getNFTLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapV3Factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "contract_name": "TokenizedUniswapV3Factory",
      "compiler_version": "v0.5.16+commit.9c3226ce",
      "optimization_used": "1",
      "runs": "999999",
      "constructor_arguments": "000000000000000000000000ee5ca68bae98c3e36bfbfeffb104f22e4ff34cf700000000000000000000000033128a8fc17869897dce68ed026d694621f6fdfd0000000000000000000000006c0255140afc054679dbf0bef6b6808fcf0aa4100000000000000000000000006799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "evm_version": "Default",
      "library": "",
      "license_type": "BSL 1.1",
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0x2ce6311ddae708829bc0784c967b7d77d19fd779": {
      "address": "0x2ce6311ddae708829bc0784c967b7d77d19fd779",
      "has_source_code": true,
      "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/v2/FiatTokenV2_2.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n *\\n * Copyright (c) 2023, Circle Internet Financial, LLC.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.6.12;\\n\\nimport { EIP712Domain } from \\\"./EIP712Domain.sol\\\"; // solhint-disable-line no-unused-import\\nimport { Blacklistable } from \\\"../v1/Blacklistable.sol\\\"; // solhint-disable-line no-unused-import\\nimport { FiatTokenV1 } from \\\"../v1/FiatTokenV1.sol\\\"; // solhint-disable-line no-unused-import\\nimport { FiatTokenV2 } from \\\"./FiatTokenV2.sol\\\"; // solhint-disable-line no-unused-import\\nimport { FiatTokenV2_1 } from \\\"./FiatTokenV2_1.sol\\\";\\nimport { EIP712 } from \\\"../util/EIP712.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\n/**\\n * @title FiatToken V2.2\\n * @notice ERC20 Token backed by fiat reserves, version 2.2\\n */\\ncontract FiatTokenV2_2 is FiatTokenV2_1 {\\n    /**\\n     * @notice Initialize v2.2\\n     * @param accountsToBlacklist   A list of accounts to migrate from the old blacklist\\n     * @param newSymbol             New token symbol\\n     * data structure to the new blacklist data structure.\\n     */\\n    function initializeV2_2(\\n        address[] calldata accountsToBlacklist,\\n        string calldata newSymbol\\n    ) external {\\n        // solhint-disable-next-line reason-string\\n        require(_initializedVersion == 2);\\n\\n        // Update fiat token symbol\\n        symbol = newSymbol;\\n\\n        // Add previously blacklisted accounts to the new blacklist data structure\\n        // and remove them from the old blacklist data structure.\\n        for (uint256 i = 0; i < accountsToBlacklist.length; i++) {\\n            require(\\n                _deprecatedBlacklisted[accountsToBlacklist[i]],\\n                \\\"FiatTokenV2_2: Blacklisting previously unblacklisted account!\\\"\\n            );\\n            _blacklist(accountsToBlacklist[i]);\\n            delete _deprecatedBlacklisted[accountsToBlacklist[i]];\\n        }\\n        _blacklist(address(this));\\n        delete _deprecatedBlacklisted[address(this)];\\n\\n        _initializedVersion = 3;\\n    }\\n\\n    /**\\n     * @dev Internal function to get the current chain id.\\n     * @return The current chain id.\\n     */\\n    function _chainId() internal virtual view returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n\\n    /**\\n     * @inheritdoc EIP712Domain\\n     */\\n    function _domainSeparator() internal override view returns (bytes32) {\\n        return EIP712.makeDomainSeparator(name, \\\"2\\\", _chainId());\\n    }\\n\\n    /**\\n     * @notice Update allowance with a signed permit\\n     * @dev EOA wallet signatures should be packed in the order of r, s, v.\\n     * @param owner       Token owner's address (Authorizer)\\n     * @param spender     Spender's address\\n     * @param value       Amount of allowance\\n     * @param deadline    The time at which the signature expires (unix time), or max uint256 value to signal no expiration\\n     * @param signature   Signature bytes signed by an EOA wallet or a contract wallet\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) external whenNotPaused {\\n        _permit(owner, spender, value, deadline, signature);\\n    }\\n\\n    /**\\n     * @notice Execute a transfer with a signed authorization\\n     * @dev EOA wallet signatures should be packed in the order of r, s, v.\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param signature     Signature bytes signed by an EOA wallet or a contract wallet\\n     */\\n    function transferWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        bytes memory signature\\n    ) external whenNotPaused notBlacklisted(from) notBlacklisted(to) {\\n        _transferWithAuthorization(\\n            from,\\n            to,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            signature\\n        );\\n    }\\n\\n    /**\\n     * @notice Receive a transfer with a signed authorization from the payer\\n     * @dev This has an additional check to ensure that the payee's address\\n     * matches the caller of this function to prevent front-running attacks.\\n     * EOA wallet signatures should be packed in the order of r, s, v.\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param signature     Signature bytes signed by an EOA wallet or a contract wallet\\n     */\\n    function receiveWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        bytes memory signature\\n    ) external whenNotPaused notBlacklisted(from) notBlacklisted(to) {\\n        _receiveWithAuthorization(\\n            from,\\n            to,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            signature\\n        );\\n    }\\n\\n    /**\\n     * @notice Attempt to cancel an authorization\\n     * @dev Works only if the authorization is not yet used.\\n     * EOA wallet signatures should be packed in the order of r, s, v.\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @param signature     Signature bytes signed by an EOA wallet or a contract wallet\\n     */\\n    function cancelAuthorization(\\n        address authorizer,\\n        bytes32 nonce,\\n        bytes memory signature\\n    ) external whenNotPaused {\\n        _cancelAuthorization(authorizer, nonce, signature);\\n    }\\n\\n    /**\\n     * @dev Helper method that sets the blacklist state of an account on balanceAndBlacklistStates.\\n     * If _shouldBlacklist is true, we apply a (1 << 255) bitmask with an OR operation on the\\n     * account's balanceAndBlacklistState. This flips the high bit for the account to 1,\\n     * indicating that the account is blacklisted.\\n     *\\n     * If _shouldBlacklist if false, we reset the account's balanceAndBlacklistStates to their\\n     * balances. This clears the high bit for the account, indicating that the account is unblacklisted.\\n     * @param _account         The address of the account.\\n     * @param _shouldBlacklist True if the account should be blacklisted, false if the account should be unblacklisted.\\n     */\\n    function _setBlacklistState(address _account, bool _shouldBlacklist)\\n        internal\\n        override\\n    {\\n        balanceAndBlacklistStates[_account] = _shouldBlacklist\\n            ? balanceAndBlacklistStates[_account] | (1 << 255)\\n            : _balanceOf(_account);\\n    }\\n\\n    /**\\n     * @dev Helper method that sets the balance of an account on balanceAndBlacklistStates.\\n     * Since balances are stored in the last 255 bits of the balanceAndBlacklistStates value,\\n     * we need to ensure that the updated balance does not exceed (2^255 - 1).\\n     * Since blacklisted accounts' balances cannot be updated, the method will also\\n     * revert if the account is blacklisted\\n     * @param _account The address of the account.\\n     * @param _balance The new fiat token balance of the account (max: (2^255 - 1)).\\n     */\\n    function _setBalance(address _account, uint256 _balance) internal override {\\n        require(\\n            _balance <= ((1 << 255) - 1),\\n            \\\"FiatTokenV2_2: Balance exceeds (2^255 - 1)\\\"\\n        );\\n        require(\\n            !_isBlacklisted(_account),\\n            \\\"FiatTokenV2_2: Account is blacklisted\\\"\\n        );\\n\\n        balanceAndBlacklistStates[_account] = _balance;\\n    }\\n\\n    /**\\n     * @inheritdoc Blacklistable\\n     */\\n    function _isBlacklisted(address _account)\\n        internal\\n        override\\n        view\\n        returns (bool)\\n    {\\n        return balanceAndBlacklistStates[_account] >> 255 == 1;\\n    }\\n\\n    /**\\n     * @dev Helper method to obtain the balance of an account. Since balances\\n     * are stored in the last 255 bits of the balanceAndBlacklistStates value,\\n     * we apply a ((1 << 255) - 1) bit bitmask with an AND operation on the\\n     * balanceAndBlacklistState to obtain the balance.\\n     * @param _account  The address of the account.\\n     * @return          The fiat token balance of the account.\\n     */\\n    function _balanceOf(address _account)\\n        internal\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return balanceAndBlacklistStates[_account] & ((1 << 255) - 1);\\n    }\\n\\n    /**\\n     * @inheritdoc FiatTokenV1\\n     */\\n    function approve(address spender, uint256 value)\\n        external\\n        override\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc FiatTokenV2\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override whenNotPaused {\\n        _permit(owner, spender, value, deadline, v, r, s);\\n    }\\n\\n    /**\\n     * @inheritdoc FiatTokenV2\\n     */\\n    function increaseAllowance(address spender, uint256 increment)\\n        external\\n        override\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        _increaseAllowance(msg.sender, spender, increment);\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc FiatTokenV2\\n     */\\n    function decreaseAllowance(address spender, uint256 decrement)\\n        external\\n        override\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        _decreaseAllowance(msg.sender, spender, decrement);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/v2/FiatTokenV2_1.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n *\\n * Copyright (c) 2023, Circle Internet Financial, LLC.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.6.12;\\n\\nimport { FiatTokenV2 } from \\\"./FiatTokenV2.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\n/**\\n * @title FiatToken V2.1\\n * @notice ERC20 Token backed by fiat reserves, version 2.1\\n */\\ncontract FiatTokenV2_1 is FiatTokenV2 {\\n    /**\\n     * @notice Initialize v2.1\\n     * @param lostAndFound  The address to which the locked funds are sent\\n     */\\n    function initializeV2_1(address lostAndFound) external {\\n        // solhint-disable-next-line reason-string\\n        require(_initializedVersion == 1);\\n\\n        uint256 lockedAmount = _balanceOf(address(this));\\n        if (lockedAmount > 0) {\\n            _transfer(address(this), lostAndFound, lockedAmount);\\n        }\\n        _blacklist(address(this));\\n\\n        _initializedVersion = 2;\\n    }\\n\\n    /**\\n     * @notice Version string for the EIP712 domain separator\\n     * @return Version string\\n     */\\n    function version() external pure returns (string memory) {\\n        return \\\"2\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/v2/FiatTokenV2.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n *\\n * Copyright (c) 2023, Circle Internet Financial, LLC.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.6.12;\\n\\nimport { FiatTokenV1_1 } from \\\"../v1.1/FiatTokenV1_1.sol\\\";\\nimport { EIP712 } from \\\"../util/EIP712.sol\\\";\\nimport { EIP3009 } from \\\"./EIP3009.sol\\\";\\nimport { EIP2612 } from \\\"./EIP2612.sol\\\";\\n\\n/**\\n * @title FiatToken V2\\n * @notice ERC20 Token backed by fiat reserves, version 2\\n */\\ncontract FiatTokenV2 is FiatTokenV1_1, EIP3009, EIP2612 {\\n    uint8 internal _initializedVersion;\\n\\n    /**\\n     * @notice Initialize v2\\n     * @param newName   New token name\\n     */\\n    function initializeV2(string calldata newName) external {\\n        // solhint-disable-next-line reason-string\\n        require(initialized && _initializedVersion == 0);\\n        name = newName;\\n        _DEPRECATED_CACHED_DOMAIN_SEPARATOR = EIP712.makeDomainSeparator(\\n            newName,\\n            \\\"2\\\"\\n        );\\n        _initializedVersion = 1;\\n    }\\n\\n    /**\\n     * @notice Increase the allowance by a given increment\\n     * @param spender   Spender's address\\n     * @param increment Amount of increase in allowance\\n     * @return True if successful\\n     */\\n    function increaseAllowance(address spender, uint256 increment)\\n        external\\n        virtual\\n        whenNotPaused\\n        notBlacklisted(msg.sender)\\n        notBlacklisted(spender)\\n        returns (bool)\\n    {\\n        _increaseAllowance(msg.sender, spender, increment);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Decrease the allowance by a given decrement\\n     * @param spender   Spender's address\\n     * @param decrement Amount of decrease in allowance\\n     * @return True if successful\\n     */\\n    function decreaseAllowance(address spender, uint256 decrement)\\n        external\\n        virtual\\n        whenNotPaused\\n        notBlacklisted(msg.sender)\\n        notBlacklisted(spender)\\n        returns (bool)\\n    {\\n        _decreaseAllowance(msg.sender, spender, decrement);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Execute a transfer with a signed authorization\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function transferWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external whenNotPaused notBlacklisted(from) notBlacklisted(to) {\\n        _transferWithAuthorization(\\n            from,\\n            to,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /**\\n     * @notice Receive a transfer with a signed authorization from the payer\\n     * @dev This has an additional check to ensure that the payee's address\\n     * matches the caller of this function to prevent front-running attacks.\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function receiveWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external whenNotPaused notBlacklisted(from) notBlacklisted(to) {\\n        _receiveWithAuthorization(\\n            from,\\n            to,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /**\\n     * @notice Attempt to cancel an authorization\\n     * @dev Works only if the authorization is not yet used.\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function cancelAuthorization(\\n        address authorizer,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external whenNotPaused {\\n        _cancelAuthorization(authorizer, nonce, v, r, s);\\n    }\\n\\n    /**\\n     * @notice Update allowance with a signed permit\\n     * @param owner       Token owner's address (Authorizer)\\n     * @param spender     Spender's address\\n     * @param value       Amount of allowance\\n     * @param deadline    The time at which the signature expires (unix time), or max uint256 value to signal no expiration\\n     * @param v           v of the signature\\n     * @param r           r of the signature\\n     * @param s           s of the signature\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n        virtual\\n        whenNotPaused\\n        notBlacklisted(owner)\\n        notBlacklisted(spender)\\n    {\\n        _permit(owner, spender, value, deadline, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Internal function to increase the allowance by a given increment\\n     * @param owner     Token owner's address\\n     * @param spender   Spender's address\\n     * @param increment Amount of increase\\n     */\\n    function _increaseAllowance(\\n        address owner,\\n        address spender,\\n        uint256 increment\\n    ) internal override {\\n        _approve(owner, spender, allowed[owner][spender].add(increment));\\n    }\\n\\n    /**\\n     * @dev Internal function to decrease the allowance by a given decrement\\n     * @param owner     Token owner's address\\n     * @param spender   Spender's address\\n     * @param decrement Amount of decrease\\n     */\\n    function _decreaseAllowance(\\n        address owner,\\n        address spender,\\n        uint256 decrement\\n    ) internal override {\\n        _approve(\\n            owner,\\n            spender,\\n            allowed[owner][spender].sub(\\n                decrement,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/v2/EIP712Domain.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n *\\n * Copyright (c) 2023, Circle Internet Financial, LLC.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.6.12;\\n\\n// solhint-disable func-name-mixedcase\\n\\n/**\\n * @title EIP712 Domain\\n */\\ncontract EIP712Domain {\\n    // was originally DOMAIN_SEPARATOR\\n    // but that has been moved to a method so we can override it in V2_2+\\n    bytes32 internal _DEPRECATED_CACHED_DOMAIN_SEPARATOR;\\n\\n    /**\\n     * @notice Get the EIP712 Domain Separator.\\n     * @return The bytes32 EIP712 domain separator.\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return _domainSeparator();\\n    }\\n\\n    /**\\n     * @dev Internal method to get the EIP712 Domain Separator.\\n     * @return The bytes32 EIP712 domain separator.\\n     */\\n    function _domainSeparator() internal virtual view returns (bytes32) {\\n        return _DEPRECATED_CACHED_DOMAIN_SEPARATOR;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/v2/EIP3009.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n *\\n * Copyright (c) 2023, Circle Internet Financial, LLC.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.6.12;\\n\\nimport { AbstractFiatTokenV2 } from \\\"./AbstractFiatTokenV2.sol\\\";\\nimport { EIP712Domain } from \\\"./EIP712Domain.sol\\\";\\nimport { SignatureChecker } from \\\"../util/SignatureChecker.sol\\\";\\nimport { MessageHashUtils } from \\\"../util/MessageHashUtils.sol\\\";\\n\\n/**\\n * @title EIP-3009\\n * @notice Provide internal implementation for gas-abstracted transfers\\n * @dev Contracts that inherit from this must wrap these with publicly\\n * accessible functions, optionally adding modifiers where necessary\\n */\\nabstract contract EIP3009 is AbstractFiatTokenV2, EIP712Domain {\\n    // keccak256(\\\"TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\n    bytes32\\n        public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH = 0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267;\\n\\n    // keccak256(\\\"ReceiveWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\n    bytes32\\n        public constant RECEIVE_WITH_AUTHORIZATION_TYPEHASH = 0xd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de8;\\n\\n    // keccak256(\\\"CancelAuthorization(address authorizer,bytes32 nonce)\\\")\\n    bytes32\\n        public constant CANCEL_AUTHORIZATION_TYPEHASH = 0x158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a1597429;\\n\\n    /**\\n     * @dev authorizer address => nonce => bool (true if nonce is used)\\n     */\\n    mapping(address => mapping(bytes32 => bool)) private _authorizationStates;\\n\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n    event AuthorizationCanceled(\\n        address indexed authorizer,\\n        bytes32 indexed nonce\\n    );\\n\\n    /**\\n     * @notice Returns the state of an authorization\\n     * @dev Nonces are randomly generated 32-byte data unique to the\\n     * authorizer's address\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @return True if the nonce is used\\n     */\\n    function authorizationState(address authorizer, bytes32 nonce)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _authorizationStates[authorizer][nonce];\\n    }\\n\\n    /**\\n     * @notice Execute a transfer with a signed authorization\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function _transferWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        _transferWithAuthorization(\\n            from,\\n            to,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            abi.encodePacked(r, s, v)\\n        );\\n    }\\n\\n    /**\\n     * @notice Execute a transfer with a signed authorization\\n     * @dev EOA wallet signatures should be packed in the order of r, s, v.\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param signature     Signature byte array produced by an EOA wallet or a contract wallet\\n     */\\n    function _transferWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        bytes memory signature\\n    ) internal {\\n        _requireValidAuthorization(from, nonce, validAfter, validBefore);\\n        _requireValidSignature(\\n            from,\\n            keccak256(\\n                abi.encode(\\n                    TRANSFER_WITH_AUTHORIZATION_TYPEHASH,\\n                    from,\\n                    to,\\n                    value,\\n                    validAfter,\\n                    validBefore,\\n                    nonce\\n                )\\n            ),\\n            signature\\n        );\\n\\n        _markAuthorizationAsUsed(from, nonce);\\n        _transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @notice Receive a transfer with a signed authorization from the payer\\n     * @dev This has an additional check to ensure that the payee's address\\n     * matches the caller of this function to prevent front-running attacks.\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function _receiveWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        _receiveWithAuthorization(\\n            from,\\n            to,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            abi.encodePacked(r, s, v)\\n        );\\n    }\\n\\n    /**\\n     * @notice Receive a transfer with a signed authorization from the payer\\n     * @dev This has an additional check to ensure that the payee's address\\n     * matches the caller of this function to prevent front-running attacks.\\n     * EOA wallet signatures should be packed in the order of r, s, v.\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param signature     Signature byte array produced by an EOA wallet or a contract wallet\\n     */\\n    function _receiveWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        bytes memory signature\\n    ) internal {\\n        require(to == msg.sender, \\\"FiatTokenV2: caller must be the payee\\\");\\n        _requireValidAuthorization(from, nonce, validAfter, validBefore);\\n        _requireValidSignature(\\n            from,\\n            keccak256(\\n                abi.encode(\\n                    RECEIVE_WITH_AUTHORIZATION_TYPEHASH,\\n                    from,\\n                    to,\\n                    value,\\n                    validAfter,\\n                    validBefore,\\n                    nonce\\n                )\\n            ),\\n            signature\\n        );\\n\\n        _markAuthorizationAsUsed(from, nonce);\\n        _transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @notice Attempt to cancel an authorization\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function _cancelAuthorization(\\n        address authorizer,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        _cancelAuthorization(authorizer, nonce, abi.encodePacked(r, s, v));\\n    }\\n\\n    /**\\n     * @notice Attempt to cancel an authorization\\n     * @dev EOA wallet signatures should be packed in the order of r, s, v.\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @param signature     Signature byte array produced by an EOA wallet or a contract wallet\\n     */\\n    function _cancelAuthorization(\\n        address authorizer,\\n        bytes32 nonce,\\n        bytes memory signature\\n    ) internal {\\n        _requireUnusedAuthorization(authorizer, nonce);\\n        _requireValidSignature(\\n            authorizer,\\n            keccak256(\\n                abi.encode(CANCEL_AUTHORIZATION_TYPEHASH, authorizer, nonce)\\n            ),\\n            signature\\n        );\\n\\n        _authorizationStates[authorizer][nonce] = true;\\n        emit AuthorizationCanceled(authorizer, nonce);\\n    }\\n\\n    /**\\n     * @notice Validates that signature against input data struct\\n     * @param signer        Signer's address\\n     * @param dataHash      Hash of encoded data struct\\n     * @param signature     Signature byte array produced by an EOA wallet or a contract wallet\\n     */\\n    function _requireValidSignature(\\n        address signer,\\n        bytes32 dataHash,\\n        bytes memory signature\\n    ) private view {\\n        require(\\n            SignatureChecker.isValidSignatureNow(\\n                signer,\\n                MessageHashUtils.toTypedDataHash(_domainSeparator(), dataHash),\\n                signature\\n            ),\\n            \\\"FiatTokenV2: invalid signature\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Check that an authorization is unused\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     */\\n    function _requireUnusedAuthorization(address authorizer, bytes32 nonce)\\n        private\\n        view\\n    {\\n        require(\\n            !_authorizationStates[authorizer][nonce],\\n            \\\"FiatTokenV2: authorization is used or canceled\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Check that authorization is valid\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     */\\n    function _requireValidAuthorization(\\n        address authorizer,\\n        bytes32 nonce,\\n        uint256 validAfter,\\n        uint256 validBefore\\n    ) private view {\\n        require(\\n            now > validAfter,\\n            \\\"FiatTokenV2: authorization is not yet valid\\\"\\n        );\\n        require(now < validBefore, \\\"FiatTokenV2: authorization is expired\\\");\\n        _requireUnusedAuthorization(authorizer, nonce);\\n    }\\n\\n    /**\\n     * @notice Mark an authorization as used\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     */\\n    function _markAuthorizationAsUsed(address authorizer, bytes32 nonce)\\n        private\\n    {\\n        _authorizationStates[authorizer][nonce] = true;\\n        emit AuthorizationUsed(authorizer, nonce);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/v2/EIP2612.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n *\\n * Copyright (c) 2023, Circle Internet Financial, LLC.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.6.12;\\n\\nimport { AbstractFiatTokenV2 } from \\\"./AbstractFiatTokenV2.sol\\\";\\nimport { EIP712Domain } from \\\"./EIP712Domain.sol\\\";\\nimport { MessageHashUtils } from \\\"../util/MessageHashUtils.sol\\\";\\nimport { SignatureChecker } from \\\"../util/SignatureChecker.sol\\\";\\n\\n/**\\n * @title EIP-2612\\n * @notice Provide internal implementation for gas-abstracted approvals\\n */\\nabstract contract EIP2612 is AbstractFiatTokenV2, EIP712Domain {\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\")\\n    bytes32\\n        public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint256) private _permitNonces;\\n\\n    /**\\n     * @notice Nonces for permit\\n     * @param owner Token owner's address (Authorizer)\\n     * @return Next nonce\\n     */\\n    function nonces(address owner) external view returns (uint256) {\\n        return _permitNonces[owner];\\n    }\\n\\n    /**\\n     * @notice Verify a signed approval permit and execute if valid\\n     * @param owner     Token owner's address (Authorizer)\\n     * @param spender   Spender's address\\n     * @param value     Amount of allowance\\n     * @param deadline  The time at which the signature expires (unix time), or max uint256 value to signal no expiration\\n     * @param v         v of the signature\\n     * @param r         r of the signature\\n     * @param s         s of the signature\\n     */\\n    function _permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        _permit(owner, spender, value, deadline, abi.encodePacked(r, s, v));\\n    }\\n\\n    /**\\n     * @notice Verify a signed approval permit and execute if valid\\n     * @dev EOA wallet signatures should be packed in the order of r, s, v.\\n     * @param owner      Token owner's address (Authorizer)\\n     * @param spender    Spender's address\\n     * @param value      Amount of allowance\\n     * @param deadline   The time at which the signature expires (unix time), or max uint256 value to signal no expiration\\n     * @param signature  Signature byte array signed by an EOA wallet or a contract wallet\\n     */\\n    function _permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) internal {\\n        require(\\n            deadline == type(uint256).max || deadline >= now,\\n            \\\"FiatTokenV2: permit is expired\\\"\\n        );\\n\\n        bytes32 typedDataHash = MessageHashUtils.toTypedDataHash(\\n            _domainSeparator(),\\n            keccak256(\\n                abi.encode(\\n                    PERMIT_TYPEHASH,\\n                    owner,\\n                    spender,\\n                    value,\\n                    _permitNonces[owner]++,\\n                    deadline\\n                )\\n            )\\n        );\\n        require(\\n            SignatureChecker.isValidSignatureNow(\\n                owner,\\n                typedDataHash,\\n                signature\\n            ),\\n            \\\"EIP2612: invalid signature\\\"\\n        );\\n\\n        _approve(owner, spender, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/v2/AbstractFiatTokenV2.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n *\\n * Copyright (c) 2023, Circle Internet Financial, LLC.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.6.12;\\n\\nimport { AbstractFiatTokenV1 } from \\\"../v1/AbstractFiatTokenV1.sol\\\";\\n\\nabstract contract AbstractFiatTokenV2 is AbstractFiatTokenV1 {\\n    function _increaseAllowance(\\n        address owner,\\n        address spender,\\n        uint256 increment\\n    ) internal virtual;\\n\\n    function _decreaseAllowance(\\n        address owner,\\n        address spender,\\n        uint256 decrement\\n    ) internal virtual;\\n}\\n\"\r\n    },\r\n    \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/v1/Pausable.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n *\\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\\n * Copyright (c) 2018-2020 CENTRE SECZ\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity 0.6.12;\\n\\nimport { Ownable } from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @notice Base contract which allows children to implement an emergency stop\\n * mechanism\\n * @dev Forked from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/feb665136c0dae9912e08397c1a21c4af3651ef3/contracts/lifecycle/Pausable.sol\\n * Modifications:\\n * 1. Added pauser role, switched pause/unpause to be onlyPauser (6/14/2018)\\n * 2. Removed whenNotPause/whenPaused from pause/unpause (6/14/2018)\\n * 3. Removed whenPaused (6/14/2018)\\n * 4. Switches ownable library to use ZeppelinOS (7/12/18)\\n * 5. Remove constructor (7/13/18)\\n * 6. Reformat, conform to Solidity 0.6 syntax and add error messages (5/13/20)\\n * 7. Make public functions external (5/27/20)\\n */\\ncontract Pausable is Ownable {\\n    event Pause();\\n    event Unpause();\\n    event PauserChanged(address indexed newAddress);\\n\\n    address public pauser;\\n    bool public paused = false;\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev throws if called by any account other than the pauser\\n     */\\n    modifier onlyPauser() {\\n        require(msg.sender == pauser, \\\"Pausable: caller is not the pauser\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev called by the owner to pause, triggers stopped state\\n     */\\n    function pause() external onlyPauser {\\n        paused = true;\\n        emit Pause();\\n    }\\n\\n    /**\\n     * @dev called by the owner to unpause, returns to normal state\\n     */\\n    function unpause() external onlyPauser {\\n        paused = false;\\n        emit Unpause();\\n    }\\n\\n    /**\\n     * @notice Updates the pauser address.\\n     * @param _newPauser The address of the new pauser.\\n     */\\n    function updatePauser(address _newPauser) external onlyOwner {\\n        require(\\n            _newPauser != address(0),\\n            \\\"Pausable: new pauser is the zero address\\\"\\n        );\\n        pauser = _newPauser;\\n        emit PauserChanged(pauser);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/v1/Ownable.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n *\\n * Copyright (c) 2018 zOS Global Limited.\\n * Copyright (c) 2018-2020 CENTRE SECZ\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @notice The Ownable contract has an owner address, and provides basic\\n * authorization control functions\\n * @dev Forked from https://github.com/OpenZeppelin/openzeppelin-labs/blob/3887ab77b8adafba4a26ace002f3a684c1a3388b/upgradeability_ownership/contracts/ownership/Ownable.sol\\n * Modifications:\\n * 1. Consolidate OwnableStorage into this contract (7/13/18)\\n * 2. Reformat, conform to Solidity 0.6 syntax, and add error messages (5/13/20)\\n * 3. Make public functions external (5/27/20)\\n */\\ncontract Ownable {\\n    // Owner of the contract\\n    address private _owner;\\n\\n    /**\\n     * @dev Event to show ownership has been transferred\\n     * @param previousOwner representing the address of the previous owner\\n     * @param newOwner representing the address of the new owner\\n     */\\n    event OwnershipTransferred(address previousOwner, address newOwner);\\n\\n    /**\\n     * @dev The constructor sets the original owner of the contract to the sender account.\\n     */\\n    constructor() public {\\n        setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Tells the address of the owner\\n     * @return the address of the owner\\n     */\\n    function owner() external view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Sets a new owner address\\n     */\\n    function setOwner(address newOwner) internal {\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == _owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        setOwner(newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/v1/FiatTokenV1.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n *\\n * Copyright (c) 2023, Circle Internet Financial, LLC.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.6.12;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { AbstractFiatTokenV1 } from \\\"./AbstractFiatTokenV1.sol\\\";\\nimport { Ownable } from \\\"./Ownable.sol\\\";\\nimport { Pausable } from \\\"./Pausable.sol\\\";\\nimport { Blacklistable } from \\\"./Blacklistable.sol\\\";\\n\\n/**\\n * @title FiatToken\\n * @dev ERC20 Token backed by fiat reserves\\n */\\ncontract FiatTokenV1 is AbstractFiatTokenV1, Ownable, Pausable, Blacklistable {\\n    using SafeMath for uint256;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n    string public currency;\\n    address public masterMinter;\\n    bool internal initialized;\\n\\n    /// @dev A mapping that stores the balance and blacklist states for a given address.\\n    /// The first bit defines whether the address is blacklisted (1 if blacklisted, 0 otherwise).\\n    /// The last 255 bits define the balance for the address.\\n    mapping(address => uint256) internal balanceAndBlacklistStates;\\n    mapping(address => mapping(address => uint256)) internal allowed;\\n    uint256 internal totalSupply_ = 0;\\n    mapping(address => bool) internal minters;\\n    mapping(address => uint256) internal minterAllowed;\\n\\n    event Mint(address indexed minter, address indexed to, uint256 amount);\\n    event Burn(address indexed burner, uint256 amount);\\n    event MinterConfigured(address indexed minter, uint256 minterAllowedAmount);\\n    event MinterRemoved(address indexed oldMinter);\\n    event MasterMinterChanged(address indexed newMasterMinter);\\n\\n    /**\\n     * @notice Initializes the fiat token contract.\\n     * @param tokenName       The name of the fiat token.\\n     * @param tokenSymbol     The symbol of the fiat token.\\n     * @param tokenCurrency   The fiat currency that the token represents.\\n     * @param tokenDecimals   The number of decimals that the token uses.\\n     * @param newMasterMinter The masterMinter address for the fiat token.\\n     * @param newPauser       The pauser address for the fiat token.\\n     * @param newBlacklister  The blacklister address for the fiat token.\\n     * @param newOwner        The owner of the fiat token.\\n     */\\n    function initialize(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        string memory tokenCurrency,\\n        uint8 tokenDecimals,\\n        address newMasterMinter,\\n        address newPauser,\\n        address newBlacklister,\\n        address newOwner\\n    ) public {\\n        require(!initialized, \\\"FiatToken: contract is already initialized\\\");\\n        require(\\n            newMasterMinter != address(0),\\n            \\\"FiatToken: new masterMinter is the zero address\\\"\\n        );\\n        require(\\n            newPauser != address(0),\\n            \\\"FiatToken: new pauser is the zero address\\\"\\n        );\\n        require(\\n            newBlacklister != address(0),\\n            \\\"FiatToken: new blacklister is the zero address\\\"\\n        );\\n        require(\\n            newOwner != address(0),\\n            \\\"FiatToken: new owner is the zero address\\\"\\n        );\\n\\n        name = tokenName;\\n        symbol = tokenSymbol;\\n        currency = tokenCurrency;\\n        decimals = tokenDecimals;\\n        masterMinter = newMasterMinter;\\n        pauser = newPauser;\\n        blacklister = newBlacklister;\\n        setOwner(newOwner);\\n        initialized = true;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than a minter.\\n     */\\n    modifier onlyMinters() {\\n        require(minters[msg.sender], \\\"FiatToken: caller is not a minter\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Mints fiat tokens to an address.\\n     * @param _to The address that will receive the minted tokens.\\n     * @param _amount The amount of tokens to mint. Must be less than or equal\\n     * to the minterAllowance of the caller.\\n     * @return True if the operation was successful.\\n     */\\n    function mint(address _to, uint256 _amount)\\n        external\\n        whenNotPaused\\n        onlyMinters\\n        notBlacklisted(msg.sender)\\n        notBlacklisted(_to)\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"FiatToken: mint to the zero address\\\");\\n        require(_amount > 0, \\\"FiatToken: mint amount not greater than 0\\\");\\n\\n        uint256 mintingAllowedAmount = minterAllowed[msg.sender];\\n        require(\\n            _amount <= mintingAllowedAmount,\\n            \\\"FiatToken: mint amount exceeds minterAllowance\\\"\\n        );\\n\\n        totalSupply_ = totalSupply_.add(_amount);\\n        _setBalance(_to, _balanceOf(_to).add(_amount));\\n        minterAllowed[msg.sender] = mintingAllowedAmount.sub(_amount);\\n        emit Mint(msg.sender, _to, _amount);\\n        emit Transfer(address(0), _to, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the masterMinter\\n     */\\n    modifier onlyMasterMinter() {\\n        require(\\n            msg.sender == masterMinter,\\n            \\\"FiatToken: caller is not the masterMinter\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Gets the minter allowance for an account.\\n     * @param minter The address to check.\\n     * @return The remaining minter allowance for the account.\\n     */\\n    function minterAllowance(address minter) external view returns (uint256) {\\n        return minterAllowed[minter];\\n    }\\n\\n    /**\\n     * @notice Checks if an account is a minter.\\n     * @param account The address to check.\\n     * @return True if the account is a minter, false if the account is not a minter.\\n     */\\n    function isMinter(address account) external view returns (bool) {\\n        return minters[account];\\n    }\\n\\n    /**\\n     * @notice Gets the remaining amount of fiat tokens a spender is allowed to transfer on\\n     * behalf of the token owner.\\n     * @param owner   The token owner's address.\\n     * @param spender The spender's address.\\n     * @return The remaining allowance.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return allowed[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Gets the totalSupply of the fiat token.\\n     * @return The totalSupply of the fiat token.\\n     */\\n    function totalSupply() external override view returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n    /**\\n     * @notice Gets the fiat token balance of an account.\\n     * @param account  The address to check.\\n     * @return balance The fiat token balance of the account.\\n     */\\n    function balanceOf(address account)\\n        external\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _balanceOf(account);\\n    }\\n\\n    /**\\n     * @notice Sets a fiat token allowance for a spender to spend on behalf of the caller.\\n     * @param spender The spender's address.\\n     * @param value   The allowance amount.\\n     * @return True if the operation was successful.\\n     */\\n    function approve(address spender, uint256 value)\\n        external\\n        virtual\\n        override\\n        whenNotPaused\\n        notBlacklisted(msg.sender)\\n        notBlacklisted(spender)\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Internal function to set allowance.\\n     * @param owner     Token owner's address.\\n     * @param spender   Spender's address.\\n     * @param value     Allowance amount.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal override {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        allowed[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Transfers tokens from an address to another by spending the caller's allowance.\\n     * @dev The caller must have some fiat token allowance on the payer's tokens.\\n     * @param from  Payer's address.\\n     * @param to    Payee's address.\\n     * @param value Transfer amount.\\n     * @return True if the operation was successful.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(msg.sender)\\n        notBlacklisted(from)\\n        notBlacklisted(to)\\n        returns (bool)\\n    {\\n        require(\\n            value <= allowed[from][msg.sender],\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        _transfer(from, to, value);\\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfers tokens from the caller.\\n     * @param to    Payee's address.\\n     * @param value Transfer amount.\\n     * @return True if the operation was successful.\\n     */\\n    function transfer(address to, uint256 value)\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(msg.sender)\\n        notBlacklisted(to)\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Internal function to process transfers.\\n     * @param from  Payer's address.\\n     * @param to    Payee's address.\\n     * @param value Transfer amount.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal override {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(\\n            value <= _balanceOf(from),\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n\\n        _setBalance(from, _balanceOf(from).sub(value));\\n        _setBalance(to, _balanceOf(to).add(value));\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @notice Adds or updates a new minter with a mint allowance.\\n     * @param minter The address of the minter.\\n     * @param minterAllowedAmount The minting amount allowed for the minter.\\n     * @return True if the operation was successful.\\n     */\\n    function configureMinter(address minter, uint256 minterAllowedAmount)\\n        external\\n        whenNotPaused\\n        onlyMasterMinter\\n        returns (bool)\\n    {\\n        minters[minter] = true;\\n        minterAllowed[minter] = minterAllowedAmount;\\n        emit MinterConfigured(minter, minterAllowedAmount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Removes a minter.\\n     * @param minter The address of the minter to remove.\\n     * @return True if the operation was successful.\\n     */\\n    function removeMinter(address minter)\\n        external\\n        onlyMasterMinter\\n        returns (bool)\\n    {\\n        minters[minter] = false;\\n        minterAllowed[minter] = 0;\\n        emit MinterRemoved(minter);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Allows a minter to burn some of its own tokens.\\n     * @dev The caller must be a minter, must not be blacklisted, and the amount to burn\\n     * should be less than or equal to the account's balance.\\n     * @param _amount the amount of tokens to be burned.\\n     */\\n    function burn(uint256 _amount)\\n        external\\n        whenNotPaused\\n        onlyMinters\\n        notBlacklisted(msg.sender)\\n    {\\n        uint256 balance = _balanceOf(msg.sender);\\n        require(_amount > 0, \\\"FiatToken: burn amount not greater than 0\\\");\\n        require(balance >= _amount, \\\"FiatToken: burn amount exceeds balance\\\");\\n\\n        totalSupply_ = totalSupply_.sub(_amount);\\n        _setBalance(msg.sender, balance.sub(_amount));\\n        emit Burn(msg.sender, _amount);\\n        emit Transfer(msg.sender, address(0), _amount);\\n    }\\n\\n    /**\\n     * @notice Updates the master minter address.\\n     * @param _newMasterMinter The address of the new master minter.\\n     */\\n    function updateMasterMinter(address _newMasterMinter) external onlyOwner {\\n        require(\\n            _newMasterMinter != address(0),\\n            \\\"FiatToken: new masterMinter is the zero address\\\"\\n        );\\n        masterMinter = _newMasterMinter;\\n        emit MasterMinterChanged(masterMinter);\\n    }\\n\\n    /**\\n     * @inheritdoc Blacklistable\\n     */\\n    function _blacklist(address _account) internal override {\\n        _setBlacklistState(_account, true);\\n    }\\n\\n    /**\\n     * @inheritdoc Blacklistable\\n     */\\n    function _unBlacklist(address _account) internal override {\\n        _setBlacklistState(_account, false);\\n    }\\n\\n    /**\\n     * @dev Helper method that sets the blacklist state of an account.\\n     * @param _account         The address of the account.\\n     * @param _shouldBlacklist True if the account should be blacklisted, false if the account should be unblacklisted.\\n     */\\n    function _setBlacklistState(address _account, bool _shouldBlacklist)\\n        internal\\n        virtual\\n    {\\n        _deprecatedBlacklisted[_account] = _shouldBlacklist;\\n    }\\n\\n    /**\\n     * @dev Helper method that sets the balance of an account.\\n     * @param _account The address of the account.\\n     * @param _balance The new fiat token balance of the account.\\n     */\\n    function _setBalance(address _account, uint256 _balance) internal virtual {\\n        balanceAndBlacklistStates[_account] = _balance;\\n    }\\n\\n    /**\\n     * @inheritdoc Blacklistable\\n     */\\n    function _isBlacklisted(address _account)\\n        internal\\n        virtual\\n        override\\n        view\\n        returns (bool)\\n    {\\n        return _deprecatedBlacklisted[_account];\\n    }\\n\\n    /**\\n     * @dev Helper method to obtain the balance of an account.\\n     * @param _account  The address of the account.\\n     * @return          The fiat token balance of the account.\\n     */\\n    function _balanceOf(address _account)\\n        internal\\n        virtual\\n        view\\n        returns (uint256)\\n    {\\n        return balanceAndBlacklistStates[_account];\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/v1/Blacklistable.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n *\\n * Copyright (c) 2023, Circle Internet Financial, LLC.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.6.12;\\n\\nimport { Ownable } from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Blacklistable Token\\n * @dev Allows accounts to be blacklisted by a \\\"blacklister\\\" role\\n */\\nabstract contract Blacklistable is Ownable {\\n    address public blacklister;\\n    mapping(address => bool) internal _deprecatedBlacklisted;\\n\\n    event Blacklisted(address indexed _account);\\n    event UnBlacklisted(address indexed _account);\\n    event BlacklisterChanged(address indexed newBlacklister);\\n\\n    /**\\n     * @dev Throws if called by any account other than the blacklister.\\n     */\\n    modifier onlyBlacklister() {\\n        require(\\n            msg.sender == blacklister,\\n            \\\"Blacklistable: caller is not the blacklister\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if argument account is blacklisted.\\n     * @param _account The address to check.\\n     */\\n    modifier notBlacklisted(address _account) {\\n        require(\\n            !_isBlacklisted(_account),\\n            \\\"Blacklistable: account is blacklisted\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks if account is blacklisted.\\n     * @param _account The address to check.\\n     * @return True if the account is blacklisted, false if the account is not blacklisted.\\n     */\\n    function isBlacklisted(address _account) external view returns (bool) {\\n        return _isBlacklisted(_account);\\n    }\\n\\n    /**\\n     * @notice Adds account to blacklist.\\n     * @param _account The address to blacklist.\\n     */\\n    function blacklist(address _account) external onlyBlacklister {\\n        _blacklist(_account);\\n        emit Blacklisted(_account);\\n    }\\n\\n    /**\\n     * @notice Removes account from blacklist.\\n     * @param _account The address to remove from the blacklist.\\n     */\\n    function unBlacklist(address _account) external onlyBlacklister {\\n        _unBlacklist(_account);\\n        emit UnBlacklisted(_account);\\n    }\\n\\n    /**\\n     * @notice Updates the blacklister address.\\n     * @param _newBlacklister The address of the new blacklister.\\n     */\\n    function updateBlacklister(address _newBlacklister) external onlyOwner {\\n        require(\\n            _newBlacklister != address(0),\\n            \\\"Blacklistable: new blacklister is the zero address\\\"\\n        );\\n        blacklister = _newBlacklister;\\n        emit BlacklisterChanged(blacklister);\\n    }\\n\\n    /**\\n     * @dev Checks if account is blacklisted.\\n     * @param _account The address to check.\\n     * @return true if the account is blacklisted, false otherwise.\\n     */\\n    function _isBlacklisted(address _account)\\n        internal\\n        virtual\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Helper method that blacklists an account.\\n     * @param _account The address to blacklist.\\n     */\\n    function _blacklist(address _account) internal virtual;\\n\\n    /**\\n     * @dev Helper method that unblacklists an account.\\n     * @param _account The address to unblacklist.\\n     */\\n    function _unBlacklist(address _account) internal virtual;\\n}\\n\"\r\n    },\r\n    \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/v1/AbstractFiatTokenV1.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n *\\n * Copyright (c) 2023, Circle Internet Financial, LLC.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.6.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract AbstractFiatTokenV1 is IERC20 {\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal virtual;\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal virtual;\\n}\\n\"\r\n    },\r\n    \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/v1.1/Rescuable.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n *\\n * Copyright (c) 2023, Circle Internet Financial, LLC.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.6.12;\\n\\nimport { Ownable } from \\\"../v1/Ownable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract Rescuable is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address private _rescuer;\\n\\n    event RescuerChanged(address indexed newRescuer);\\n\\n    /**\\n     * @notice Returns current rescuer\\n     * @return Rescuer's address\\n     */\\n    function rescuer() external view returns (address) {\\n        return _rescuer;\\n    }\\n\\n    /**\\n     * @notice Revert if called by any account other than the rescuer.\\n     */\\n    modifier onlyRescuer() {\\n        require(msg.sender == _rescuer, \\\"Rescuable: caller is not the rescuer\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Rescue ERC20 tokens locked up in this contract.\\n     * @param tokenContract ERC20 token contract address\\n     * @param to        Recipient address\\n     * @param amount    Amount to withdraw\\n     */\\n    function rescueERC20(\\n        IERC20 tokenContract,\\n        address to,\\n        uint256 amount\\n    ) external onlyRescuer {\\n        tokenContract.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice Updates the rescuer address.\\n     * @param newRescuer The address of the new rescuer.\\n     */\\n    function updateRescuer(address newRescuer) external onlyOwner {\\n        require(\\n            newRescuer != address(0),\\n            \\\"Rescuable: new rescuer is the zero address\\\"\\n        );\\n        _rescuer = newRescuer;\\n        emit RescuerChanged(newRescuer);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/v1.1/FiatTokenV1_1.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n *\\n * Copyright (c) 2023, Circle Internet Financial, LLC.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.6.12;\\n\\nimport { FiatTokenV1 } from \\\"../v1/FiatTokenV1.sol\\\";\\nimport { Rescuable } from \\\"./Rescuable.sol\\\";\\n\\n/**\\n * @title FiatTokenV1_1\\n * @dev ERC20 Token backed by fiat reserves\\n */\\ncontract FiatTokenV1_1 is FiatTokenV1, Rescuable {\\n\\n}\\n\"\r\n    },\r\n    \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/util/SignatureChecker.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n *\\n * Copyright (c) 2023, Circle Internet Financial, LLC.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.6.12;\\n\\nimport { ECRecover } from \\\"./ECRecover.sol\\\";\\nimport { IERC1271 } from \\\"../interface/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECRecover.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets.\\n *\\n * Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/21bb89ef5bfc789b9333eb05e3ba2b7b284ac77c/contracts/utils/cryptography/SignatureChecker.sol\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECRecover.recover`.\\n     * @param signer        Address of the claimed signer\\n     * @param digest        Keccak-256 hash digest of the signed message\\n     * @param signature     Signature byte array associated with hash\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 digest,\\n        bytes memory signature\\n    ) external view returns (bool) {\\n        if (!isContract(signer)) {\\n            return ECRecover.recover(digest, signature) == signer;\\n        }\\n        return isValidERC1271SignatureNow(signer, digest, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     * @param signer        Address of the claimed signer\\n     * @param digest        Keccak-256 hash digest of the signed message\\n     * @param signature     Signature byte array associated with hash\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 digest,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(\\n                IERC1271.isValidSignature.selector,\\n                digest,\\n                signature\\n            )\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) ==\\n            bytes32(IERC1271.isValidSignature.selector));\\n    }\\n\\n    /**\\n     * @dev Checks if the input address is a smart contract.\\n     */\\n    function isContract(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/util/MessageHashUtils.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n *\\n * Copyright (c) 2023, Circle Internet Financial, LLC.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     * Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/21bb89ef5bfc789b9333eb05e3ba2b7b284ac77c/contracts/utils/cryptography/MessageHashUtils.sol\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * @param domainSeparator    Domain separator\\n     * @param structHash         Hashed EIP-712 data struct\\n     * @return digest            The keccak256 digest of an EIP-712 typed data\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash)\\n        internal\\n        pure\\n        returns (bytes32 digest)\\n    {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/util/EIP712.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n *\\n * Copyright (c) 2023, Circle Internet Financial, LLC.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @title EIP712\\n * @notice A library that provides EIP712 helper functions\\n */\\nlibrary EIP712 {\\n    /**\\n     * @notice Make EIP712 domain separator\\n     * @param name      Contract name\\n     * @param version   Contract version\\n     * @param chainId   Blockchain ID\\n     * @return Domain separator\\n     */\\n    function makeDomainSeparator(\\n        string memory name,\\n        string memory version,\\n        uint256 chainId\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n                    0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f,\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(version)),\\n                    chainId,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Make EIP712 domain separator\\n     * @param name      Contract name\\n     * @param version   Contract version\\n     * @return Domain separator\\n     */\\n    function makeDomainSeparator(string memory name, string memory version)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return makeDomainSeparator(name, version, chainId);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/util/ECRecover.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n *\\n * Copyright (c) 2023, Circle Internet Financial, LLC.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @title ECRecover\\n * @notice A library that provides a safe ECDSA recovery function\\n */\\nlibrary ECRecover {\\n    /**\\n     * @notice Recover signer's address from a signed message\\n     * @dev Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/65e4ffde586ec89af3b7e9140bdc9235d1254853/contracts/cryptography/ECDSA.sol\\n     * Modifications: Accept v, r, and s as separate arguments\\n     * @param digest    Keccak-256 hash digest of the signed message\\n     * @param v         v of the signature\\n     * @param r         r of the signature\\n     * @param s         s of the signature\\n     * @return Signer address\\n     */\\n    function recover(\\n        bytes32 digest,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (\\n            uint256(s) >\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\\n        ) {\\n            revert(\\\"ECRecover: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECRecover: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(digest, v, r, s);\\n        require(signer != address(0), \\\"ECRecover: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @notice Recover signer's address from a signed message\\n     * @dev Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/0053ee040a7ff1dbc39691c9e67a69f564930a88/contracts/utils/cryptography/ECDSA.sol\\n     * @param digest    Keccak-256 hash digest of the signed message\\n     * @param signature Signature byte array associated with hash\\n     * @return Signer address\\n     */\\n    function recover(bytes32 digest, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        require(signature.length == 65, \\\"ECRecover: invalid signature length\\\");\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n        return recover(digest, v, r, s);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/interface/IERC1271.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Apache-2.0\\n *\\n * Copyright (c) 2023, Circle Internet Financial, LLC.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash          Hash of the data to be signed\\n     * @param signature     Signature byte array associated with the provided data hash\\n     * @return magicValue   bytes4 magic value 0x1626ba7e when function passes\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature)\\n        external\\n        view\\n        returns (bytes4 magicValue);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"/Users/aloysius.chan/Repositories/circlefin/stablecoin-evm-private-usdc-mainnet-base/contracts/util/SignatureChecker.sol\": {\r\n        \"SignatureChecker\": \"0x2D943E25e1859ED786AFe4AFB2B42e14EFAC691e\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
      "abi": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBlacklister\",\"type\":\"address\"}],\"name\":\"BlacklisterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMasterMinter\",\"type\":\"address\"}],\"name\":\"MasterMinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minterAllowedAmount\",\"type\":\"uint256\"}],\"name\":\"MinterConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMinter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"RescuerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"UnBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CANCEL_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECEIVE_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"authorizationState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"cancelAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minterAllowedAmount\",\"type\":\"uint256\"}],\"name\":\"configureMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decrement\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"increment\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenCurrency\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"newMasterMinter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newBlacklister\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lostAndFound\",\"type\":\"address\"}],\"name\":\"initializeV2_1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accountsToBlacklist\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"initializeV2_2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"minterAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"receiveWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"receiveWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"transferWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBlacklister\",\"type\":\"address\"}],\"name\":\"updateBlacklister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMasterMinter\",\"type\":\"address\"}],\"name\":\"updateMasterMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPauser\",\"type\":\"address\"}],\"name\":\"updatePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"updateRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
      "contract_name": "FiatTokenV2_2",
      "compiler_version": "v0.6.12+commit.27d51765",
      "optimization_used": "1",
      "runs": "10000000",
      "constructor_arguments": "",
      "evm_version": "istanbul",
      "library": "",
      "license_type": "",
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0xe9f853d2616ac6b04e5fc2b4be6eb654b9f224cd": {
      "address": "0xe9f853d2616ac6b04e5fc2b4be6eb654b9f224cd",
      "has_source_code": false,
      "source_code": null,
      "abi": "Contract source code not verified",
      "contract_name": "Unknown",
      "compiler_version": null,
      "optimization_used": null,
      "runs": null,
      "constructor_arguments": null,
      "evm_version": null,
      "library": null,
      "license_type": null,
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472": {
      "address": "0x6799246165c8ce1ed2e5cf8c494fa8e7a5de4472",
      "has_source_code": true,
      "source_code": "// File: contracts\\extensions\\interfaces\\IV3Oracle.sol\r\n\r\npragma solidity >=0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IV3Oracle {\r\n\tfunction oraclePriceSqrtX96(address token0, address token1) external returns (uint256);\r\n}\r\n\r\n// File: contracts\\extensions\\interfaces\\AggregatorInterface.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface AggregatorInterface {\r\n  function decimals() external view returns (uint8);\r\n  function latestAnswer() external view returns (int256);\r\n  function latestTimestamp() external view returns (uint256);\r\n  function latestRound() external view returns (uint256);\r\n  function description() external view returns (string memory);\r\n}\r\n\r\n// File: contracts\\interfaces\\IERC20.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n// File: contracts\\libraries\\SafeMath.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\r\n// Subject to the MIT license.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction underflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\libraries\\Math.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n// a library for performing various math operations\r\n// forked from: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/libraries/Math.sol\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\t\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        z = x > y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\extensions\\libraries\\StringHelpers.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\nlibrary StringHelpers {\r\n    function append(string memory a, string memory b) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(a, b));\r\n    }\r\n\r\n    /**\r\n     * Returns the first string if it is not-empty, otherwise the second.\r\n     */\r\n    function orElse(string memory a, string memory b) internal pure returns (string memory) {\r\n        if (bytes(a).length > 0) {\r\n            return a;\r\n        }\r\n        return b;\r\n    }\r\n\t\r\n    function equals(string memory a, string memory b) internal pure returns (bool) {\r\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\r\n    }\r\n}\r\n\r\n// File: contracts\\extensions\\ImpermaxV3OracleChainlink.sol\r\n\r\npragma solidity =0.5.16;\r\ncontract ImpermaxV3OracleChainlink is IV3Oracle {\r\n\tusing SafeMath for uint256;\r\n\tusing StringHelpers for string;\r\n\r\n\tuint constant Q128 = 2**128;\r\n\tuint constant Q96 = 2**96;\r\n\tuint constant Q48 = 2**48;\r\n\tuint constant Q32 = 2**32;\r\n\r\n\taddress public admin;\r\n\taddress public pendingAdmin;\r\n\t\r\n\taddress public fallbackOracle;\r\n\r\n\t// Once created, token sources are immutable\r\n\t// All sources should be USD denominated\r\n\tmapping(address => address) public tokenSources;\r\n\t\r\n\t// If this is true, it prevents the admin to add the wrong source for a token by mistake\r\n\t// The admin could still add malicious sources for new tokens -> always double check a source before adding it\r\n\tbool public verifyTokenSource;\r\n\t\r\n\tevent NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\tevent NewAdmin(address oldAdmin, address newAdmin);\r\n\tevent NewFallbackOracle(address oldFallbackOracle, address newFallbackOracle);\r\n\tevent SetVerifyTokenSource(bool enable);\r\n\tevent TokenSourceCreated(address token, address source);\r\n\t\r\n\tconstructor(address _admin) public {\r\n\t\tadmin = _admin;\r\n\t\tverifyTokenSource = true;\r\n\t\temit NewAdmin(address(0), _admin);\r\n\t\temit SetVerifyTokenSource(true);\r\n\t}\r\n\t\r\n\tfunction oraclePriceSqrtX96(address token0, address token1) external returns (uint256 priceSqrtX96) {\r\n\t\t// 1. get latest prices\r\n\t\taddress source0 = tokenSources[token0];\r\n\t\taddress source1 = tokenSources[token1];\r\n\t\tif (source0 == address(0) || source1 == address(0)) {\r\n\t\t\t// fallback would be unsafe\r\n\t\t\trevert(\"ImpermaxV3OracleChainlink: UNSUPPORTED_PAIR\");\r\n\t\t}\r\n\t\tint256 price0 = AggregatorInterface(source0).latestAnswer();\r\n\t\tint256 price1 = AggregatorInterface(source1).latestAnswer();\r\n\t\tif (price0 <= 0 || price1 <= 0) {\r\n\t\t\trequire(fallbackOracle != address(0), \"ImpermaxV3OracleChainlink: PRICE_CALCULATION_ERROR\");\r\n\t\t\treturn IV3Oracle(fallbackOracle).oraclePriceSqrtX96(token0, token1);\r\n\t\t}\r\n\t\t\r\n\t\t// 2. calculate delta decimals\r\n\t\tint256 totalDecimals0 = int256(IERC20(token0).decimals()) + AggregatorInterface(source0).decimals();\r\n\t\tint256 totalDecimals1 = int256(IERC20(token1).decimals()) + AggregatorInterface(source1).decimals();\r\n\t\tint256 deltaDecimals = totalDecimals0 - totalDecimals1;\r\n\t\t\r\n\t\t// 3. calculate the price and scale it based on delta decimals\r\n\t\tpriceSqrtX96 = Math.sqrt(uint256(price0).mul(Q128).div(uint256(price1))).mul(Q32);\r\n\t\tuint scaleX96 = Q96;\r\n\t\tuint deltaDecimalsAbs = uint(deltaDecimals > 0 ? deltaDecimals : -deltaDecimals);\r\n\t\tfor (uint i = 0; i < deltaDecimalsAbs; i++) {\r\n\t\t\tscaleX96 = scaleX96.mul(10);\r\n\t\t}\r\n\t\tscaleX96 = Math.sqrt(scaleX96).mul(Q48);\r\n\t\tif (deltaDecimals > 0) {\r\n\t\t\tpriceSqrtX96 = priceSqrtX96.mul(Q96).div(scaleX96);\r\n\t\t} else {\r\n\t\t\tpriceSqrtX96 = priceSqrtX96.mul(scaleX96).div(Q96);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/*** Admin ***/\r\n\t\r\n\tfunction _addTokenSources(address[] calldata tokens, address[] calldata sources) external {\r\n\t\trequire(msg.sender == admin, \"ImpermaxV3OracleChainlink: UNAUTHORIZED\");\r\n\t\trequire(tokens.length == sources.length, \"ImpermaxV3OracleChainlink: INCONSISTENT_PARAMS_LENGTH\");\r\n\t\tfor (uint i = 0; i < tokens.length; i++) {\r\n\t\t\trequire(tokenSources[tokens[i]] == address(0), \"ImpermaxV3OracleChainlink: TOKEN_INITIALIZED\");\r\n\t\t\tif (verifyTokenSource) {\r\n\t\t\t\tint256 price = AggregatorInterface(sources[i]).latestAnswer();\r\n\t\t\t\trequire(price > 100 && price < 2**112, \"ImpermaxV3OracleChainlink: PRICE_OUT_OF_RANGE\");\r\n\t\t\t\tint256 totalDecimals = int256(IERC20(tokens[i]).decimals()) + AggregatorInterface(sources[i]).decimals();\r\n\t\t\t\trequire(totalDecimals >= 8 && totalDecimals <= 48, \"ImpermaxV3OracleChainlink: DECIMALS_OUT_OF_RANGE\");\r\n\t\t\t\tstring memory symbol = IERC20(tokens[i]).symbol();\r\n\t\t\t\tstring memory description = AggregatorInterface(sources[i]).description();\r\n\t\t\t\trequire(description.equals(symbol.append(\" / USD\")), \"ImpermaxV3OracleChainlink: INCONSISTENT_DESCRIPTION\");\r\n\t\t\t}\r\n\t\t\ttokenSources[tokens[i]] = sources[i];\r\n\t\t\temit TokenSourceCreated(tokens[i], sources[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _setFallbackOracle(address newFallbackOracle) external {\r\n\t\trequire(msg.sender == admin, \"ImpermaxV3OracleChainlink: UNAUTHORIZED\");\r\n\t\taddress oldFallbackOracle = fallbackOracle;\r\n\t\tfallbackOracle = newFallbackOracle;\r\n\t\temit NewFallbackOracle(oldFallbackOracle, newFallbackOracle);\r\n\t}\r\n\t\r\n\tfunction _setVerifyTokenSource(bool enable) external {\r\n\t\trequire(msg.sender == admin, \"ImpermaxV3OracleChainlink: UNAUTHORIZED\");\r\n\t\tverifyTokenSource = enable;\r\n\t\temit SetVerifyTokenSource(enable);\r\n\t}\r\n\t\r\n\tfunction _setPendingAdmin(address newPendingAdmin) external {\r\n\t\trequire(msg.sender == admin, \"ImpermaxV3OracleChainlink: UNAUTHORIZED\");\r\n\t\taddress oldPendingAdmin = pendingAdmin;\r\n\t\tpendingAdmin = newPendingAdmin;\r\n\t\temit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n\t}\r\n\r\n\tfunction _acceptAdmin() external {\r\n\t\trequire(msg.sender == pendingAdmin, \"ImpermaxV3OracleChainlink: UNAUTHORIZED\");\r\n\t\taddress oldAdmin = admin;\r\n\t\taddress oldPendingAdmin = pendingAdmin;\r\n\t\tadmin = pendingAdmin;\r\n\t\tpendingAdmin = address(0);\r\n\t\temit NewAdmin(oldAdmin, admin);\r\n\t\temit NewPendingAdmin(oldPendingAdmin, address(0));\r\n\t}\r\n}",
      "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFallbackOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFallbackOracle\",\"type\":\"address\"}],\"name\":\"NewFallbackOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"SetVerifyTokenSource\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"TokenSourceCreated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"}],\"name\":\"_addTokenSources\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFallbackOracle\",\"type\":\"address\"}],\"name\":\"_setFallbackOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"_setVerifyTokenSource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fallbackOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"oraclePriceSqrtX96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceSqrtX96\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSources\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"verifyTokenSource\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "contract_name": "ImpermaxV3OracleChainlink",
      "compiler_version": "v0.5.16+commit.9c3226ce",
      "optimization_used": "1",
      "runs": "999999",
      "constructor_arguments": "000000000000000000000000ee5ca68bae98c3e36bfbfeffb104f22e4ff34cf7",
      "evm_version": "Default",
      "library": "",
      "license_type": "BSL 1.1",
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b": {
      "address": "0x7e860098f58bbfc8648a4311b374b1d669a2bc6b",
      "has_source_code": true,
      "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"EACAggregatorProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"./AggregatorProxy.sol\\\";\\nimport \\\"./interfaces/AccessControllerInterface.sol\\\";\\n\\n/**\\n * @title External Access Controlled Aggregator Proxy\\n * @notice A trusted proxy for updating where current answers are read from\\n * @notice This contract provides a consistent address for the\\n * Aggregator and AggregatorV3Interface but delegates where it reads from to the owner, who is\\n * trusted to update it.\\n * @notice Only access enabled addresses are allowed to access getters for\\n * aggregated answers and round information.\\n */\\ncontract EACAggregatorProxy is AggregatorProxy {\\n\\n  AccessControllerInterface public accessController;\\n\\n  constructor(\\n    address _aggregator,\\n    address _accessController\\n  )\\n    public\\n    AggregatorProxy(_aggregator)\\n  {\\n    setController(_accessController);\\n  }\\n\\n  /**\\n   * @notice Allows the owner to update the accessController contract address.\\n   * @param _accessController The new address for the accessController contract\\n   */\\n  function setController(address _accessController)\\n    public\\n    onlyOwner()\\n  {\\n    accessController = AccessControllerInterface(_accessController);\\n  }\\n\\n  /**\\n   * @notice Reads the current answer from aggregator delegated to.\\n   * @dev overridden function to add the checkAccess() modifier\\n   *\\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended latestRoundData\\n   * instead which includes better verification information.\\n   */\\n  function latestAnswer()\\n    public\\n    view\\n    override\\n    checkAccess()\\n    returns (int256)\\n  {\\n    return super.latestAnswer();\\n  }\\n\\n  /**\\n   * @notice get the latest completed round where the answer was updated. This\\n   * ID includes the proxy's phase, to make sure round IDs increase even when\\n   * switching to a newly deployed aggregator.\\n   *\\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended latestRoundData\\n   * instead which includes better verification information.\\n   */\\n  function latestTimestamp()\\n    public\\n    view\\n    override\\n    checkAccess()\\n    returns (uint256)\\n  {\\n    return super.latestTimestamp();\\n  }\\n\\n  /**\\n   * @notice get past rounds answers\\n   * @param _roundId the answer number to retrieve the answer for\\n   * @dev overridden function to add the checkAccess() modifier\\n   *\\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended getRoundData\\n   * instead which includes better verification information.\\n   */\\n  function getAnswer(uint256 _roundId)\\n    public\\n    view\\n    override\\n    checkAccess()\\n    returns (int256)\\n  {\\n    return super.getAnswer(_roundId);\\n  }\\n\\n  /**\\n   * @notice get block timestamp when an answer was last updated\\n   * @param _roundId the answer number to retrieve the updated timestamp for\\n   * @dev overridden function to add the checkAccess() modifier\\n   *\\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended getRoundData\\n   * instead which includes better verification information.\\n   */\\n  function getTimestamp(uint256 _roundId)\\n    public\\n    view\\n    override\\n    checkAccess()\\n    returns (uint256)\\n  {\\n    return super.getTimestamp(_roundId);\\n  }\\n\\n  /**\\n   * @notice get the latest completed round where the answer was updated\\n   * @dev overridden function to add the checkAccess() modifier\\n   *\\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended latestRoundData\\n   * instead which includes better verification information.\\n   */\\n  function latestRound()\\n    public\\n    view\\n    override\\n    checkAccess()\\n    returns (uint256)\\n  {\\n    return super.latestRound();\\n  }\\n\\n  /**\\n   * @notice get data about a round. Consumers are encouraged to check\\n   * that they're receiving fresh data by inspecting the updatedAt and\\n   * answeredInRound return values.\\n   * Note that different underlying implementations of AggregatorV3Interface\\n   * have slightly different semantics for some of the return values. Consumers\\n   * should determine what implementations they expect to receive\\n   * data from and validate that they can properly handle return data from all\\n   * of them.\\n   * @param _roundId the round ID to retrieve the round data for\\n   * @return roundId is the round ID from the aggregator for which the data was\\n   * retrieved combined with a phase to ensure that round IDs get larger as\\n   * time moves forward.\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @dev Note that answer and updatedAt may change between queries.\\n   */\\n  function getRoundData(uint80 _roundId)\\n    public\\n    view\\n    checkAccess()\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return super.getRoundData(_roundId);\\n  }\\n\\n  /**\\n   * @notice get data about the latest round. Consumers are encouraged to check\\n   * that they're receiving fresh data by inspecting the updatedAt and\\n   * answeredInRound return values.\\n   * Note that different underlying implementations of AggregatorV3Interface\\n   * have slightly different semantics for some of the return values. Consumers\\n   * should determine what implementations they expect to receive\\n   * data from and validate that they can properly handle return data from all\\n   * of them.\\n   * @return roundId is the round ID from the aggregator for which the data was\\n   * retrieved combined with a phase to ensure that round IDs get larger as\\n   * time moves forward.\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @dev Note that answer and updatedAt may change between queries.\\n   */\\n  function latestRoundData()\\n    public\\n    view\\n    checkAccess()\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return super.latestRoundData();\\n  }\\n\\n  /**\\n   * @notice Used if an aggregator contract has been proposed.\\n   * @param _roundId the round ID to retrieve the round data for\\n   * @return roundId is the round ID for which data was retrieved\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n  */\\n  function proposedGetRoundData(uint80 _roundId)\\n    public\\n    view\\n    checkAccess()\\n    hasProposal()\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return super.proposedGetRoundData(_roundId);\\n  }\\n\\n  /**\\n   * @notice Used if an aggregator contract has been proposed.\\n   * @return roundId is the round ID for which data was retrieved\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n  */\\n  function proposedLatestRoundData()\\n    public\\n    view\\n    checkAccess()\\n    hasProposal()\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return super.proposedLatestRoundData();\\n  }\\n\\n  /**\\n   * @dev reverts if the caller does not have access by the accessController\\n   * contract or is the contract itself.\\n   */\\n  modifier checkAccess() {\\n    AccessControllerInterface ac = accessController;\\n    require(address(ac) == address(0) || ac.hasAccess(msg.sender, msg.data), \\\"No access\\\");\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"AggregatorProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./interfaces/AggregatorV2V3Interface.sol\\\";\\n\\n/**\\n * @title A trusted proxy for updating where current answers are read from\\n * @notice This contract provides a consistent address for the\\n * CurrentAnwerInterface but delegates where it reads from to the owner, who is\\n * trusted to update it.\\n */\\ncontract AggregatorProxy is AggregatorV2V3Interface, Owned {\\n\\n  struct Phase {\\n    uint16 id;\\n    AggregatorV2V3Interface aggregator;\\n  }\\n  Phase private currentPhase;\\n  AggregatorV2V3Interface public proposedAggregator;\\n  mapping(uint16 => AggregatorV2V3Interface) public phaseAggregators;\\n\\n  uint256 constant private PHASE_OFFSET = 64;\\n  uint256 constant private PHASE_SIZE = 16;\\n  uint256 constant private MAX_ID = 2**(PHASE_OFFSET+PHASE_SIZE) - 1;\\n\\n  constructor(address _aggregator) public Owned() {\\n    setAggregator(_aggregator);\\n  }\\n\\n  /**\\n   * @notice Reads the current answer from aggregator delegated to.\\n   *\\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended latestRoundData\\n   * instead which includes better verification information.\\n   */\\n  function latestAnswer()\\n    public\\n    view\\n    virtual\\n    override\\n    returns (int256 answer)\\n  {\\n    return currentPhase.aggregator.latestAnswer();\\n  }\\n\\n  /**\\n   * @notice Reads the last updated height from aggregator delegated to.\\n   *\\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended latestRoundData\\n   * instead which includes better verification information.\\n   */\\n  function latestTimestamp()\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256 updatedAt)\\n  {\\n    return currentPhase.aggregator.latestTimestamp();\\n  }\\n\\n  /**\\n   * @notice get past rounds answers\\n   * @param _roundId the answer number to retrieve the answer for\\n   *\\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended getRoundData\\n   * instead which includes better verification information.\\n   */\\n  function getAnswer(uint256 _roundId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (int256 answer)\\n  {\\n    if (_roundId > MAX_ID) return 0;\\n\\n    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\\n    AggregatorV2V3Interface aggregator = phaseAggregators[phaseId];\\n    if (address(aggregator) == address(0)) return 0;\\n\\n    return aggregator.getAnswer(aggregatorRoundId);\\n  }\\n\\n  /**\\n   * @notice get block timestamp when an answer was last updated\\n   * @param _roundId the answer number to retrieve the updated timestamp for\\n   *\\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended getRoundData\\n   * instead which includes better verification information.\\n   */\\n  function getTimestamp(uint256 _roundId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256 updatedAt)\\n  {\\n    if (_roundId > MAX_ID) return 0;\\n\\n    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\\n    AggregatorV2V3Interface aggregator = phaseAggregators[phaseId];\\n    if (address(aggregator) == address(0)) return 0;\\n\\n    return aggregator.getTimestamp(aggregatorRoundId);\\n  }\\n\\n  /**\\n   * @notice get the latest completed round where the answer was updated. This\\n   * ID includes the proxy's phase, to make sure round IDs increase even when\\n   * switching to a newly deployed aggregator.\\n   *\\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended latestRoundData\\n   * instead which includes better verification information.\\n   */\\n  function latestRound()\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256 roundId)\\n  {\\n    Phase memory phase = currentPhase; // cache storage reads\\n    return addPhase(phase.id, uint64(phase.aggregator.latestRound()));\\n  }\\n\\n  /**\\n   * @notice get data about a round. Consumers are encouraged to check\\n   * that they're receiving fresh data by inspecting the updatedAt and\\n   * answeredInRound return values.\\n   * Note that different underlying implementations of AggregatorV3Interface\\n   * have slightly different semantics for some of the return values. Consumers\\n   * should determine what implementations they expect to receive\\n   * data from and validate that they can properly handle return data from all\\n   * of them.\\n   * @param _roundId the requested round ID as presented through the proxy, this\\n   * is made up of the aggregator's round ID with the phase ID encoded in the\\n   * two highest order bytes\\n   * @return roundId is the round ID from the aggregator for which the data was\\n   * retrieved combined with an phase to ensure that round IDs get larger as\\n   * time moves forward.\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @dev Note that answer and updatedAt may change between queries.\\n   */\\n  function getRoundData(uint80 _roundId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\\n\\n    (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 ansIn\\n    ) = phaseAggregators[phaseId].getRoundData(aggregatorRoundId);\\n\\n    return addPhaseIds(roundId, answer, startedAt, updatedAt, ansIn, phaseId);\\n  }\\n\\n  /**\\n   * @notice get data about the latest round. Consumers are encouraged to check\\n   * that they're receiving fresh data by inspecting the updatedAt and\\n   * answeredInRound return values.\\n   * Note that different underlying implementations of AggregatorV3Interface\\n   * have slightly different semantics for some of the return values. Consumers\\n   * should determine what implementations they expect to receive\\n   * data from and validate that they can properly handle return data from all\\n   * of them.\\n   * @return roundId is the round ID from the aggregator for which the data was\\n   * retrieved combined with an phase to ensure that round IDs get larger as\\n   * time moves forward.\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @dev Note that answer and updatedAt may change between queries.\\n   */\\n  function latestRoundData()\\n    public\\n    view\\n    virtual\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    Phase memory current = currentPhase; // cache storage reads\\n\\n    (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 ansIn\\n    ) = current.aggregator.latestRoundData();\\n\\n    return addPhaseIds(roundId, answer, startedAt, updatedAt, ansIn, current.id);\\n  }\\n\\n  /**\\n   * @notice Used if an aggregator contract has been proposed.\\n   * @param _roundId the round ID to retrieve the round data for\\n   * @return roundId is the round ID for which data was retrieved\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n  */\\n  function proposedGetRoundData(uint80 _roundId)\\n    public\\n    view\\n    virtual\\n    hasProposal()\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return proposedAggregator.getRoundData(_roundId);\\n  }\\n\\n  /**\\n   * @notice Used if an aggregator contract has been proposed.\\n   * @return roundId is the round ID for which data was retrieved\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n  */\\n  function proposedLatestRoundData()\\n    public\\n    view\\n    virtual\\n    hasProposal()\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return proposedAggregator.latestRoundData();\\n  }\\n\\n  /**\\n   * @notice returns the current phase's aggregator address.\\n   */\\n  function aggregator()\\n    external\\n    view\\n    returns (address)\\n  {\\n    return address(currentPhase.aggregator);\\n  }\\n\\n  /**\\n   * @notice returns the current phase's ID.\\n   */\\n  function phaseId()\\n    external\\n    view\\n    returns (uint16)\\n  {\\n    return currentPhase.id;\\n  }\\n\\n  /**\\n   * @notice represents the number of decimals the aggregator responses represent.\\n   */\\n  function decimals()\\n    external\\n    view\\n    override\\n    returns (uint8)\\n  {\\n    return currentPhase.aggregator.decimals();\\n  }\\n\\n  /**\\n   * @notice the version number representing the type of aggregator the proxy\\n   * points to.\\n   */\\n  function version()\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return currentPhase.aggregator.version();\\n  }\\n\\n  /**\\n   * @notice returns the description of the aggregator the proxy points to.\\n   */\\n  function description()\\n    external\\n    view\\n    override\\n    returns (string memory)\\n  {\\n    return currentPhase.aggregator.description();\\n  }\\n\\n  /**\\n   * @notice Allows the owner to propose a new address for the aggregator\\n   * @param _aggregator The new address for the aggregator contract\\n   */\\n  function proposeAggregator(address _aggregator)\\n    external\\n    onlyOwner()\\n  {\\n    proposedAggregator = AggregatorV2V3Interface(_aggregator);\\n  }\\n\\n  /**\\n   * @notice Allows the owner to confirm and change the address\\n   * to the proposed aggregator\\n   * @dev Reverts if the given address doesn't match what was previously\\n   * proposed\\n   * @param _aggregator The new address for the aggregator contract\\n   */\\n  function confirmAggregator(address _aggregator)\\n    external\\n    onlyOwner()\\n  {\\n    require(_aggregator == address(proposedAggregator), \\\"Invalid proposed aggregator\\\");\\n    delete proposedAggregator;\\n    setAggregator(_aggregator);\\n  }\\n\\n\\n  /*\\n   * Internal\\n   */\\n\\n  function setAggregator(address _aggregator)\\n    internal\\n  {\\n    uint16 id = currentPhase.id + 1;\\n    currentPhase = Phase(id, AggregatorV2V3Interface(_aggregator));\\n    phaseAggregators[id] = AggregatorV2V3Interface(_aggregator);\\n  }\\n\\n  function addPhase(\\n    uint16 _phase,\\n    uint64 _originalId\\n  )\\n    internal\\n    view\\n    returns (uint80)\\n  {\\n    return uint80(uint256(_phase) << PHASE_OFFSET | _originalId);\\n  }\\n\\n  function parseIds(\\n    uint256 _roundId\\n  )\\n    internal\\n    view\\n    returns (uint16, uint64)\\n  {\\n    uint16 phaseId = uint16(_roundId >> PHASE_OFFSET);\\n    uint64 aggregatorRoundId = uint64(_roundId);\\n\\n    return (phaseId, aggregatorRoundId);\\n  }\\n\\n  function addPhaseIds(\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound,\\n      uint16 phaseId\\n  )\\n    internal\\n    view\\n    returns (uint80, int256, uint256, uint256, uint80)\\n  {\\n    return (\\n      addPhase(phaseId, uint64(roundId)),\\n      answer,\\n      startedAt,\\n      updatedAt,\\n      addPhase(phaseId, uint64(answeredInRound))\\n    );\\n  }\\n\\n  /*\\n   * Modifiers\\n   */\\n\\n  modifier hasProposal() {\\n    require(address(proposedAggregator) != address(0), \\\"No proposed aggregator present\\\");\\n    _;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"Owned.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @title The Owned contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract Owned {\\n\\n  address payable public owner;\\n  address private pendingOwner;\\n\\n  event OwnershipTransferRequested(\\n    address indexed from,\\n    address indexed to\\n  );\\n  event OwnershipTransferred(\\n    address indexed from,\\n    address indexed to\\n  );\\n\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address _to)\\n    external\\n    onlyOwner()\\n  {\\n    pendingOwner = _to;\\n\\n    emit OwnershipTransferRequested(owner, _to);\\n  }\\n\\n  /**\\n   * @dev Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership()\\n    external\\n  {\\n    require(msg.sender == pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = owner;\\n    owner = msg.sender;\\n    pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @dev Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"Only callable by owner\\\");\\n    _;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"interfaces/AggregatorV2V3Interface.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\\n{\\n}\\n\"\r\n    },\r\n    \"interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n  function latestTimestamp() external view returns (uint256);\\n  function latestRound() external view returns (uint256);\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    },\r\n    \"interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"interfaces/AccessControllerInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface AccessControllerInterface {\\n  function hasAccess(address user, bytes calldata data) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
      "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accessController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessController\",\"outputs\":[{\"internalType\":\"contract AccessControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"confirmAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"phaseAggregators\",\"outputs\":[{\"internalType\":\"contract AggregatorV2V3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"proposeAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedAggregator\",\"outputs\":[{\"internalType\":\"contract AggregatorV2V3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"proposedGetRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedLatestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "contract_name": "EACAggregatorProxy",
      "compiler_version": "v0.6.6+commit.6c089d02",
      "optimization_used": "1",
      "runs": "1000000",
      "constructor_arguments": "",
      "evm_version": "istanbul",
      "library": "",
      "license_type": "MIT",
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0x33128a8fc17869897dce68ed026d694621f6fdfd": {
      "address": "0x33128a8fc17869897dce68ed026d694621f6fdfd",
      "has_source_code": true,
      "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/UniswapV3Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.7.6;\\n\\nimport './interfaces/IUniswapV3Factory.sol';\\n\\nimport './UniswapV3PoolDeployer.sol';\\nimport './NoDelegateCall.sol';\\n\\nimport './UniswapV3Pool.sol';\\n\\n/// @title Canonical Uniswap V3 factory\\n/// @notice Deploys Uniswap V3 pools and manages ownership and control over pool protocol fees\\ncontract UniswapV3Factory is IUniswapV3Factory, UniswapV3PoolDeployer, NoDelegateCall {\\n    /// @inheritdoc IUniswapV3Factory\\n    address public override owner;\\n\\n    /// @inheritdoc IUniswapV3Factory\\n    mapping(uint24 => int24) public override feeAmountTickSpacing;\\n    /// @inheritdoc IUniswapV3Factory\\n    mapping(address => mapping(address => mapping(uint24 => address))) public override getPool;\\n\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnerChanged(address(0), msg.sender);\\n\\n        feeAmountTickSpacing[500] = 10;\\n        emit FeeAmountEnabled(500, 10);\\n        feeAmountTickSpacing[3000] = 60;\\n        emit FeeAmountEnabled(3000, 60);\\n        feeAmountTickSpacing[10000] = 200;\\n        emit FeeAmountEnabled(10000, 200);\\n    }\\n\\n    /// @inheritdoc IUniswapV3Factory\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external override noDelegateCall returns (address pool) {\\n        require(tokenA != tokenB);\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0));\\n        int24 tickSpacing = feeAmountTickSpacing[fee];\\n        require(tickSpacing != 0);\\n        require(getPool[token0][token1][fee] == address(0));\\n        pool = deploy(address(this), token0, token1, fee, tickSpacing);\\n        getPool[token0][token1][fee] = pool;\\n        // populate mapping in the reverse direction, deliberate choice to avoid the cost of comparing addresses\\n        getPool[token1][token0][fee] = pool;\\n        emit PoolCreated(token0, token1, fee, tickSpacing, pool);\\n    }\\n\\n    /// @inheritdoc IUniswapV3Factory\\n    function setOwner(address _owner) external override {\\n        require(msg.sender == owner);\\n        emit OwnerChanged(owner, _owner);\\n        owner = _owner;\\n    }\\n\\n    /// @inheritdoc IUniswapV3Factory\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) public override {\\n        require(msg.sender == owner);\\n        require(fee < 1000000);\\n        // tick spacing is capped at 16384 to prevent the situation where tickSpacing is so large that\\n        // TickBitmap#nextInitializedTickWithinOneWord overflows int24 container from a valid tick\\n        // 16384 ticks represents a >5x price change with ticks of 1 bips\\n        require(tickSpacing > 0 && tickSpacing < 16384);\\n        require(feeAmountTickSpacing[fee] == 0);\\n\\n        feeAmountTickSpacing[fee] = tickSpacing;\\n        emit FeeAmountEnabled(fee, tickSpacing);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\"\r\n    },\r\n    \"contracts/UniswapV3PoolDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.7.6;\\n\\nimport './interfaces/IUniswapV3PoolDeployer.sol';\\n\\nimport './UniswapV3Pool.sol';\\n\\ncontract UniswapV3PoolDeployer is IUniswapV3PoolDeployer {\\n    struct Parameters {\\n        address factory;\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickSpacing;\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolDeployer\\n    Parameters public override parameters;\\n\\n    /// @dev Deploys a pool with the given parameters by transiently setting the parameters storage slot and then\\n    /// clearing it after deploying the pool.\\n    /// @param factory The contract address of the Uniswap V3 factory\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The spacing between usable ticks\\n    function deploy(\\n        address factory,\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        int24 tickSpacing\\n    ) internal returns (address pool) {\\n        parameters = Parameters({factory: factory, token0: token0, token1: token1, fee: fee, tickSpacing: tickSpacing});\\n        pool = address(new UniswapV3Pool{salt: keccak256(abi.encode(token0, token1, fee))}());\\n        delete parameters;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NoDelegateCall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.7.6;\\n\\n/// @title Prevents delegatecall to a contract\\n/// @notice Base contract that provides a modifier for preventing delegatecall to methods in a child contract\\nabstract contract NoDelegateCall {\\n    /// @dev The original address of this contract\\n    address private immutable original;\\n\\n    constructor() {\\n        // Immutables are computed in the init code of the contract, and then inlined into the deployed bytecode.\\n        // In other words, this variable won't change when it's checked at runtime.\\n        original = address(this);\\n    }\\n\\n    /// @dev Private method is used instead of inlining into modifier because modifiers are copied into each method,\\n    ///     and the use of immutable means the address bytes are copied in every place the modifier is used.\\n    function checkNotDelegateCall() private view {\\n        require(address(this) == original);\\n    }\\n\\n    /// @notice Prevents delegatecall into the modified method\\n    modifier noDelegateCall() {\\n        checkNotDelegateCall();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/UniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.7.6;\\n\\nimport './interfaces/IUniswapV3Pool.sol';\\n\\nimport './NoDelegateCall.sol';\\n\\nimport './libraries/LowGasSafeMath.sol';\\nimport './libraries/SafeCast.sol';\\nimport './libraries/Tick.sol';\\nimport './libraries/TickBitmap.sol';\\nimport './libraries/Position.sol';\\nimport './libraries/Oracle.sol';\\n\\nimport './libraries/FullMath.sol';\\nimport './libraries/FixedPoint128.sol';\\nimport './libraries/TransferHelper.sol';\\nimport './libraries/TickMath.sol';\\nimport './libraries/LiquidityMath.sol';\\nimport './libraries/SqrtPriceMath.sol';\\nimport './libraries/SwapMath.sol';\\n\\nimport './interfaces/IUniswapV3PoolDeployer.sol';\\nimport './interfaces/IUniswapV3Factory.sol';\\nimport './interfaces/IERC20Minimal.sol';\\nimport './interfaces/callback/IUniswapV3MintCallback.sol';\\nimport './interfaces/callback/IUniswapV3SwapCallback.sol';\\nimport './interfaces/callback/IUniswapV3FlashCallback.sol';\\n\\ncontract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {\\n    using LowGasSafeMath for uint256;\\n    using LowGasSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using Tick for mapping(int24 => Tick.Info);\\n    using TickBitmap for mapping(int16 => uint256);\\n    using Position for mapping(bytes32 => Position.Info);\\n    using Position for Position.Info;\\n    using Oracle for Oracle.Observation[65535];\\n\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    address public immutable override factory;\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    address public immutable override token0;\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    address public immutable override token1;\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    uint24 public immutable override fee;\\n\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    int24 public immutable override tickSpacing;\\n\\n    /// @inheritdoc IUniswapV3PoolImmutables\\n    uint128 public immutable override maxLiquidityPerTick;\\n\\n    struct Slot0 {\\n        // the current price\\n        uint160 sqrtPriceX96;\\n        // the current tick\\n        int24 tick;\\n        // the most-recently updated index of the observations array\\n        uint16 observationIndex;\\n        // the current maximum number of observations that are being stored\\n        uint16 observationCardinality;\\n        // the next maximum number of observations to store, triggered in observations.write\\n        uint16 observationCardinalityNext;\\n        // the current protocol fee as a percentage of the swap fee taken on withdrawal\\n        // represented as an integer denominator (1/x)%\\n        uint8 feeProtocol;\\n        // whether the pool is locked\\n        bool unlocked;\\n    }\\n    /// @inheritdoc IUniswapV3PoolState\\n    Slot0 public override slot0;\\n\\n    /// @inheritdoc IUniswapV3PoolState\\n    uint256 public override feeGrowthGlobal0X128;\\n    /// @inheritdoc IUniswapV3PoolState\\n    uint256 public override feeGrowthGlobal1X128;\\n\\n    // accumulated protocol fees in token0/token1 units\\n    struct ProtocolFees {\\n        uint128 token0;\\n        uint128 token1;\\n    }\\n    /// @inheritdoc IUniswapV3PoolState\\n    ProtocolFees public override protocolFees;\\n\\n    /// @inheritdoc IUniswapV3PoolState\\n    uint128 public override liquidity;\\n\\n    /// @inheritdoc IUniswapV3PoolState\\n    mapping(int24 => Tick.Info) public override ticks;\\n    /// @inheritdoc IUniswapV3PoolState\\n    mapping(int16 => uint256) public override tickBitmap;\\n    /// @inheritdoc IUniswapV3PoolState\\n    mapping(bytes32 => Position.Info) public override positions;\\n    /// @inheritdoc IUniswapV3PoolState\\n    Oracle.Observation[65535] public override observations;\\n\\n    /// @dev Mutually exclusive reentrancy protection into the pool to/from a method. This method also prevents entrance\\n    /// to a function before the pool is initialized. The reentrancy guard is required throughout the contract because\\n    /// we use balance checks to determine the payment status of interactions such as mint, swap and flash.\\n    modifier lock() {\\n        require(slot0.unlocked, 'LOK');\\n        slot0.unlocked = false;\\n        _;\\n        slot0.unlocked = true;\\n    }\\n\\n    /// @dev Prevents calling a function from anyone except the address returned by IUniswapV3Factory#owner()\\n    modifier onlyFactoryOwner() {\\n        require(msg.sender == IUniswapV3Factory(factory).owner());\\n        _;\\n    }\\n\\n    constructor() {\\n        int24 _tickSpacing;\\n        (factory, token0, token1, fee, _tickSpacing) = IUniswapV3PoolDeployer(msg.sender).parameters();\\n        tickSpacing = _tickSpacing;\\n\\n        maxLiquidityPerTick = Tick.tickSpacingToMaxLiquidityPerTick(_tickSpacing);\\n    }\\n\\n    /// @dev Common checks for valid tick inputs.\\n    function checkTicks(int24 tickLower, int24 tickUpper) private pure {\\n        require(tickLower < tickUpper, 'TLU');\\n        require(tickLower >= TickMath.MIN_TICK, 'TLM');\\n        require(tickUpper <= TickMath.MAX_TICK, 'TUM');\\n    }\\n\\n    /// @dev Returns the block timestamp truncated to 32 bits, i.e. mod 2**32. This method is overridden in tests.\\n    function _blockTimestamp() internal view virtual returns (uint32) {\\n        return uint32(block.timestamp); // truncation is desired\\n    }\\n\\n    /// @dev Get the pool's balance of token0\\n    /// @dev This function is gas optimized to avoid a redundant extcodesize check in addition to the returndatasize\\n    /// check\\n    function balance0() private view returns (uint256) {\\n        (bool success, bytes memory data) = token0.staticcall(\\n            abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, address(this))\\n        );\\n        require(success && data.length >= 32);\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Get the pool's balance of token1\\n    /// @dev This function is gas optimized to avoid a redundant extcodesize check in addition to the returndatasize\\n    /// check\\n    function balance1() private view returns (uint256) {\\n        (bool success, bytes memory data) = token1.staticcall(\\n            abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, address(this))\\n        );\\n        require(success && data.length >= 32);\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolDerivedState\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        override\\n        noDelegateCall\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        )\\n    {\\n        checkTicks(tickLower, tickUpper);\\n\\n        int56 tickCumulativeLower;\\n        int56 tickCumulativeUpper;\\n        uint160 secondsPerLiquidityOutsideLowerX128;\\n        uint160 secondsPerLiquidityOutsideUpperX128;\\n        uint32 secondsOutsideLower;\\n        uint32 secondsOutsideUpper;\\n\\n        {\\n            Tick.Info storage lower = ticks[tickLower];\\n            Tick.Info storage upper = ticks[tickUpper];\\n            bool initializedLower;\\n            (tickCumulativeLower, secondsPerLiquidityOutsideLowerX128, secondsOutsideLower, initializedLower) = (\\n                lower.tickCumulativeOutside,\\n                lower.secondsPerLiquidityOutsideX128,\\n                lower.secondsOutside,\\n                lower.initialized\\n            );\\n            require(initializedLower);\\n\\n            bool initializedUpper;\\n            (tickCumulativeUpper, secondsPerLiquidityOutsideUpperX128, secondsOutsideUpper, initializedUpper) = (\\n                upper.tickCumulativeOutside,\\n                upper.secondsPerLiquidityOutsideX128,\\n                upper.secondsOutside,\\n                upper.initialized\\n            );\\n            require(initializedUpper);\\n        }\\n\\n        Slot0 memory _slot0 = slot0;\\n\\n        if (_slot0.tick < tickLower) {\\n            return (\\n                tickCumulativeLower - tickCumulativeUpper,\\n                secondsPerLiquidityOutsideLowerX128 - secondsPerLiquidityOutsideUpperX128,\\n                secondsOutsideLower - secondsOutsideUpper\\n            );\\n        } else if (_slot0.tick < tickUpper) {\\n            uint32 time = _blockTimestamp();\\n            (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) = observations.observeSingle(\\n                time,\\n                0,\\n                _slot0.tick,\\n                _slot0.observationIndex,\\n                liquidity,\\n                _slot0.observationCardinality\\n            );\\n            return (\\n                tickCumulative - tickCumulativeLower - tickCumulativeUpper,\\n                secondsPerLiquidityCumulativeX128 -\\n                    secondsPerLiquidityOutsideLowerX128 -\\n                    secondsPerLiquidityOutsideUpperX128,\\n                time - secondsOutsideLower - secondsOutsideUpper\\n            );\\n        } else {\\n            return (\\n                tickCumulativeUpper - tickCumulativeLower,\\n                secondsPerLiquidityOutsideUpperX128 - secondsPerLiquidityOutsideLowerX128,\\n                secondsOutsideUpper - secondsOutsideLower\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolDerivedState\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        override\\n        noDelegateCall\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s)\\n    {\\n        return\\n            observations.observe(\\n                _blockTimestamp(),\\n                secondsAgos,\\n                slot0.tick,\\n                slot0.observationIndex,\\n                liquidity,\\n                slot0.observationCardinality\\n            );\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext)\\n        external\\n        override\\n        lock\\n        noDelegateCall\\n    {\\n        uint16 observationCardinalityNextOld = slot0.observationCardinalityNext; // for the event\\n        uint16 observationCardinalityNextNew = observations.grow(\\n            observationCardinalityNextOld,\\n            observationCardinalityNext\\n        );\\n        slot0.observationCardinalityNext = observationCardinalityNextNew;\\n        if (observationCardinalityNextOld != observationCardinalityNextNew)\\n            emit IncreaseObservationCardinalityNext(observationCardinalityNextOld, observationCardinalityNextNew);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    /// @dev not locked because it initializes unlocked\\n    function initialize(uint160 sqrtPriceX96) external override {\\n        require(slot0.sqrtPriceX96 == 0, 'AI');\\n\\n        int24 tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96);\\n\\n        (uint16 cardinality, uint16 cardinalityNext) = observations.initialize(_blockTimestamp());\\n\\n        slot0 = Slot0({\\n            sqrtPriceX96: sqrtPriceX96,\\n            tick: tick,\\n            observationIndex: 0,\\n            observationCardinality: cardinality,\\n            observationCardinalityNext: cardinalityNext,\\n            feeProtocol: 0,\\n            unlocked: true\\n        });\\n\\n        emit Initialize(sqrtPriceX96, tick);\\n    }\\n\\n    struct ModifyPositionParams {\\n        // the address that owns the position\\n        address owner;\\n        // the lower and upper tick of the position\\n        int24 tickLower;\\n        int24 tickUpper;\\n        // any change in liquidity\\n        int128 liquidityDelta;\\n    }\\n\\n    /// @dev Effect some changes to a position\\n    /// @param params the position details and the change to the position's liquidity to effect\\n    /// @return position a storage pointer referencing the position with the given owner and tick range\\n    /// @return amount0 the amount of token0 owed to the pool, negative if the pool should pay the recipient\\n    /// @return amount1 the amount of token1 owed to the pool, negative if the pool should pay the recipient\\n    function _modifyPosition(ModifyPositionParams memory params)\\n        private\\n        noDelegateCall\\n        returns (\\n            Position.Info storage position,\\n            int256 amount0,\\n            int256 amount1\\n        )\\n    {\\n        checkTicks(params.tickLower, params.tickUpper);\\n\\n        Slot0 memory _slot0 = slot0; // SLOAD for gas optimization\\n\\n        position = _updatePosition(\\n            params.owner,\\n            params.tickLower,\\n            params.tickUpper,\\n            params.liquidityDelta,\\n            _slot0.tick\\n        );\\n\\n        if (params.liquidityDelta != 0) {\\n            if (_slot0.tick < params.tickLower) {\\n                // current tick is below the passed range; liquidity can only become in range by crossing from left to\\n                // right, when we'll need _more_ token0 (it's becoming more valuable) so user must provide it\\n                amount0 = SqrtPriceMath.getAmount0Delta(\\n                    TickMath.getSqrtRatioAtTick(params.tickLower),\\n                    TickMath.getSqrtRatioAtTick(params.tickUpper),\\n                    params.liquidityDelta\\n                );\\n            } else if (_slot0.tick < params.tickUpper) {\\n                // current tick is inside the passed range\\n                uint128 liquidityBefore = liquidity; // SLOAD for gas optimization\\n\\n                // write an oracle entry\\n                (slot0.observationIndex, slot0.observationCardinality) = observations.write(\\n                    _slot0.observationIndex,\\n                    _blockTimestamp(),\\n                    _slot0.tick,\\n                    liquidityBefore,\\n                    _slot0.observationCardinality,\\n                    _slot0.observationCardinalityNext\\n                );\\n\\n                amount0 = SqrtPriceMath.getAmount0Delta(\\n                    _slot0.sqrtPriceX96,\\n                    TickMath.getSqrtRatioAtTick(params.tickUpper),\\n                    params.liquidityDelta\\n                );\\n                amount1 = SqrtPriceMath.getAmount1Delta(\\n                    TickMath.getSqrtRatioAtTick(params.tickLower),\\n                    _slot0.sqrtPriceX96,\\n                    params.liquidityDelta\\n                );\\n\\n                liquidity = LiquidityMath.addDelta(liquidityBefore, params.liquidityDelta);\\n            } else {\\n                // current tick is above the passed range; liquidity can only become in range by crossing from right to\\n                // left, when we'll need _more_ token1 (it's becoming more valuable) so user must provide it\\n                amount1 = SqrtPriceMath.getAmount1Delta(\\n                    TickMath.getSqrtRatioAtTick(params.tickLower),\\n                    TickMath.getSqrtRatioAtTick(params.tickUpper),\\n                    params.liquidityDelta\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @dev Gets and updates a position with the given liquidity delta\\n    /// @param owner the owner of the position\\n    /// @param tickLower the lower tick of the position's tick range\\n    /// @param tickUpper the upper tick of the position's tick range\\n    /// @param tick the current tick, passed to avoid sloads\\n    function _updatePosition(\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int128 liquidityDelta,\\n        int24 tick\\n    ) private returns (Position.Info storage position) {\\n        position = positions.get(owner, tickLower, tickUpper);\\n\\n        uint256 _feeGrowthGlobal0X128 = feeGrowthGlobal0X128; // SLOAD for gas optimization\\n        uint256 _feeGrowthGlobal1X128 = feeGrowthGlobal1X128; // SLOAD for gas optimization\\n\\n        // if we need to update the ticks, do it\\n        bool flippedLower;\\n        bool flippedUpper;\\n        if (liquidityDelta != 0) {\\n            uint32 time = _blockTimestamp();\\n            (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) = observations.observeSingle(\\n                time,\\n                0,\\n                slot0.tick,\\n                slot0.observationIndex,\\n                liquidity,\\n                slot0.observationCardinality\\n            );\\n\\n            flippedLower = ticks.update(\\n                tickLower,\\n                tick,\\n                liquidityDelta,\\n                _feeGrowthGlobal0X128,\\n                _feeGrowthGlobal1X128,\\n                secondsPerLiquidityCumulativeX128,\\n                tickCumulative,\\n                time,\\n                false,\\n                maxLiquidityPerTick\\n            );\\n            flippedUpper = ticks.update(\\n                tickUpper,\\n                tick,\\n                liquidityDelta,\\n                _feeGrowthGlobal0X128,\\n                _feeGrowthGlobal1X128,\\n                secondsPerLiquidityCumulativeX128,\\n                tickCumulative,\\n                time,\\n                true,\\n                maxLiquidityPerTick\\n            );\\n\\n            if (flippedLower) {\\n                tickBitmap.flipTick(tickLower, tickSpacing);\\n            }\\n            if (flippedUpper) {\\n                tickBitmap.flipTick(tickUpper, tickSpacing);\\n            }\\n        }\\n\\n        (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) = ticks.getFeeGrowthInside(\\n            tickLower,\\n            tickUpper,\\n            tick,\\n            _feeGrowthGlobal0X128,\\n            _feeGrowthGlobal1X128\\n        );\\n\\n        position.update(liquidityDelta, feeGrowthInside0X128, feeGrowthInside1X128);\\n\\n        // clear any tick data that is no longer needed\\n        if (liquidityDelta < 0) {\\n            if (flippedLower) {\\n                ticks.clear(tickLower);\\n            }\\n            if (flippedUpper) {\\n                ticks.clear(tickUpper);\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    /// @dev noDelegateCall is applied indirectly via _modifyPosition\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external override lock returns (uint256 amount0, uint256 amount1) {\\n        require(amount > 0);\\n        (, int256 amount0Int, int256 amount1Int) = _modifyPosition(\\n            ModifyPositionParams({\\n                owner: recipient,\\n                tickLower: tickLower,\\n                tickUpper: tickUpper,\\n                liquidityDelta: int256(amount).toInt128()\\n            })\\n        );\\n\\n        amount0 = uint256(amount0Int);\\n        amount1 = uint256(amount1Int);\\n\\n        uint256 balance0Before;\\n        uint256 balance1Before;\\n        if (amount0 > 0) balance0Before = balance0();\\n        if (amount1 > 0) balance1Before = balance1();\\n        IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0, amount1, data);\\n        if (amount0 > 0) require(balance0Before.add(amount0) <= balance0(), 'M0');\\n        if (amount1 > 0) require(balance1Before.add(amount1) <= balance1(), 'M1');\\n\\n        emit Mint(msg.sender, recipient, tickLower, tickUpper, amount, amount0, amount1);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external override lock returns (uint128 amount0, uint128 amount1) {\\n        // we don't need to checkTicks here, because invalid positions will never have non-zero tokensOwed{0,1}\\n        Position.Info storage position = positions.get(msg.sender, tickLower, tickUpper);\\n\\n        amount0 = amount0Requested > position.tokensOwed0 ? position.tokensOwed0 : amount0Requested;\\n        amount1 = amount1Requested > position.tokensOwed1 ? position.tokensOwed1 : amount1Requested;\\n\\n        if (amount0 > 0) {\\n            position.tokensOwed0 -= amount0;\\n            TransferHelper.safeTransfer(token0, recipient, amount0);\\n        }\\n        if (amount1 > 0) {\\n            position.tokensOwed1 -= amount1;\\n            TransferHelper.safeTransfer(token1, recipient, amount1);\\n        }\\n\\n        emit Collect(msg.sender, recipient, tickLower, tickUpper, amount0, amount1);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    /// @dev noDelegateCall is applied indirectly via _modifyPosition\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external override lock returns (uint256 amount0, uint256 amount1) {\\n        (Position.Info storage position, int256 amount0Int, int256 amount1Int) = _modifyPosition(\\n            ModifyPositionParams({\\n                owner: msg.sender,\\n                tickLower: tickLower,\\n                tickUpper: tickUpper,\\n                liquidityDelta: -int256(amount).toInt128()\\n            })\\n        );\\n\\n        amount0 = uint256(-amount0Int);\\n        amount1 = uint256(-amount1Int);\\n\\n        if (amount0 > 0 || amount1 > 0) {\\n            (position.tokensOwed0, position.tokensOwed1) = (\\n                position.tokensOwed0 + uint128(amount0),\\n                position.tokensOwed1 + uint128(amount1)\\n            );\\n        }\\n\\n        emit Burn(msg.sender, tickLower, tickUpper, amount, amount0, amount1);\\n    }\\n\\n    struct SwapCache {\\n        // the protocol fee for the input token\\n        uint8 feeProtocol;\\n        // liquidity at the beginning of the swap\\n        uint128 liquidityStart;\\n        // the timestamp of the current block\\n        uint32 blockTimestamp;\\n        // the current value of the tick accumulator, computed only if we cross an initialized tick\\n        int56 tickCumulative;\\n        // the current value of seconds per liquidity accumulator, computed only if we cross an initialized tick\\n        uint160 secondsPerLiquidityCumulativeX128;\\n        // whether we've computed and cached the above two accumulators\\n        bool computedLatestObservation;\\n    }\\n\\n    // the top level state of the swap, the results of which are recorded in storage at the end\\n    struct SwapState {\\n        // the amount remaining to be swapped in/out of the input/output asset\\n        int256 amountSpecifiedRemaining;\\n        // the amount already swapped out/in of the output/input asset\\n        int256 amountCalculated;\\n        // current sqrt(price)\\n        uint160 sqrtPriceX96;\\n        // the tick associated with the current price\\n        int24 tick;\\n        // the global fee growth of the input token\\n        uint256 feeGrowthGlobalX128;\\n        // amount of input token paid as protocol fee\\n        uint128 protocolFee;\\n        // the current liquidity in range\\n        uint128 liquidity;\\n    }\\n\\n    struct StepComputations {\\n        // the price at the beginning of the step\\n        uint160 sqrtPriceStartX96;\\n        // the next tick to swap to from the current tick in the swap direction\\n        int24 tickNext;\\n        // whether tickNext is initialized or not\\n        bool initialized;\\n        // sqrt(price) for the next tick (1/0)\\n        uint160 sqrtPriceNextX96;\\n        // how much is being swapped in in this step\\n        uint256 amountIn;\\n        // how much is being swapped out\\n        uint256 amountOut;\\n        // how much fee is being paid in\\n        uint256 feeAmount;\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external override noDelegateCall returns (int256 amount0, int256 amount1) {\\n        require(amountSpecified != 0, 'AS');\\n\\n        Slot0 memory slot0Start = slot0;\\n\\n        require(slot0Start.unlocked, 'LOK');\\n        require(\\n            zeroForOne\\n                ? sqrtPriceLimitX96 < slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 > TickMath.MIN_SQRT_RATIO\\n                : sqrtPriceLimitX96 > slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 < TickMath.MAX_SQRT_RATIO,\\n            'SPL'\\n        );\\n\\n        slot0.unlocked = false;\\n\\n        SwapCache memory cache = SwapCache({\\n            liquidityStart: liquidity,\\n            blockTimestamp: _blockTimestamp(),\\n            feeProtocol: zeroForOne ? (slot0Start.feeProtocol % 16) : (slot0Start.feeProtocol >> 4),\\n            secondsPerLiquidityCumulativeX128: 0,\\n            tickCumulative: 0,\\n            computedLatestObservation: false\\n        });\\n\\n        bool exactInput = amountSpecified > 0;\\n\\n        SwapState memory state = SwapState({\\n            amountSpecifiedRemaining: amountSpecified,\\n            amountCalculated: 0,\\n            sqrtPriceX96: slot0Start.sqrtPriceX96,\\n            tick: slot0Start.tick,\\n            feeGrowthGlobalX128: zeroForOne ? feeGrowthGlobal0X128 : feeGrowthGlobal1X128,\\n            protocolFee: 0,\\n            liquidity: cache.liquidityStart\\n        });\\n\\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\\n            StepComputations memory step;\\n\\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\\n\\n            (step.tickNext, step.initialized) = tickBitmap.nextInitializedTickWithinOneWord(\\n                state.tick,\\n                tickSpacing,\\n                zeroForOne\\n            );\\n\\n            // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\\n            if (step.tickNext < TickMath.MIN_TICK) {\\n                step.tickNext = TickMath.MIN_TICK;\\n            } else if (step.tickNext > TickMath.MAX_TICK) {\\n                step.tickNext = TickMath.MAX_TICK;\\n            }\\n\\n            // get the price for the next tick\\n            step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);\\n\\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\\n                state.sqrtPriceX96,\\n                (zeroForOne ? step.sqrtPriceNextX96 < sqrtPriceLimitX96 : step.sqrtPriceNextX96 > sqrtPriceLimitX96)\\n                    ? sqrtPriceLimitX96\\n                    : step.sqrtPriceNextX96,\\n                state.liquidity,\\n                state.amountSpecifiedRemaining,\\n                fee\\n            );\\n\\n            if (exactInput) {\\n                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\\n                state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());\\n            } else {\\n                state.amountSpecifiedRemaining += step.amountOut.toInt256();\\n                state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());\\n            }\\n\\n            // if the protocol fee is on, calculate how much is owed, decrement feeAmount, and increment protocolFee\\n            if (cache.feeProtocol > 0) {\\n                uint256 delta = step.feeAmount / cache.feeProtocol;\\n                step.feeAmount -= delta;\\n                state.protocolFee += uint128(delta);\\n            }\\n\\n            // update global fee tracker\\n            if (state.liquidity > 0)\\n                state.feeGrowthGlobalX128 += FullMath.mulDiv(step.feeAmount, FixedPoint128.Q128, state.liquidity);\\n\\n            // shift tick if we reached the next price\\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\\n                // if the tick is initialized, run the tick transition\\n                if (step.initialized) {\\n                    // check for the placeholder value, which we replace with the actual value the first time the swap\\n                    // crosses an initialized tick\\n                    if (!cache.computedLatestObservation) {\\n                        (cache.tickCumulative, cache.secondsPerLiquidityCumulativeX128) = observations.observeSingle(\\n                            cache.blockTimestamp,\\n                            0,\\n                            slot0Start.tick,\\n                            slot0Start.observationIndex,\\n                            cache.liquidityStart,\\n                            slot0Start.observationCardinality\\n                        );\\n                        cache.computedLatestObservation = true;\\n                    }\\n                    int128 liquidityNet = ticks.cross(\\n                        step.tickNext,\\n                        (zeroForOne ? state.feeGrowthGlobalX128 : feeGrowthGlobal0X128),\\n                        (zeroForOne ? feeGrowthGlobal1X128 : state.feeGrowthGlobalX128),\\n                        cache.secondsPerLiquidityCumulativeX128,\\n                        cache.tickCumulative,\\n                        cache.blockTimestamp\\n                    );\\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\\n                    // safe because liquidityNet cannot be type(int128).min\\n                    if (zeroForOne) liquidityNet = -liquidityNet;\\n\\n                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\\n                }\\n\\n                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\\n            }\\n        }\\n\\n        // update tick and write an oracle entry if the tick change\\n        if (state.tick != slot0Start.tick) {\\n            (uint16 observationIndex, uint16 observationCardinality) = observations.write(\\n                slot0Start.observationIndex,\\n                cache.blockTimestamp,\\n                slot0Start.tick,\\n                cache.liquidityStart,\\n                slot0Start.observationCardinality,\\n                slot0Start.observationCardinalityNext\\n            );\\n            (slot0.sqrtPriceX96, slot0.tick, slot0.observationIndex, slot0.observationCardinality) = (\\n                state.sqrtPriceX96,\\n                state.tick,\\n                observationIndex,\\n                observationCardinality\\n            );\\n        } else {\\n            // otherwise just update the price\\n            slot0.sqrtPriceX96 = state.sqrtPriceX96;\\n        }\\n\\n        // update liquidity if it changed\\n        if (cache.liquidityStart != state.liquidity) liquidity = state.liquidity;\\n\\n        // update fee growth global and, if necessary, protocol fees\\n        // overflow is acceptable, protocol has to withdraw before it hits type(uint128).max fees\\n        if (zeroForOne) {\\n            feeGrowthGlobal0X128 = state.feeGrowthGlobalX128;\\n            if (state.protocolFee > 0) protocolFees.token0 += state.protocolFee;\\n        } else {\\n            feeGrowthGlobal1X128 = state.feeGrowthGlobalX128;\\n            if (state.protocolFee > 0) protocolFees.token1 += state.protocolFee;\\n        }\\n\\n        (amount0, amount1) = zeroForOne == exactInput\\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\\n\\n        // do the transfers and collect payment\\n        if (zeroForOne) {\\n            if (amount1 < 0) TransferHelper.safeTransfer(token1, recipient, uint256(-amount1));\\n\\n            uint256 balance0Before = balance0();\\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);\\n            require(balance0Before.add(uint256(amount0)) <= balance0(), 'IIA');\\n        } else {\\n            if (amount0 < 0) TransferHelper.safeTransfer(token0, recipient, uint256(-amount0));\\n\\n            uint256 balance1Before = balance1();\\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);\\n            require(balance1Before.add(uint256(amount1)) <= balance1(), 'IIA');\\n        }\\n\\n        emit Swap(msg.sender, recipient, amount0, amount1, state.sqrtPriceX96, state.liquidity, state.tick);\\n        slot0.unlocked = true;\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolActions\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external override lock noDelegateCall {\\n        uint128 _liquidity = liquidity;\\n        require(_liquidity > 0, 'L');\\n\\n        uint256 fee0 = FullMath.mulDivRoundingUp(amount0, fee, 1e6);\\n        uint256 fee1 = FullMath.mulDivRoundingUp(amount1, fee, 1e6);\\n        uint256 balance0Before = balance0();\\n        uint256 balance1Before = balance1();\\n\\n        if (amount0 > 0) TransferHelper.safeTransfer(token0, recipient, amount0);\\n        if (amount1 > 0) TransferHelper.safeTransfer(token1, recipient, amount1);\\n\\n        IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0, fee1, data);\\n\\n        uint256 balance0After = balance0();\\n        uint256 balance1After = balance1();\\n\\n        require(balance0Before.add(fee0) <= balance0After, 'F0');\\n        require(balance1Before.add(fee1) <= balance1After, 'F1');\\n\\n        // sub is safe because we know balanceAfter is gt balanceBefore by at least fee\\n        uint256 paid0 = balance0After - balance0Before;\\n        uint256 paid1 = balance1After - balance1Before;\\n\\n        if (paid0 > 0) {\\n            uint8 feeProtocol0 = slot0.feeProtocol % 16;\\n            uint256 fees0 = feeProtocol0 == 0 ? 0 : paid0 / feeProtocol0;\\n            if (uint128(fees0) > 0) protocolFees.token0 += uint128(fees0);\\n            feeGrowthGlobal0X128 += FullMath.mulDiv(paid0 - fees0, FixedPoint128.Q128, _liquidity);\\n        }\\n        if (paid1 > 0) {\\n            uint8 feeProtocol1 = slot0.feeProtocol >> 4;\\n            uint256 fees1 = feeProtocol1 == 0 ? 0 : paid1 / feeProtocol1;\\n            if (uint128(fees1) > 0) protocolFees.token1 += uint128(fees1);\\n            feeGrowthGlobal1X128 += FullMath.mulDiv(paid1 - fees1, FixedPoint128.Q128, _liquidity);\\n        }\\n\\n        emit Flash(msg.sender, recipient, amount0, amount1, paid0, paid1);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolOwnerActions\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external override lock onlyFactoryOwner {\\n        require(\\n            (feeProtocol0 == 0 || (feeProtocol0 >= 4 && feeProtocol0 <= 10)) &&\\n                (feeProtocol1 == 0 || (feeProtocol1 >= 4 && feeProtocol1 <= 10))\\n        );\\n        uint8 feeProtocolOld = slot0.feeProtocol;\\n        slot0.feeProtocol = feeProtocol0 + (feeProtocol1 << 4);\\n        emit SetFeeProtocol(feeProtocolOld % 16, feeProtocolOld >> 4, feeProtocol0, feeProtocol1);\\n    }\\n\\n    /// @inheritdoc IUniswapV3PoolOwnerActions\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external override lock onlyFactoryOwner returns (uint128 amount0, uint128 amount1) {\\n        amount0 = amount0Requested > protocolFees.token0 ? protocolFees.token0 : amount0Requested;\\n        amount1 = amount1Requested > protocolFees.token1 ? protocolFees.token1 : amount1Requested;\\n\\n        if (amount0 > 0) {\\n            if (amount0 == protocolFees.token0) amount0--; // ensure that the slot is not cleared, for gas savings\\n            protocolFees.token0 -= amount0;\\n            TransferHelper.safeTransfer(token0, recipient, amount0);\\n        }\\n        if (amount1 > 0) {\\n            if (amount1 == protocolFees.token1) amount1--; // ensure that the slot is not cleared, for gas savings\\n            protocolFees.token1 -= amount1;\\n            TransferHelper.safeTransfer(token1, recipient, amount1);\\n        }\\n\\n        emit CollectProtocol(msg.sender, recipient, amount0, amount1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3PoolDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title An interface for a contract that is capable of deploying Uniswap V3 Pools\\n/// @notice A contract that constructs a pool must implement this to pass arguments to the pool\\n/// @dev This is used to avoid having constructor arguments in the pool contract, which results in the init code hash\\n/// of the pool being constant allowing the CREATE2 address of the pool to be cheaply computed on-chain\\ninterface IUniswapV3PoolDeployer {\\n    /// @notice Get the parameters to be used in constructing the pool, set transiently during pool creation.\\n    /// @dev Called by the pool constructor to fetch the parameters of the pool\\n    /// Returns factory The factory address\\n    /// Returns token0 The first token of the pool by address sort order\\n    /// Returns token1 The second token of the pool by address sort order\\n    /// Returns fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// Returns tickSpacing The minimum number of ticks between initialized ticks\\n    function parameters()\\n        external\\n        view\\n        returns (\\n            address factory,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickSpacing\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LowGasSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Tick.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0 <0.8.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './TickMath.sol';\\nimport './LiquidityMath.sol';\\n\\n/// @title Tick\\n/// @notice Contains functions for managing tick processes and relevant calculations\\nlibrary Tick {\\n    using LowGasSafeMath for int256;\\n    using SafeCast for int256;\\n\\n    // info stored for each initialized individual tick\\n    struct Info {\\n        // the total position liquidity that references this tick\\n        uint128 liquidityGross;\\n        // amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),\\n        int128 liquidityNet;\\n        // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\\n        uint256 feeGrowthOutside0X128;\\n        uint256 feeGrowthOutside1X128;\\n        // the cumulative tick value on the other side of the tick\\n        int56 tickCumulativeOutside;\\n        // the seconds per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\\n        uint160 secondsPerLiquidityOutsideX128;\\n        // the seconds spent on the other side of the tick (relative to the current tick)\\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\\n        uint32 secondsOutside;\\n        // true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0\\n        // these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks\\n        bool initialized;\\n    }\\n\\n    /// @notice Derives max liquidity per tick from given tick spacing\\n    /// @dev Executed within the pool constructor\\n    /// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\\n    ///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// @return The max liquidity per tick\\n    function tickSpacingToMaxLiquidityPerTick(int24 tickSpacing) internal pure returns (uint128) {\\n        int24 minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing;\\n        int24 maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing;\\n        uint24 numTicks = uint24((maxTick - minTick) / tickSpacing) + 1;\\n        return type(uint128).max / numTicks;\\n    }\\n\\n    /// @notice Retrieves fee growth data\\n    /// @param self The mapping containing all tick information for initialized ticks\\n    /// @param tickLower The lower tick boundary of the position\\n    /// @param tickUpper The upper tick boundary of the position\\n    /// @param tickCurrent The current tick\\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\\n    /// @return feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\\n    /// @return feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\\n    function getFeeGrowthInside(\\n        mapping(int24 => Tick.Info) storage self,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int24 tickCurrent,\\n        uint256 feeGrowthGlobal0X128,\\n        uint256 feeGrowthGlobal1X128\\n    ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {\\n        Info storage lower = self[tickLower];\\n        Info storage upper = self[tickUpper];\\n\\n        // calculate fee growth below\\n        uint256 feeGrowthBelow0X128;\\n        uint256 feeGrowthBelow1X128;\\n        if (tickCurrent >= tickLower) {\\n            feeGrowthBelow0X128 = lower.feeGrowthOutside0X128;\\n            feeGrowthBelow1X128 = lower.feeGrowthOutside1X128;\\n        } else {\\n            feeGrowthBelow0X128 = feeGrowthGlobal0X128 - lower.feeGrowthOutside0X128;\\n            feeGrowthBelow1X128 = feeGrowthGlobal1X128 - lower.feeGrowthOutside1X128;\\n        }\\n\\n        // calculate fee growth above\\n        uint256 feeGrowthAbove0X128;\\n        uint256 feeGrowthAbove1X128;\\n        if (tickCurrent < tickUpper) {\\n            feeGrowthAbove0X128 = upper.feeGrowthOutside0X128;\\n            feeGrowthAbove1X128 = upper.feeGrowthOutside1X128;\\n        } else {\\n            feeGrowthAbove0X128 = feeGrowthGlobal0X128 - upper.feeGrowthOutside0X128;\\n            feeGrowthAbove1X128 = feeGrowthGlobal1X128 - upper.feeGrowthOutside1X128;\\n        }\\n\\n        feeGrowthInside0X128 = feeGrowthGlobal0X128 - feeGrowthBelow0X128 - feeGrowthAbove0X128;\\n        feeGrowthInside1X128 = feeGrowthGlobal1X128 - feeGrowthBelow1X128 - feeGrowthAbove1X128;\\n    }\\n\\n    /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\\n    /// @param self The mapping containing all tick information for initialized ticks\\n    /// @param tick The tick that will be updated\\n    /// @param tickCurrent The current tick\\n    /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\\n    /// @param secondsPerLiquidityCumulativeX128 The all-time seconds per max(1, liquidity) of the pool\\n    /// @param tickCumulative The tick * time elapsed since the pool was first initialized\\n    /// @param time The current block timestamp cast to a uint32\\n    /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\\n    /// @param maxLiquidity The maximum liquidity allocation for a single tick\\n    /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\\n    function update(\\n        mapping(int24 => Tick.Info) storage self,\\n        int24 tick,\\n        int24 tickCurrent,\\n        int128 liquidityDelta,\\n        uint256 feeGrowthGlobal0X128,\\n        uint256 feeGrowthGlobal1X128,\\n        uint160 secondsPerLiquidityCumulativeX128,\\n        int56 tickCumulative,\\n        uint32 time,\\n        bool upper,\\n        uint128 maxLiquidity\\n    ) internal returns (bool flipped) {\\n        Tick.Info storage info = self[tick];\\n\\n        uint128 liquidityGrossBefore = info.liquidityGross;\\n        uint128 liquidityGrossAfter = LiquidityMath.addDelta(liquidityGrossBefore, liquidityDelta);\\n\\n        require(liquidityGrossAfter <= maxLiquidity, 'LO');\\n\\n        flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\\n\\n        if (liquidityGrossBefore == 0) {\\n            // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\\n            if (tick <= tickCurrent) {\\n                info.feeGrowthOutside0X128 = feeGrowthGlobal0X128;\\n                info.feeGrowthOutside1X128 = feeGrowthGlobal1X128;\\n                info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128;\\n                info.tickCumulativeOutside = tickCumulative;\\n                info.secondsOutside = time;\\n            }\\n            info.initialized = true;\\n        }\\n\\n        info.liquidityGross = liquidityGrossAfter;\\n\\n        // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\\n        info.liquidityNet = upper\\n            ? int256(info.liquidityNet).sub(liquidityDelta).toInt128()\\n            : int256(info.liquidityNet).add(liquidityDelta).toInt128();\\n    }\\n\\n    /// @notice Clears tick data\\n    /// @param self The mapping containing all initialized tick information for initialized ticks\\n    /// @param tick The tick that will be cleared\\n    function clear(mapping(int24 => Tick.Info) storage self, int24 tick) internal {\\n        delete self[tick];\\n    }\\n\\n    /// @notice Transitions to next tick as needed by price movement\\n    /// @param self The mapping containing all tick information for initialized ticks\\n    /// @param tick The destination tick of the transition\\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\\n    /// @param secondsPerLiquidityCumulativeX128 The current seconds per liquidity\\n    /// @param tickCumulative The tick * time elapsed since the pool was first initialized\\n    /// @param time The current block.timestamp\\n    /// @return liquidityNet The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)\\n    function cross(\\n        mapping(int24 => Tick.Info) storage self,\\n        int24 tick,\\n        uint256 feeGrowthGlobal0X128,\\n        uint256 feeGrowthGlobal1X128,\\n        uint160 secondsPerLiquidityCumulativeX128,\\n        int56 tickCumulative,\\n        uint32 time\\n    ) internal returns (int128 liquidityNet) {\\n        Tick.Info storage info = self[tick];\\n        info.feeGrowthOutside0X128 = feeGrowthGlobal0X128 - info.feeGrowthOutside0X128;\\n        info.feeGrowthOutside1X128 = feeGrowthGlobal1X128 - info.feeGrowthOutside1X128;\\n        info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128 - info.secondsPerLiquidityOutsideX128;\\n        info.tickCumulativeOutside = tickCumulative - info.tickCumulativeOutside;\\n        info.secondsOutside = time - info.secondsOutside;\\n        liquidityNet = info.liquidityNet;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TickBitmap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './BitMath.sol';\\n\\n/// @title Packed tick initialized state library\\n/// @notice Stores a packed mapping of tick index to its initialized state\\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\nlibrary TickBitmap {\\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\\n    /// @param tick The tick for which to compute the position\\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\\n    /// @return bitPos The bit position in the word where the flag is stored\\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\\n        wordPos = int16(tick >> 8);\\n        bitPos = uint8(tick % 256);\\n    }\\n\\n    /// @notice Flips the initialized state for a given tick from false to true, or vice versa\\n    /// @param self The mapping in which to flip the tick\\n    /// @param tick The tick to flip\\n    /// @param tickSpacing The spacing between usable ticks\\n    function flipTick(\\n        mapping(int16 => uint256) storage self,\\n        int24 tick,\\n        int24 tickSpacing\\n    ) internal {\\n        require(tick % tickSpacing == 0); // ensure that the tick is spaced\\n        (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);\\n        uint256 mask = 1 << bitPos;\\n        self[wordPos] ^= mask;\\n    }\\n\\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\n    /// to the left (less than or equal to) or right (greater than) of the given tick\\n    /// @param self The mapping in which to compute the next initialized tick\\n    /// @param tick The starting tick\\n    /// @param tickSpacing The spacing between usable ticks\\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\n    function nextInitializedTickWithinOneWord(\\n        mapping(int16 => uint256) storage self,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool lte\\n    ) internal view returns (int24 next, bool initialized) {\\n        int24 compressed = tick / tickSpacing;\\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n        if (lte) {\\n            (int16 wordPos, uint8 bitPos) = position(compressed);\\n            // all the 1s at or to the right of the current bitPos\\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n            uint256 masked = self[wordPos] & mask;\\n\\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\\n                : (compressed - int24(bitPos)) * tickSpacing;\\n        } else {\\n            // start from the word of the next tick, since the current tick state doesn't matter\\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\\n            // all the 1s at or to the left of the bitPos\\n            uint256 mask = ~((1 << bitPos) - 1);\\n            uint256 masked = self[wordPos] & mask;\\n\\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Position.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0 <0.8.0;\\n\\nimport './FullMath.sol';\\nimport './FixedPoint128.sol';\\nimport './LiquidityMath.sol';\\n\\n/// @title Position\\n/// @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\\n/// @dev Positions store additional state for tracking fees owed to the position\\nlibrary Position {\\n    // info stored for each user's position\\n    struct Info {\\n        // the amount of liquidity owned by this position\\n        uint128 liquidity;\\n        // fee growth per unit of liquidity as of the last update to liquidity or fees owed\\n        uint256 feeGrowthInside0LastX128;\\n        uint256 feeGrowthInside1LastX128;\\n        // the fees owed to the position owner in token0/token1\\n        uint128 tokensOwed0;\\n        uint128 tokensOwed1;\\n    }\\n\\n    /// @notice Returns the Info struct of a position, given an owner and position boundaries\\n    /// @param self The mapping containing all user positions\\n    /// @param owner The address of the position owner\\n    /// @param tickLower The lower tick boundary of the position\\n    /// @param tickUpper The upper tick boundary of the position\\n    /// @return position The position info struct of the given owners' position\\n    function get(\\n        mapping(bytes32 => Info) storage self,\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[keccak256(abi.encodePacked(owner, tickLower, tickUpper))];\\n    }\\n\\n    /// @notice Credits accumulated fees to a user's position\\n    /// @param self The individual position to update\\n    /// @param liquidityDelta The change in pool liquidity as a result of the position update\\n    /// @param feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\\n    /// @param feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\\n    function update(\\n        Info storage self,\\n        int128 liquidityDelta,\\n        uint256 feeGrowthInside0X128,\\n        uint256 feeGrowthInside1X128\\n    ) internal {\\n        Info memory _self = self;\\n\\n        uint128 liquidityNext;\\n        if (liquidityDelta == 0) {\\n            require(_self.liquidity > 0, 'NP'); // disallow pokes for 0 liquidity positions\\n            liquidityNext = _self.liquidity;\\n        } else {\\n            liquidityNext = LiquidityMath.addDelta(_self.liquidity, liquidityDelta);\\n        }\\n\\n        // calculate accumulated fees\\n        uint128 tokensOwed0 = uint128(\\n            FullMath.mulDiv(feeGrowthInside0X128 - _self.feeGrowthInside0LastX128, _self.liquidity, FixedPoint128.Q128)\\n        );\\n        uint128 tokensOwed1 = uint128(\\n            FullMath.mulDiv(feeGrowthInside1X128 - _self.feeGrowthInside1LastX128, _self.liquidity, FixedPoint128.Q128)\\n        );\\n\\n        // update the position\\n        if (liquidityDelta != 0) self.liquidity = liquidityNext;\\n        self.feeGrowthInside0LastX128 = feeGrowthInside0X128;\\n        self.feeGrowthInside1LastX128 = feeGrowthInside1X128;\\n        if (tokensOwed0 > 0 || tokensOwed1 > 0) {\\n            // overflow is acceptable, have to withdraw before you hit type(uint128).max fees\\n            self.tokensOwed0 += tokensOwed0;\\n            self.tokensOwed1 += tokensOwed1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Oracle\\n/// @notice Provides price and liquidity data useful for a wide variety of system designs\\n/// @dev Instances of stored oracle data, \\\"observations\\\", are collected in the oracle array\\n/// Every pool is initialized with an oracle array length of 1. Anyone can pay the SSTOREs to increase the\\n/// maximum length of the oracle array. New slots will be added when the array is fully populated.\\n/// Observations are overwritten when the full length of the oracle array is populated.\\n/// The most recent observation is available, independent of the length of the oracle array, by passing 0 to observe()\\nlibrary Oracle {\\n    struct Observation {\\n        // the block timestamp of the observation\\n        uint32 blockTimestamp;\\n        // the tick accumulator, i.e. tick * time elapsed since the pool was first initialized\\n        int56 tickCumulative;\\n        // the seconds per liquidity, i.e. seconds elapsed / max(1, liquidity) since the pool was first initialized\\n        uint160 secondsPerLiquidityCumulativeX128;\\n        // whether or not the observation is initialized\\n        bool initialized;\\n    }\\n\\n    /// @notice Transforms a previous observation into a new observation, given the passage of time and the current tick and liquidity values\\n    /// @dev blockTimestamp _must_ be chronologically equal to or greater than last.blockTimestamp, safe for 0 or 1 overflows\\n    /// @param last The specified observation to be transformed\\n    /// @param blockTimestamp The timestamp of the new observation\\n    /// @param tick The active tick at the time of the new observation\\n    /// @param liquidity The total in-range liquidity at the time of the new observation\\n    /// @return Observation The newly populated observation\\n    function transform(\\n        Observation memory last,\\n        uint32 blockTimestamp,\\n        int24 tick,\\n        uint128 liquidity\\n    ) private pure returns (Observation memory) {\\n        uint32 delta = blockTimestamp - last.blockTimestamp;\\n        return\\n            Observation({\\n                blockTimestamp: blockTimestamp,\\n                tickCumulative: last.tickCumulative + int56(tick) * delta,\\n                secondsPerLiquidityCumulativeX128: last.secondsPerLiquidityCumulativeX128 +\\n                    ((uint160(delta) << 128) / (liquidity > 0 ? liquidity : 1)),\\n                initialized: true\\n            });\\n    }\\n\\n    /// @notice Initialize the oracle array by writing the first slot. Called once for the lifecycle of the observations array\\n    /// @param self The stored oracle array\\n    /// @param time The time of the oracle initialization, via block.timestamp truncated to uint32\\n    /// @return cardinality The number of populated elements in the oracle array\\n    /// @return cardinalityNext The new length of the oracle array, independent of population\\n    function initialize(Observation[65535] storage self, uint32 time)\\n        internal\\n        returns (uint16 cardinality, uint16 cardinalityNext)\\n    {\\n        self[0] = Observation({\\n            blockTimestamp: time,\\n            tickCumulative: 0,\\n            secondsPerLiquidityCumulativeX128: 0,\\n            initialized: true\\n        });\\n        return (1, 1);\\n    }\\n\\n    /// @notice Writes an oracle observation to the array\\n    /// @dev Writable at most once per block. Index represents the most recently written element. cardinality and index must be tracked externally.\\n    /// If the index is at the end of the allowable array length (according to cardinality), and the next cardinality\\n    /// is greater than the current one, cardinality may be increased. This restriction is created to preserve ordering.\\n    /// @param self The stored oracle array\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param blockTimestamp The timestamp of the new observation\\n    /// @param tick The active tick at the time of the new observation\\n    /// @param liquidity The total in-range liquidity at the time of the new observation\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @param cardinalityNext The new length of the oracle array, independent of population\\n    /// @return indexUpdated The new index of the most recently written element in the oracle array\\n    /// @return cardinalityUpdated The new cardinality of the oracle array\\n    function write(\\n        Observation[65535] storage self,\\n        uint16 index,\\n        uint32 blockTimestamp,\\n        int24 tick,\\n        uint128 liquidity,\\n        uint16 cardinality,\\n        uint16 cardinalityNext\\n    ) internal returns (uint16 indexUpdated, uint16 cardinalityUpdated) {\\n        Observation memory last = self[index];\\n\\n        // early return if we've already written an observation this block\\n        if (last.blockTimestamp == blockTimestamp) return (index, cardinality);\\n\\n        // if the conditions are right, we can bump the cardinality\\n        if (cardinalityNext > cardinality && index == (cardinality - 1)) {\\n            cardinalityUpdated = cardinalityNext;\\n        } else {\\n            cardinalityUpdated = cardinality;\\n        }\\n\\n        indexUpdated = (index + 1) % cardinalityUpdated;\\n        self[indexUpdated] = transform(last, blockTimestamp, tick, liquidity);\\n    }\\n\\n    /// @notice Prepares the oracle array to store up to `next` observations\\n    /// @param self The stored oracle array\\n    /// @param current The current next cardinality of the oracle array\\n    /// @param next The proposed next cardinality which will be populated in the oracle array\\n    /// @return next The next cardinality which will be populated in the oracle array\\n    function grow(\\n        Observation[65535] storage self,\\n        uint16 current,\\n        uint16 next\\n    ) internal returns (uint16) {\\n        require(current > 0, 'I');\\n        // no-op if the passed next value isn't greater than the current next value\\n        if (next <= current) return current;\\n        // store in each slot to prevent fresh SSTOREs in swaps\\n        // this data will not be used because the initialized boolean is still false\\n        for (uint16 i = current; i < next; i++) self[i].blockTimestamp = 1;\\n        return next;\\n    }\\n\\n    /// @notice comparator for 32-bit timestamps\\n    /// @dev safe for 0 or 1 overflows, a and b _must_ be chronologically before or equal to time\\n    /// @param time A timestamp truncated to 32 bits\\n    /// @param a A comparison timestamp from which to determine the relative position of `time`\\n    /// @param b From which to determine the relative position of `time`\\n    /// @return bool Whether `a` is chronologically <= `b`\\n    function lte(\\n        uint32 time,\\n        uint32 a,\\n        uint32 b\\n    ) private pure returns (bool) {\\n        // if there hasn't been overflow, no need to adjust\\n        if (a <= time && b <= time) return a <= b;\\n\\n        uint256 aAdjusted = a > time ? a : a + 2**32;\\n        uint256 bAdjusted = b > time ? b : b + 2**32;\\n\\n        return aAdjusted <= bAdjusted;\\n    }\\n\\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a target, i.e. where [beforeOrAt, atOrAfter] is satisfied.\\n    /// The result may be the same observation, or adjacent observations.\\n    /// @dev The answer must be contained in the array, used when the target is located within the stored observation\\n    /// boundaries: older than the most recent observation and younger, or the same age as, the oldest observation\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param target The timestamp at which the reserved observation should be for\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return beforeOrAt The observation recorded before, or at, the target\\n    /// @return atOrAfter The observation recorded at, or after, the target\\n    function binarySearch(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 target,\\n        uint16 index,\\n        uint16 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        uint256 l = (index + 1) % cardinality; // oldest observation\\n        uint256 r = l + cardinality - 1; // newest observation\\n        uint256 i;\\n        while (true) {\\n            i = (l + r) / 2;\\n\\n            beforeOrAt = self[i % cardinality];\\n\\n            // we've landed on an uninitialized tick, keep searching higher (more recently)\\n            if (!beforeOrAt.initialized) {\\n                l = i + 1;\\n                continue;\\n            }\\n\\n            atOrAfter = self[(i + 1) % cardinality];\\n\\n            bool targetAtOrAfter = lte(time, beforeOrAt.blockTimestamp, target);\\n\\n            // check if we've found the answer!\\n            if (targetAtOrAfter && lte(time, target, atOrAfter.blockTimestamp)) break;\\n\\n            if (!targetAtOrAfter) r = i - 1;\\n            else l = i + 1;\\n        }\\n    }\\n\\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a given target, i.e. where [beforeOrAt, atOrAfter] is satisfied\\n    /// @dev Assumes there is at least 1 initialized observation.\\n    /// Used by observeSingle() to compute the counterfactual accumulator values as of a given block timestamp.\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param target The timestamp at which the reserved observation should be for\\n    /// @param tick The active tick at the time of the returned or simulated observation\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The total pool liquidity at the time of the call\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return beforeOrAt The observation which occurred at, or before, the given timestamp\\n    /// @return atOrAfter The observation which occurred at, or after, the given timestamp\\n    function getSurroundingObservations(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 target,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        // optimistically set before to the newest observation\\n        beforeOrAt = self[index];\\n\\n        // if the target is chronologically at or after the newest observation, we can early return\\n        if (lte(time, beforeOrAt.blockTimestamp, target)) {\\n            if (beforeOrAt.blockTimestamp == target) {\\n                // if newest observation equals target, we're in the same block, so we can ignore atOrAfter\\n                return (beforeOrAt, atOrAfter);\\n            } else {\\n                // otherwise, we need to transform\\n                return (beforeOrAt, transform(beforeOrAt, target, tick, liquidity));\\n            }\\n        }\\n\\n        // now, set before to the oldest observation\\n        beforeOrAt = self[(index + 1) % cardinality];\\n        if (!beforeOrAt.initialized) beforeOrAt = self[0];\\n\\n        // ensure that the target is chronologically at or after the oldest observation\\n        require(lte(time, beforeOrAt.blockTimestamp, target), 'OLD');\\n\\n        // if we've reached this point, we have to binary search\\n        return binarySearch(self, time, target, index, cardinality);\\n    }\\n\\n    /// @dev Reverts if an observation at or before the desired observation timestamp does not exist.\\n    /// 0 may be passed as `secondsAgo' to return the current cumulative values.\\n    /// If called with a timestamp falling between two observations, returns the counterfactual accumulator values\\n    /// at exactly the timestamp between the two observations.\\n    /// @param self The stored oracle array\\n    /// @param time The current block timestamp\\n    /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an observation\\n    /// @param tick The current tick\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The current in-range pool liquidity\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return tickCumulative The tick * time elapsed since the pool was first initialized, as of `secondsAgo`\\n    /// @return secondsPerLiquidityCumulativeX128 The time elapsed / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\\n    function observeSingle(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32 secondsAgo,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) internal view returns (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) {\\n        if (secondsAgo == 0) {\\n            Observation memory last = self[index];\\n            if (last.blockTimestamp != time) last = transform(last, time, tick, liquidity);\\n            return (last.tickCumulative, last.secondsPerLiquidityCumulativeX128);\\n        }\\n\\n        uint32 target = time - secondsAgo;\\n\\n        (Observation memory beforeOrAt, Observation memory atOrAfter) = getSurroundingObservations(\\n            self,\\n            time,\\n            target,\\n            tick,\\n            index,\\n            liquidity,\\n            cardinality\\n        );\\n\\n        if (target == beforeOrAt.blockTimestamp) {\\n            // we're at the left boundary\\n            return (beforeOrAt.tickCumulative, beforeOrAt.secondsPerLiquidityCumulativeX128);\\n        } else if (target == atOrAfter.blockTimestamp) {\\n            // we're at the right boundary\\n            return (atOrAfter.tickCumulative, atOrAfter.secondsPerLiquidityCumulativeX128);\\n        } else {\\n            // we're in the middle\\n            uint32 observationTimeDelta = atOrAfter.blockTimestamp - beforeOrAt.blockTimestamp;\\n            uint32 targetDelta = target - beforeOrAt.blockTimestamp;\\n            return (\\n                beforeOrAt.tickCumulative +\\n                    ((atOrAfter.tickCumulative - beforeOrAt.tickCumulative) / observationTimeDelta) *\\n                    targetDelta,\\n                beforeOrAt.secondsPerLiquidityCumulativeX128 +\\n                    uint160(\\n                        (uint256(\\n                            atOrAfter.secondsPerLiquidityCumulativeX128 - beforeOrAt.secondsPerLiquidityCumulativeX128\\n                        ) * targetDelta) / observationTimeDelta\\n                    )\\n            );\\n        }\\n    }\\n\\n    /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\\n    /// @dev Reverts if `secondsAgos` > oldest observation\\n    /// @param self The stored oracle array\\n    /// @param time The current block.timestamp\\n    /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an observation\\n    /// @param tick The current tick\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param liquidity The current in-range pool liquidity\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return tickCumulatives The tick * time elapsed since the pool was first initialized, as of each `secondsAgo`\\n    /// @return secondsPerLiquidityCumulativeX128s The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\\n    function observe(\\n        Observation[65535] storage self,\\n        uint32 time,\\n        uint32[] memory secondsAgos,\\n        int24 tick,\\n        uint16 index,\\n        uint128 liquidity,\\n        uint16 cardinality\\n    ) internal view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) {\\n        require(cardinality > 0, 'I');\\n\\n        tickCumulatives = new int56[](secondsAgos.length);\\n        secondsPerLiquidityCumulativeX128s = new uint160[](secondsAgos.length);\\n        for (uint256 i = 0; i < secondsAgos.length; i++) {\\n            (tickCumulatives[i], secondsPerLiquidityCumulativeX128s[i]) = observeSingle(\\n                self,\\n                time,\\n                secondsAgos[i],\\n                tick,\\n                index,\\n                liquidity,\\n                cardinality\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FixedPoint128.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '../interfaces/IERC20Minimal.sol';\\n\\n/// @title TransferHelper\\n/// @notice Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Calls transfer on token contract, errors with TF if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Minimal.transfer.selector, to, value)\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TF');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TickMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LiquidityMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SqrtPriceMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient = (\\n                amount <= type(uint160).max\\n                    ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                    : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n            );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient = (\\n                amount <= type(uint160).max\\n                    ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                    : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n            );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SwapMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './FullMath.sol';\\nimport './SqrtPriceMath.sol';\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint160 sqrtRatioNextX96,\\n            uint256 amountIn,\\n            uint256 amountOut,\\n            uint256 feeAmount\\n        )\\n    {\\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n        bool exactIn = amountRemaining >= 0;\\n\\n        if (exactIn) {\\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\\n            amountIn = zeroForOne\\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    amountRemainingLessFee,\\n                    zeroForOne\\n                );\\n        } else {\\n            amountOut = zeroForOne\\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    uint256(-amountRemaining),\\n                    zeroForOne\\n                );\\n        }\\n\\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n        // get the input/output amounts\\n        if (zeroForOne) {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\\n        } else {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\\n        }\\n\\n        // cap the output amount to not exceed the remaining output amount\\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n            amountOut = uint256(-amountRemaining);\\n        }\\n\\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n            // we didn't reach the target, so take the remainder of the maximum input as fee\\n            feeAmount = uint256(amountRemaining) - amountIn;\\n        } else {\\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Minimal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Minimal ERC20 interface for Uniswap\\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\\ninterface IERC20Minimal {\\n    /// @notice Returns the balance of a token\\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\n    /// @return The number of tokens held by the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\n    /// @param recipient The account that will receive the amount transferred\\n    /// @param amount The number of tokens to send from the sender to the recipient\\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Returns the current allowance given to a spender by an owner\\n    /// @param owner The account of the token owner\\n    /// @param spender The account of the token spender\\n    /// @return The current allowance granted by `owner` to `spender`\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\n    /// @param amount The amount of tokens allowed to be used by `spender`\\n    /// @return Returns true for a successful approval, false for unsuccessful\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\n    /// @param sender The account from which the transfer will be initiated\\n    /// @param recipient The recipient of the transfer\\n    /// @param amount The amount of the transfer\\n    /// @return Returns true for a successful transfer, false for unsuccessful\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\\n    /// @param value The amount of tokens that were transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\\n    /// @param owner The account that approved spending of its tokens\\n    /// @param spender The account for which the spending allowance was modified\\n    /// @param value The new allowance from the owner to the spender\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/callback/IUniswapV3MintCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#mint\\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\\ninterface IUniswapV3MintCallback {\\n    /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\\n    function uniswapV3MintCallback(\\n        uint256 amount0Owed,\\n        uint256 amount1Owed,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/callback/IUniswapV3FlashCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#flash\\n/// @notice Any contract that calls IUniswapV3PoolActions#flash must implement this interface\\ninterface IUniswapV3FlashCallback {\\n    /// @notice Called to `msg.sender` after transferring to the recipient from IUniswapV3Pool#flash.\\n    /// @dev In the implementation you must repay the pool the tokens sent by flash plus the computed fee amounts.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// @param fee0 The fee amount in token0 due to the pool by the end of the flash\\n    /// @param fee1 The fee amount in token1 due to the pool by the end of the flash\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#flash call\\n    function uniswapV3FlashCallback(\\n        uint256 fee0,\\n        uint256 fee1,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IUniswapV3PoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IUniswapV3PoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IUniswapV3PoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/BitMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/UnsafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FixedPoint96.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}",
      "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"FeeAmountEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"enableFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"feeAmountTickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parameters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "contract_name": "UniswapV3Factory",
      "compiler_version": "v0.7.6+commit.7338295f",
      "optimization_used": "1",
      "runs": "800",
      "constructor_arguments": "",
      "evm_version": "Default",
      "library": "",
      "license_type": "",
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    },
    "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70": {
      "address": "0x71041dddad3595f9ced3dccfbe3d1f4b0a16bb70",
      "has_source_code": true,
      "source_code": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"EACAggregatorProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"./AggregatorProxy.sol\\\";\\nimport \\\"./interfaces/AccessControllerInterface.sol\\\";\\n\\n/**\\n * @title External Access Controlled Aggregator Proxy\\n * @notice A trusted proxy for updating where current answers are read from\\n * @notice This contract provides a consistent address for the\\n * Aggregator and AggregatorV3Interface but delegates where it reads from to the owner, who is\\n * trusted to update it.\\n * @notice Only access enabled addresses are allowed to access getters for\\n * aggregated answers and round information.\\n */\\ncontract EACAggregatorProxy is AggregatorProxy {\\n\\n  AccessControllerInterface public accessController;\\n\\n  constructor(\\n    address _aggregator,\\n    address _accessController\\n  )\\n    public\\n    AggregatorProxy(_aggregator)\\n  {\\n    setController(_accessController);\\n  }\\n\\n  /**\\n   * @notice Allows the owner to update the accessController contract address.\\n   * @param _accessController The new address for the accessController contract\\n   */\\n  function setController(address _accessController)\\n    public\\n    onlyOwner()\\n  {\\n    accessController = AccessControllerInterface(_accessController);\\n  }\\n\\n  /**\\n   * @notice Reads the current answer from aggregator delegated to.\\n   * @dev overridden function to add the checkAccess() modifier\\n   *\\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended latestRoundData\\n   * instead which includes better verification information.\\n   */\\n  function latestAnswer()\\n    public\\n    view\\n    override\\n    checkAccess()\\n    returns (int256)\\n  {\\n    return super.latestAnswer();\\n  }\\n\\n  /**\\n   * @notice get the latest completed round where the answer was updated. This\\n   * ID includes the proxy's phase, to make sure round IDs increase even when\\n   * switching to a newly deployed aggregator.\\n   *\\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended latestRoundData\\n   * instead which includes better verification information.\\n   */\\n  function latestTimestamp()\\n    public\\n    view\\n    override\\n    checkAccess()\\n    returns (uint256)\\n  {\\n    return super.latestTimestamp();\\n  }\\n\\n  /**\\n   * @notice get past rounds answers\\n   * @param _roundId the answer number to retrieve the answer for\\n   * @dev overridden function to add the checkAccess() modifier\\n   *\\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended getRoundData\\n   * instead which includes better verification information.\\n   */\\n  function getAnswer(uint256 _roundId)\\n    public\\n    view\\n    override\\n    checkAccess()\\n    returns (int256)\\n  {\\n    return super.getAnswer(_roundId);\\n  }\\n\\n  /**\\n   * @notice get block timestamp when an answer was last updated\\n   * @param _roundId the answer number to retrieve the updated timestamp for\\n   * @dev overridden function to add the checkAccess() modifier\\n   *\\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended getRoundData\\n   * instead which includes better verification information.\\n   */\\n  function getTimestamp(uint256 _roundId)\\n    public\\n    view\\n    override\\n    checkAccess()\\n    returns (uint256)\\n  {\\n    return super.getTimestamp(_roundId);\\n  }\\n\\n  /**\\n   * @notice get the latest completed round where the answer was updated\\n   * @dev overridden function to add the checkAccess() modifier\\n   *\\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended latestRoundData\\n   * instead which includes better verification information.\\n   */\\n  function latestRound()\\n    public\\n    view\\n    override\\n    checkAccess()\\n    returns (uint256)\\n  {\\n    return super.latestRound();\\n  }\\n\\n  /**\\n   * @notice get data about a round. Consumers are encouraged to check\\n   * that they're receiving fresh data by inspecting the updatedAt and\\n   * answeredInRound return values.\\n   * Note that different underlying implementations of AggregatorV3Interface\\n   * have slightly different semantics for some of the return values. Consumers\\n   * should determine what implementations they expect to receive\\n   * data from and validate that they can properly handle return data from all\\n   * of them.\\n   * @param _roundId the round ID to retrieve the round data for\\n   * @return roundId is the round ID from the aggregator for which the data was\\n   * retrieved combined with a phase to ensure that round IDs get larger as\\n   * time moves forward.\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @dev Note that answer and updatedAt may change between queries.\\n   */\\n  function getRoundData(uint80 _roundId)\\n    public\\n    view\\n    checkAccess()\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return super.getRoundData(_roundId);\\n  }\\n\\n  /**\\n   * @notice get data about the latest round. Consumers are encouraged to check\\n   * that they're receiving fresh data by inspecting the updatedAt and\\n   * answeredInRound return values.\\n   * Note that different underlying implementations of AggregatorV3Interface\\n   * have slightly different semantics for some of the return values. Consumers\\n   * should determine what implementations they expect to receive\\n   * data from and validate that they can properly handle return data from all\\n   * of them.\\n   * @return roundId is the round ID from the aggregator for which the data was\\n   * retrieved combined with a phase to ensure that round IDs get larger as\\n   * time moves forward.\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @dev Note that answer and updatedAt may change between queries.\\n   */\\n  function latestRoundData()\\n    public\\n    view\\n    checkAccess()\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return super.latestRoundData();\\n  }\\n\\n  /**\\n   * @notice Used if an aggregator contract has been proposed.\\n   * @param _roundId the round ID to retrieve the round data for\\n   * @return roundId is the round ID for which data was retrieved\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n  */\\n  function proposedGetRoundData(uint80 _roundId)\\n    public\\n    view\\n    checkAccess()\\n    hasProposal()\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return super.proposedGetRoundData(_roundId);\\n  }\\n\\n  /**\\n   * @notice Used if an aggregator contract has been proposed.\\n   * @return roundId is the round ID for which data was retrieved\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n  */\\n  function proposedLatestRoundData()\\n    public\\n    view\\n    checkAccess()\\n    hasProposal()\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return super.proposedLatestRoundData();\\n  }\\n\\n  /**\\n   * @dev reverts if the caller does not have access by the accessController\\n   * contract or is the contract itself.\\n   */\\n  modifier checkAccess() {\\n    AccessControllerInterface ac = accessController;\\n    require(address(ac) == address(0) || ac.hasAccess(msg.sender, msg.data), \\\"No access\\\");\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"AggregatorProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.6.6;\\n\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./interfaces/AggregatorV2V3Interface.sol\\\";\\n\\n/**\\n * @title A trusted proxy for updating where current answers are read from\\n * @notice This contract provides a consistent address for the\\n * CurrentAnwerInterface but delegates where it reads from to the owner, who is\\n * trusted to update it.\\n */\\ncontract AggregatorProxy is AggregatorV2V3Interface, Owned {\\n\\n  struct Phase {\\n    uint16 id;\\n    AggregatorV2V3Interface aggregator;\\n  }\\n  Phase private currentPhase;\\n  AggregatorV2V3Interface public proposedAggregator;\\n  mapping(uint16 => AggregatorV2V3Interface) public phaseAggregators;\\n\\n  uint256 constant private PHASE_OFFSET = 64;\\n  uint256 constant private PHASE_SIZE = 16;\\n  uint256 constant private MAX_ID = 2**(PHASE_OFFSET+PHASE_SIZE) - 1;\\n\\n  constructor(address _aggregator) public Owned() {\\n    setAggregator(_aggregator);\\n  }\\n\\n  /**\\n   * @notice Reads the current answer from aggregator delegated to.\\n   *\\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended latestRoundData\\n   * instead which includes better verification information.\\n   */\\n  function latestAnswer()\\n    public\\n    view\\n    virtual\\n    override\\n    returns (int256 answer)\\n  {\\n    return currentPhase.aggregator.latestAnswer();\\n  }\\n\\n  /**\\n   * @notice Reads the last updated height from aggregator delegated to.\\n   *\\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended latestRoundData\\n   * instead which includes better verification information.\\n   */\\n  function latestTimestamp()\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256 updatedAt)\\n  {\\n    return currentPhase.aggregator.latestTimestamp();\\n  }\\n\\n  /**\\n   * @notice get past rounds answers\\n   * @param _roundId the answer number to retrieve the answer for\\n   *\\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended getRoundData\\n   * instead which includes better verification information.\\n   */\\n  function getAnswer(uint256 _roundId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (int256 answer)\\n  {\\n    if (_roundId > MAX_ID) return 0;\\n\\n    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\\n    AggregatorV2V3Interface aggregator = phaseAggregators[phaseId];\\n    if (address(aggregator) == address(0)) return 0;\\n\\n    return aggregator.getAnswer(aggregatorRoundId);\\n  }\\n\\n  /**\\n   * @notice get block timestamp when an answer was last updated\\n   * @param _roundId the answer number to retrieve the updated timestamp for\\n   *\\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended getRoundData\\n   * instead which includes better verification information.\\n   */\\n  function getTimestamp(uint256 _roundId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256 updatedAt)\\n  {\\n    if (_roundId > MAX_ID) return 0;\\n\\n    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\\n    AggregatorV2V3Interface aggregator = phaseAggregators[phaseId];\\n    if (address(aggregator) == address(0)) return 0;\\n\\n    return aggregator.getTimestamp(aggregatorRoundId);\\n  }\\n\\n  /**\\n   * @notice get the latest completed round where the answer was updated. This\\n   * ID includes the proxy's phase, to make sure round IDs increase even when\\n   * switching to a newly deployed aggregator.\\n   *\\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\\n   * answer has been reached, it will simply return 0. Either wait to point to\\n   * an already answered Aggregator or use the recommended latestRoundData\\n   * instead which includes better verification information.\\n   */\\n  function latestRound()\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256 roundId)\\n  {\\n    Phase memory phase = currentPhase; // cache storage reads\\n    return addPhase(phase.id, uint64(phase.aggregator.latestRound()));\\n  }\\n\\n  /**\\n   * @notice get data about a round. Consumers are encouraged to check\\n   * that they're receiving fresh data by inspecting the updatedAt and\\n   * answeredInRound return values.\\n   * Note that different underlying implementations of AggregatorV3Interface\\n   * have slightly different semantics for some of the return values. Consumers\\n   * should determine what implementations they expect to receive\\n   * data from and validate that they can properly handle return data from all\\n   * of them.\\n   * @param _roundId the requested round ID as presented through the proxy, this\\n   * is made up of the aggregator's round ID with the phase ID encoded in the\\n   * two highest order bytes\\n   * @return roundId is the round ID from the aggregator for which the data was\\n   * retrieved combined with an phase to ensure that round IDs get larger as\\n   * time moves forward.\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @dev Note that answer and updatedAt may change between queries.\\n   */\\n  function getRoundData(uint80 _roundId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\\n\\n    (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 ansIn\\n    ) = phaseAggregators[phaseId].getRoundData(aggregatorRoundId);\\n\\n    return addPhaseIds(roundId, answer, startedAt, updatedAt, ansIn, phaseId);\\n  }\\n\\n  /**\\n   * @notice get data about the latest round. Consumers are encouraged to check\\n   * that they're receiving fresh data by inspecting the updatedAt and\\n   * answeredInRound return values.\\n   * Note that different underlying implementations of AggregatorV3Interface\\n   * have slightly different semantics for some of the return values. Consumers\\n   * should determine what implementations they expect to receive\\n   * data from and validate that they can properly handle return data from all\\n   * of them.\\n   * @return roundId is the round ID from the aggregator for which the data was\\n   * retrieved combined with an phase to ensure that round IDs get larger as\\n   * time moves forward.\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @dev Note that answer and updatedAt may change between queries.\\n   */\\n  function latestRoundData()\\n    public\\n    view\\n    virtual\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    Phase memory current = currentPhase; // cache storage reads\\n\\n    (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 ansIn\\n    ) = current.aggregator.latestRoundData();\\n\\n    return addPhaseIds(roundId, answer, startedAt, updatedAt, ansIn, current.id);\\n  }\\n\\n  /**\\n   * @notice Used if an aggregator contract has been proposed.\\n   * @param _roundId the round ID to retrieve the round data for\\n   * @return roundId is the round ID for which data was retrieved\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n  */\\n  function proposedGetRoundData(uint80 _roundId)\\n    public\\n    view\\n    virtual\\n    hasProposal()\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return proposedAggregator.getRoundData(_roundId);\\n  }\\n\\n  /**\\n   * @notice Used if an aggregator contract has been proposed.\\n   * @return roundId is the round ID for which data was retrieved\\n   * @return answer is the answer for the given round\\n   * @return startedAt is the timestamp when the round was started.\\n   * (Only some AggregatorV3Interface implementations return meaningful values)\\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\\n   * answer was last computed)\\n   * @return answeredInRound is the round ID of the round in which the answer\\n   * was computed.\\n  */\\n  function proposedLatestRoundData()\\n    public\\n    view\\n    virtual\\n    hasProposal()\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return proposedAggregator.latestRoundData();\\n  }\\n\\n  /**\\n   * @notice returns the current phase's aggregator address.\\n   */\\n  function aggregator()\\n    external\\n    view\\n    returns (address)\\n  {\\n    return address(currentPhase.aggregator);\\n  }\\n\\n  /**\\n   * @notice returns the current phase's ID.\\n   */\\n  function phaseId()\\n    external\\n    view\\n    returns (uint16)\\n  {\\n    return currentPhase.id;\\n  }\\n\\n  /**\\n   * @notice represents the number of decimals the aggregator responses represent.\\n   */\\n  function decimals()\\n    external\\n    view\\n    override\\n    returns (uint8)\\n  {\\n    return currentPhase.aggregator.decimals();\\n  }\\n\\n  /**\\n   * @notice the version number representing the type of aggregator the proxy\\n   * points to.\\n   */\\n  function version()\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return currentPhase.aggregator.version();\\n  }\\n\\n  /**\\n   * @notice returns the description of the aggregator the proxy points to.\\n   */\\n  function description()\\n    external\\n    view\\n    override\\n    returns (string memory)\\n  {\\n    return currentPhase.aggregator.description();\\n  }\\n\\n  /**\\n   * @notice Allows the owner to propose a new address for the aggregator\\n   * @param _aggregator The new address for the aggregator contract\\n   */\\n  function proposeAggregator(address _aggregator)\\n    external\\n    onlyOwner()\\n  {\\n    proposedAggregator = AggregatorV2V3Interface(_aggregator);\\n  }\\n\\n  /**\\n   * @notice Allows the owner to confirm and change the address\\n   * to the proposed aggregator\\n   * @dev Reverts if the given address doesn't match what was previously\\n   * proposed\\n   * @param _aggregator The new address for the aggregator contract\\n   */\\n  function confirmAggregator(address _aggregator)\\n    external\\n    onlyOwner()\\n  {\\n    require(_aggregator == address(proposedAggregator), \\\"Invalid proposed aggregator\\\");\\n    delete proposedAggregator;\\n    setAggregator(_aggregator);\\n  }\\n\\n\\n  /*\\n   * Internal\\n   */\\n\\n  function setAggregator(address _aggregator)\\n    internal\\n  {\\n    uint16 id = currentPhase.id + 1;\\n    currentPhase = Phase(id, AggregatorV2V3Interface(_aggregator));\\n    phaseAggregators[id] = AggregatorV2V3Interface(_aggregator);\\n  }\\n\\n  function addPhase(\\n    uint16 _phase,\\n    uint64 _originalId\\n  )\\n    internal\\n    view\\n    returns (uint80)\\n  {\\n    return uint80(uint256(_phase) << PHASE_OFFSET | _originalId);\\n  }\\n\\n  function parseIds(\\n    uint256 _roundId\\n  )\\n    internal\\n    view\\n    returns (uint16, uint64)\\n  {\\n    uint16 phaseId = uint16(_roundId >> PHASE_OFFSET);\\n    uint64 aggregatorRoundId = uint64(_roundId);\\n\\n    return (phaseId, aggregatorRoundId);\\n  }\\n\\n  function addPhaseIds(\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound,\\n      uint16 phaseId\\n  )\\n    internal\\n    view\\n    returns (uint80, int256, uint256, uint256, uint80)\\n  {\\n    return (\\n      addPhase(phaseId, uint64(roundId)),\\n      answer,\\n      startedAt,\\n      updatedAt,\\n      addPhase(phaseId, uint64(answeredInRound))\\n    );\\n  }\\n\\n  /*\\n   * Modifiers\\n   */\\n\\n  modifier hasProposal() {\\n    require(address(proposedAggregator) != address(0), \\\"No proposed aggregator present\\\");\\n    _;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"Owned.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @title The Owned contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract Owned {\\n\\n  address payable public owner;\\n  address private pendingOwner;\\n\\n  event OwnershipTransferRequested(\\n    address indexed from,\\n    address indexed to\\n  );\\n  event OwnershipTransferred(\\n    address indexed from,\\n    address indexed to\\n  );\\n\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address _to)\\n    external\\n    onlyOwner()\\n  {\\n    pendingOwner = _to;\\n\\n    emit OwnershipTransferRequested(owner, _to);\\n  }\\n\\n  /**\\n   * @dev Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership()\\n    external\\n  {\\n    require(msg.sender == pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = owner;\\n    owner = msg.sender;\\n    pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @dev Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"Only callable by owner\\\");\\n    _;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"interfaces/AggregatorV2V3Interface.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\\n{\\n}\\n\"\r\n    },\r\n    \"interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n  function latestTimestamp() external view returns (uint256);\\n  function latestRound() external view returns (uint256);\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    },\r\n    \"interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"interfaces/AccessControllerInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface AccessControllerInterface {\\n  function hasAccess(address user, bytes calldata data) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
      "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accessController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessController\",\"outputs\":[{\"internalType\":\"contract AccessControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"confirmAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"phaseAggregators\",\"outputs\":[{\"internalType\":\"contract AggregatorV2V3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"proposeAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedAggregator\",\"outputs\":[{\"internalType\":\"contract AggregatorV2V3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"proposedGetRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedLatestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "contract_name": "EACAggregatorProxy",
      "compiler_version": "v0.6.6+commit.6c089d02",
      "optimization_used": "1",
      "runs": "1000000",
      "constructor_arguments": "",
      "evm_version": "istanbul",
      "library": "",
      "license_type": "MIT",
      "proxy": "0",
      "implementation": "",
      "bytecode": null
    }
  },
  "summary": {
    "total_calls": 1904,
    "call_types": {
      "call": 904,
      "staticcall": 559,
      "delegatecall": 441
    },
    "total_value_transferred": 69192915917768971626,
    "total_value_transferred_eth": 69.19291591776897
  }
}